"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3529],{3529:function(e,a,t){t.r(a),t(7378);var n=t(2682);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},s.apply(this,arguments)}function o(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",s({components:a},t),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"es6 modules")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"commonjs")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"amd")),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"require-with-expression",parentName:"h2"}),"带表达式的 require 语句",(0,n.kt)("a",{href:"#require-with-expression","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"如果 require 中含有表达式，由于编译时并不清楚 ",(0,n.kt)("strong",{parentName:"p"},"具体")," 导入了哪个模块，因此会创建一个上下文。"),(0,n.kt)("p",null,"参考接下来的例子：假设现在有包含 ",(0,n.kt)("inlineCode",{parentName:"p"},".ejs")," 文件的如下目录结构："),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-bash",parentName:"pre"},"example_directory\n│\n└───template\n│   │   table.ejs\n│   │   table-row.ejs\n│   │\n│   └───directory\n│       │   another.ejs")),(0,n.kt)("p",null,"当下面的 ",(0,n.kt)("inlineCode",{parentName:"p"},"require()")," 调用被评估解析时："),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,n.kt)("span",{className:"token function",parentName:"code"},"require"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token string",parentName:"code"},"'./template/'")," ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"+")," name ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"+")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'.ejs'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,"webpack 解析会 ",(0,n.kt)("inlineCode",{parentName:"p"},"require()")," 调用，然后提取出如下一些信息："),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-code",parentName:"pre"},"Directory: ./template\nRegular expression: /^.*\\.ejs$/\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"上下文模块")),(0,n.kt)("p",null,"并且会创建一个上下文模块。它包含 ",(0,n.kt)("strong",{parentName:"p"},"对该目录下所有模块")," 的引用，可以使用匹配正则表达式的请求来导入这些模块。上下文模块中存在一个映射，该映射用于将请求转换为模块 ID。"),(0,n.kt)("p",null,"示例映射:"),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-json",parentName:"pre"},(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,n.kt)("span",{className:"token property",parentName:"code"},'"./table.ejs"'),(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token number",parentName:"code"},"42"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token property",parentName:"code"},'"./table-row.ejs"'),(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token number",parentName:"code"},"43"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token property",parentName:"code"},'"./directory/another.ejs"'),(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token number",parentName:"code"},"44"),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"))),(0,n.kt)("p",null,"此上下文模块还包含一些访问此映射对象的运行时逻辑。"),(0,n.kt)("p",null,"这意味着 webpack 能够支持动态导入，但会导致所有可能用到的模块都包含在 bundle 中。"),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"requirecontext",parentName:"h2"}),"require.context",(0,n.kt)("a",{href:"#requirecontext","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"可以通过 ",(0,n.kt)("inlineCode",{parentName:"p"},"require.context()")," 函数实现自定义上下文。"),(0,n.kt)("p",null,"可以给这个函数传入三个参数：要搜索的目录、是否还搜索其子目录，匹配文件的正则表达式。"),(0,n.kt)("p",null,"webpack 会在构建中解析代码中的 ",(0,n.kt)("inlineCode",{parentName:"p"},"require.context()")," 。"),(0,n.kt)("p",null,"语法如下："),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-javascript",parentName:"pre"},"require",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"context"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n  directory",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),"useSubdirectories ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"true"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),"regExp ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token regex",parentName:"code"},"/^\\.\\/.*$/"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),"mode ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'sync'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,"示例："),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-javascript",parentName:"pre"},"require",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"context"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token string",parentName:"code"},"'./test'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"false"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,n.kt)("span",{className:"token regex",parentName:"code"},"/\\.test\\.js$/"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,n.kt)("span",{className:"token comment",parentName:"code"},"// 创建一个上下文，其中文件直接来自 test 目录，require 包含的表达式以 `.test.js` 结尾。"))),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-javascript",parentName:"pre"},"require",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"context"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token string",parentName:"code"},"'../'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"true"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,n.kt)("span",{className:"token regex",parentName:"code"},"/\\.stories\\.js$/"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,n.kt)("span",{className:"token comment",parentName:"code"},"// 创建一个上下文，其中文件来自父文件夹及其所有子级文件夹，require 包含的表达式以 `.stories.js` 结尾。"))),(0,n.kt)("aside",{className:"warning"},(0,n.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,n.kt)("p",{parentName:"aside"},"传递给 ",(0,n.kt)("inlineCode",{parentName:"p"},"require.context")," 的参数必须是字面量！")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"context-module-api",parentName:"h3"}),"上下文模块 API",(0,n.kt)("a",{href:"#context-module-api","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"上下文模块会导出一个接收一个参数 request 的 require 函数。"),(0,n.kt)("p",null,"此导出函数有三个属性：",(0,n.kt)("inlineCode",{parentName:"p"},"resolve"),"，",(0,n.kt)("inlineCode",{parentName:"p"},"keys")," 与 ",(0,n.kt)("inlineCode",{parentName:"p"},"id"),"。"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"resolve")," 是一个函数，它返回 request 被解析后得到的模块 id。"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"keys")," 也是一个函数，它返回一个数组，由所有可能被此上下文模块处理的请求组成。")),(0,n.kt)("p",null,"如果想引入一个文件夹下面的所有文件，或者引入能匹配一个正则表达式的所有文件，这个功能就会很有帮助，例如："),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,n.kt)("span",{className:"token function",parentName:"code"},"importAll"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token parameter",parentName:"code"},"r"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  r",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"keys"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"forEach"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),"r",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\n",(0,n.kt)("span",{className:"token function",parentName:"code"},"importAll"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),"require",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"context"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token string",parentName:"code"},"'../components/'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"true"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,n.kt)("span",{className:"token regex",parentName:"code"},"/\\.js$/"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"const")," cache ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,n.kt)("span",{className:"token function",parentName:"code"},"importAll"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token parameter",parentName:"code"},"r"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  r",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"keys"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"forEach"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token parameter",parentName:"code"},"key"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),"cache",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"["),"key",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token function",parentName:"code"},"r"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),"key",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\n",(0,n.kt)("span",{className:"token function",parentName:"code"},"importAll"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),"require",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"context"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token string",parentName:"code"},"'../components/'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"true"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,n.kt)("span",{className:"token regex",parentName:"code"},"/\\.js$/"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,n.kt)("span",{className:"token comment",parentName:"code"},"// 构建时所有被导入的模块都会被填充到缓存对象中。"))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"id")," 是上下文模块的模块 id. 它可能在使用 ",(0,n.kt)("inlineCode",{parentName:"li"},"module.hot.accept")," 时会用到。")))}o.isMDXComponent=!0,a.default=o}}]);