"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6231],{6231:function(e,a,t){t.r(a),t(7378);var n=t(2682);function p(){return p=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},p.apply(this,arguments)}function s(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",p({components:a},t),(0,n.kt)("p",null,"本指南包含一些改进构建/编译性能的实用技巧。"),(0,n.kt)("hr",null),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"general",parentName:"h2"}),"通用环境",(0,n.kt)("a",{href:"#general","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"无论是在 ",(0,n.kt)("a",{href:"/guides/development",parentName:"p"},"开发环境")," 还是在 ",(0,n.kt)("a",{href:"/guides/production",parentName:"p"},"生产环境")," 下运行构建脚本，以下最佳实践都会有所帮助。"),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"stay-up-to-date",parentName:"h3"}),"更新到最新版本",(0,n.kt)("a",{href:"#stay-up-to-date","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"使用最新的 webpack 版本。我们会一直坚持进行性能优化。webpack 的最新稳定版本是："),(0,n.kt)("p",null,(0,n.kt)("a",{href:"https://github.com/webpack/webpack/releases",parentName:"p"},(0,n.kt)("img",{src:"https://img.shields.io/github/package-json/v/webpack/webpack.svg?label=webpack&style=flat-square&maxAge=3600",alt:"latest webpack version",parentName:"a"}))),(0,n.kt)("p",null,"将 ",(0,n.kt)("strong",{parentName:"p"},"Node.js")," 与 package 管理工具（例如 ",(0,n.kt)("inlineCode",{parentName:"p"},"npm")," 或者 ",(0,n.kt)("inlineCode",{parentName:"p"},"yarn"),"）更新到最新版本均有助于提高性能。较新的版本能够建立更高效的模块树并提高解析速度。"),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"loaders",parentName:"h3"}),"loader",(0,n.kt)("a",{href:"#loaders","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"将 loader 应用于最少数量的必要模块。反例："),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,n.kt)("span",{className:"token comment",parentName:"code"},"//..."),"\n  module",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    rules",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"["),"\n      ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        test",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token regex",parentName:"code"},"/\\.js$/"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n        loader",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'babel-loader'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,"使用 ",(0,n.kt)("inlineCode",{parentName:"p"},"include")," 字段将 loader 应用在实际需要将其转换的模块："),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"const")," path ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token function",parentName:"code"},"require"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token string",parentName:"code"},"'path'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\nmodule",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,n.kt)("span",{className:"token comment",parentName:"code"},"//..."),"\n  module",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    rules",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"["),"\n      ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        test",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token regex",parentName:"code"},"/\\.js$/"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n        include",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," path",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"resolve"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),"__dirname",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'src'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n        loader",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'babel-loader'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"bootstrap",parentName:"h3"}),"引导（bootstrap）",(0,n.kt)("a",{href:"#bootstrap","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"每个额外的 loader/plugin 都有其启动时间。尽量少地使用工具。"),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"resolving",parentName:"h3"}),"解析",(0,n.kt)("a",{href:"#resolving","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"以下步骤可以提高解析速度："),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"减少 ",(0,n.kt)("inlineCode",{parentName:"li"},"resolve.modules"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"resolve.extensions"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"resolve.mainFiles"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"resolve.descriptionFiles")," 中条目数量，因为他们会增加文件系统调用的次数。"),(0,n.kt)("li",{parentName:"ul"},"如果不使用 symlinks（例如 ",(0,n.kt)("inlineCode",{parentName:"li"},"npm link")," 或者 ",(0,n.kt)("inlineCode",{parentName:"li"},"yarn link"),"），可以设置 ",(0,n.kt)("inlineCode",{parentName:"li"},"resolve.symlinks: false"),"。"),(0,n.kt)("li",{parentName:"ul"},"如果使用自定义解析插件规则，并且没有指定上下文，可以设置 ",(0,n.kt)("inlineCode",{parentName:"li"},"resolve.cacheWithContext: false"),"。")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"dlls",parentName:"h3"}),"dll",(0,n.kt)("a",{href:"#dlls","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"使用 ",(0,n.kt)("inlineCode",{parentName:"p"},"DllPlugin")," 为更改不频繁的代码生成单独的编译结果。尽管这增加了构建过程的复杂度，但是可以提高应用程序的编译速度。"),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"smaller--faster",parentName:"h3"}),"小即是快",(0,n.kt)("a",{href:"#smaller--faster","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"减少编译结果的整体大小以提高构建性能。尽量保持 chunk 体积小。"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"使用数量更少/体积更小的库"),(0,n.kt)("li",{parentName:"ul"},"在多页面应用程序中使用 ",(0,n.kt)("inlineCode",{parentName:"li"},"SplitChunksPlugin"),"。"),(0,n.kt)("li",{parentName:"ul"},"在多页面应用程序中使用 ",(0,n.kt)("inlineCode",{parentName:"li"},"SplitChunksPlugin"),"，并开启 ",(0,n.kt)("inlineCode",{parentName:"li"},"async")," 模式。"),(0,n.kt)("li",{parentName:"ul"},"移除未使用的代码。"),(0,n.kt)("li",{parentName:"ul"},"只编译当前正在开发的那些代码。")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"worker-pool",parentName:"h3"}),"worker 池",(0,n.kt)("a",{href:"#worker-pool","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"thread-loader")," 可以将非常消耗资源的 loader 分流给 worker 池。"),(0,n.kt)("aside",{className:"warning"},(0,n.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,n.kt)("p",{parentName:"aside"},"由于 Node.js 运行时与 loader 都有启动开销，尽量不要使用太多 worker，尝试最小化 worker 与主进程之间的模块传输。进程间通讯非常消耗资源。")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"persistent-cache",parentName:"h3"}),"持久化缓存",(0,n.kt)("a",{href:"#persistent-cache","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"在 webpack 配置中使用 ",(0,n.kt)("a",{href:"/configuration/cache",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"cache"))," 选项。使用 ",(0,n.kt)("inlineCode",{parentName:"p"},"package.json")," 中的 ",(0,n.kt)("inlineCode",{parentName:"p"},'"postinstall"')," 清除缓存目录。"),(0,n.kt)("aside",{className:"tip"},(0,n.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,n.kt)("p",{parentName:"aside"},"我们支持使用 yarn PnP v3 ",(0,n.kt)("a",{href:"https://yarnpkg.com/features/pnp",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"yarn 2 berry"))," 进行持久缓存。")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"custom-pluginsloaders",parentName:"h3"}),"自定义 plugin/loader",(0,n.kt)("a",{href:"#custom-pluginsloaders","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"请在使用自定义 plugin/loader 前对其进行概要分析以免在此处引入性能问题。"),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"progress-plugin",parentName:"h3"}),"Progress 插件",(0,n.kt)("a",{href:"#progress-plugin","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"将 ",(0,n.kt)("inlineCode",{parentName:"p"},"ProgressPlugin")," 从 webpack 中删除可以缩短构建时间。请注意，",(0,n.kt)("inlineCode",{parentName:"p"},"ProgressPlugin")," 可能不会为快速构建提供太多价值，因此请权衡利弊再使用。"),(0,n.kt)("hr",null),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"development",parentName:"h2"}),"开发环境",(0,n.kt)("a",{href:"#development","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"以下步骤在开发环境中特别有帮助。"),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"incremental-builds",parentName:"h3"}),"增量编译",(0,n.kt)("a",{href:"#incremental-builds","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"使用 webpack 的观察模式，而非使用其他工具观察文件、调用 webpack。内置的观察模式会记录时间戳并将此信息传递给编译以使缓存失效。"),(0,n.kt)("p",null,"在某些配置环境中，观察模式会回退到轮询模式。监听过量文件会导致 CPU 大量负载。此时可以使用 ",(0,n.kt)("inlineCode",{parentName:"p"},"watchOptions.poll")," 增加轮询的间隔时间。"),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"compile-in-memory",parentName:"h3"}),"在内存中编译",(0,n.kt)("a",{href:"#compile-in-memory","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"使用下面几个工具实现在内存中（而不是写入磁盘）编译并部署可访问资源以提高性能："),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"webpack-dev-server")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"webpack-hot-middleware")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"webpack-dev-middleware"))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"statstojson-speed",parentName:"h3"}),"加速 stats.toJson",(0,n.kt)("a",{href:"#statstojson-speed","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"webpack 4 默认使用 ",(0,n.kt)("inlineCode",{parentName:"p"},"stats.toJson()")," 输出大量数据。但是除非在增量步骤中做必要的统计，否则请避免获取 ",(0,n.kt)("inlineCode",{parentName:"p"},"stats")," 对象的部分内容。",(0,n.kt)("inlineCode",{parentName:"p"},"webpack-dev-server")," 在 v3.1.3 以后的版本，包含一个重要的性能修复，即最小化每个增量构建步骤中会从 ",(0,n.kt)("inlineCode",{parentName:"p"},"stats")," 对象获取的数据量。"),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"devtool",parentName:"h3"}),"devtool",(0,n.kt)("a",{href:"#devtool","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"不同的 ",(0,n.kt)("inlineCode",{parentName:"p"},"devtool")," 设置会导致性能差异。"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},'"eval"')," 具有最好的性能，但并不能帮助转译代码。"),(0,n.kt)("li",{parentName:"ul"},"如果能接受稍差一些的映射质量，可以使用 ",(0,n.kt)("inlineCode",{parentName:"li"},"cheap-source-map")," 变体配置提高性能。"),(0,n.kt)("li",{parentName:"ul"},"使用 ",(0,n.kt)("inlineCode",{parentName:"li"},"eval-source-map")," 变体配置进行增量编译。")),(0,n.kt)("aside",{className:"tip"},(0,n.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,n.kt)("p",{parentName:"aside"},"在大多数情况下，最佳选择是 ",(0,n.kt)("inlineCode",{parentName:"p"},"eval-cheap-module-source-map"),"。")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"avoid-production-specific-tooling",parentName:"h3"}),"避免使用在生产环境下才会用到的工具",(0,n.kt)("a",{href:"#avoid-production-specific-tooling","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"某些工具、插件与 loader 都只用于生产环境。例如，在开发环境下使用 ",(0,n.kt)("inlineCode",{parentName:"p"},"TerserPlugin")," 压缩和破坏代码是没有意义的。通常应该在开发环境下排除以下工具："),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"TerserPlugin")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"[fullhash]"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"[chunkhash]"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"[contenthash]")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"AggressiveSplittingPlugin")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"AggressiveMergingPlugin")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ModuleConcatenationPlugin"))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"minimal-entry-chunk",parentName:"h3"}),"最小化入口 chunk",(0,n.kt)("a",{href:"#minimal-entry-chunk","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"webpack 只会在文件系统中输出已经更新的 chunk。对于某些配置选项（HMR, ",(0,n.kt)("inlineCode",{parentName:"p"},"output.chunkFilename")," 中的 ",(0,n.kt)("inlineCode",{parentName:"p"},"[name]"),"/",(0,n.kt)("inlineCode",{parentName:"p"},"[chunkhash]/[contenthash]"),"，",(0,n.kt)("inlineCode",{parentName:"p"},"[fullhash]"),"）而言，除了已更新的 chunk 之外，入口 chunk 也会失效。"),(0,n.kt)("p",null,"尽量在生成入口 chunk 时减小其体积以提高性能。下面的配置为运行时代码创建了一个额外的 chunk，所以它的生成代价较低："),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,n.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n  optimization",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    runtimeChunk",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"true"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"avoid-extra-optimization-steps",parentName:"h3"}),"避免额外的优化步骤",(0,n.kt)("a",{href:"#avoid-extra-optimization-steps","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"webpack 通过执行额外的算法任务优化输出结果的体积和加载的性能。这些优化适用于小型代码库，但是在大型代码库中却非常耗费性能："),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,n.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n  optimization",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    removeAvailableModules",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"false"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    removeEmptyChunks",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"false"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    splitChunks",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"false"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"output-without-path-info",parentName:"h3"}),"输出结果不携带路径信息",(0,n.kt)("a",{href:"#output-without-path-info","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"webpack 会在输出的 bundle 中生成路径信息。然而，在打包数千个模块的项目中，这会带来垃圾回收性能的压力。在 ",(0,n.kt)("inlineCode",{parentName:"p"},"options.output.pathinfo")," 设置中关闭它："),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,n.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n  output",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    pathinfo",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"false"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"nodejs-versions-8910-9111",parentName:"h3"}),"Node.js 版本 8.9.10-9.11.1",(0,n.kt)("a",{href:"#nodejs-versions-8910-9111","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"Node.js v8.9.10 - v9.11.1 中的 ES2015 ",(0,n.kt)("inlineCode",{parentName:"p"},"Map")," 和 ",(0,n.kt)("inlineCode",{parentName:"p"},"Set")," 实现，存在 ",(0,n.kt)("a",{href:"https://github.com/nodejs/node/issues/19769",parentName:"p"},"性能回退"),"。webpack 大量地使用这些数据结构，因此这些回退也会影响编译时间。"),(0,n.kt)("p",null,"之前和之后的 Node.js 版本不受影响。"),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"typescript-loader",parentName:"h3"}),"TypeScript loader",(0,n.kt)("a",{href:"#typescript-loader","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"向 loader 传入 ",(0,n.kt)("inlineCode",{parentName:"p"},"transpileOnly")," 选项，以缩短使用 ",(0,n.kt)("inlineCode",{parentName:"p"},"ts-loader")," 时的构建时间。使用此选项会关闭类型检查。如果要再次开启类型检查，请使用 ",(0,n.kt)("a",{href:"https://www.npmjs.com/package/fork-ts-checker-webpack-plugin",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"ForkTsCheckerWebpackPlugin")),"。使用此插件会将检查过程移至单独的进程，这样可以加快 TypeScript 的类型检查和 ESLint 插入的速度。"),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,n.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n  test",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token regex",parentName:"code"},"/\\.tsx?$/"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  use",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"["),"\n    ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      loader",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'ts-loader'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      options",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        transpileOnly",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"true"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("aside",{className:"tip"},(0,n.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,n.kt)("p",{parentName:"aside"},"这是一个关于 ",(0,n.kt)("inlineCode",{parentName:"p"},"ts-loader")," ",(0,n.kt)("a",{href:"https://github.com/TypeStrong/ts-loader/tree/master/examples/fork-ts-checker-webpack-plugin",parentName:"p"},"完整示例")," 的 GitHub 仓库。")),(0,n.kt)("hr",null),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"production",parentName:"h2"}),"生产环境",(0,n.kt)("a",{href:"#production","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"以下步骤在生产环境中特别有帮助。"),(0,n.kt)("aside",{className:"warning"},(0,n.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,n.kt)("p",{parentName:"aside"},(0,n.kt)("strong",{parentName:"p"},"不要为了很小的性能收益，牺牲应用程序的质量"),"！注意，在大多数情况下，优化代码质量比构建性能更重要。")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"source-maps",parentName:"h3"}),"source map",(0,n.kt)("a",{href:"#source-maps","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"source map 相当消耗资源，请确保真的需要它们。"),(0,n.kt)("hr",null),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"specific-tooling-issues",parentName:"h2"}),"工具相关问题",(0,n.kt)("a",{href:"#specific-tooling-issues","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"下列工具存在某些可能会降低构建性能的问题："),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"babel",parentName:"h3"}),"babel",(0,n.kt)("a",{href:"#babel","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"最小化项目中的 preset/plugin 数量。")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"typescript",parentName:"h3"}),"TypeScript",(0,n.kt)("a",{href:"#typescript","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"在单独的进程中使用 ",(0,n.kt)("inlineCode",{parentName:"li"},"fork-ts-checker-webpack-plugin")," 进行类型检查。"),(0,n.kt)("li",{parentName:"ul"},"配置 loader 跳过类型检查。"),(0,n.kt)("li",{parentName:"ul"},"使用 ",(0,n.kt)("inlineCode",{parentName:"li"},"ts-loader")," 时，设置 ",(0,n.kt)("inlineCode",{parentName:"li"},"happyPackMode: true")," 或 ",(0,n.kt)("inlineCode",{parentName:"li"},"transpileOnly: true"),"。")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"sass",parentName:"h3"}),"sass",(0,n.kt)("a",{href:"#sass","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"node-sass")," 中存在 bug，会阻塞 Node.js 线程池中的线程。当使用 ",(0,n.kt)("inlineCode",{parentName:"li"},"thread-loader")," 时，需要设置 ",(0,n.kt)("inlineCode",{parentName:"li"},"workerParallelJobs: 2"),"。")))}s.isMDXComponent=!0,a.default=s}}]);