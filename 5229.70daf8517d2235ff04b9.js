"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5229],{5229:function(e,a,n){n.r(a),n(7378);var t=n(2682);function p(){return p=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},p.apply(this,arguments)}function s(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",p({components:a},n),(0,t.kt)("p",null,"本章节涵盖了使用 webpack 编译代码的所有方法。在 webpack 打包应用程序时，你可以选择各种模块语法风格，包括 ",(0,t.kt)("a",{href:"https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015",parentName:"p"},"ES6"),"，",(0,t.kt)("a",{href:"https://en.wikipedia.org/wiki/CommonJS",parentName:"p"},"CommonJS")," 和 ",(0,t.kt)("a",{href:"https://en.wikipedia.org/wiki/Asynchronous_module_definition",parentName:"p"},"AMD"),"。"),(0,t.kt)("p",null,"尽管 webpack 支持多种模块语法，但我们还是建议尽量使用一致的语法，以此避免一些奇怪的行为和 bug。事实上，当距离最近的 ",(0,t.kt)("inlineCode",{parentName:"p"},"package.json")," 文件中包含值为 ",(0,t.kt)("inlineCode",{parentName:"p"},'"module"')," 或 ",(0,t.kt)("inlineCode",{parentName:"p"},'"commonjs"')," 的 ",(0,t.kt)("inlineCode",{parentName:"p"},'"type"')," 字段时，webpack 会启用语法一致性检查。请大家在阅读前，注意此情况："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"在 ",(0,t.kt)("inlineCode",{parentName:"li"},"package.json")," 中为 ",(0,t.kt)("inlineCode",{parentName:"li"},".mjs")," 或 ",(0,t.kt)("inlineCode",{parentName:"li"},".js")," 设置 ",(0,t.kt)("inlineCode",{parentName:"li"},'"type": "module"'),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"不允许使用 CommonJS，例如，你不能使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"require"),"，",(0,t.kt)("inlineCode",{parentName:"li"},"module.exports")," 或 ",(0,t.kt)("inlineCode",{parentName:"li"},"exports")),(0,t.kt)("li",{parentName:"ul"},"当引入文件时，强制编写扩展名，例如，你应使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"import './src/App.mjs'"),"，而非 ",(0,t.kt)("inlineCode",{parentName:"li"},"import './src/App'"),"（你可以通过设置 ",(0,t.kt)("a",{href:"/configuration/module/#resolve-fully-specified",parentName:"li"},(0,t.kt)("inlineCode",{parentName:"a"},"Rule.resolve.fullySpecified"))," 来禁用此规则)"))),(0,t.kt)("li",{parentName:"ul"},"在 ",(0,t.kt)("inlineCode",{parentName:"li"},"package.json")," 中为 ",(0,t.kt)("inlineCode",{parentName:"li"},".cjs")," 或 ",(0,t.kt)("inlineCode",{parentName:"li"},".js")," 设置 ",(0,t.kt)("inlineCode",{parentName:"li"},'"type": "commonjs"'),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"import")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"export")," 均不可用"))),(0,t.kt)("li",{parentName:"ul"},"在 ",(0,t.kt)("inlineCode",{parentName:"li"},"package.json")," 中为 ",(0,t.kt)("inlineCode",{parentName:"li"},".wasm")," 设置 ",(0,t.kt)("inlineCode",{parentName:"li"},'"type": "module"'),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"引入 wasm 文件时，必须编写文件扩展名")))),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"es6-recommended",parentName:"h2"}),"ES6 (推荐)",(0,t.kt)("a",{href:"#es6-recommended","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"webpack 2 支持原生的 ES6 模块语法，意味着你无须额外引入 babel 这样的工具，就可以使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"import")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"export"),"。但是注意，如果使用其他的 ES6+ 特性，仍然需要引入 babel。webpack 支持以下的方法："),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"import",parentName:"h3"}),"import",(0,t.kt)("a",{href:"#import","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"通过 ",(0,t.kt)("inlineCode",{parentName:"p"},"import")," 以静态的方式导入另一个通过 ",(0,t.kt)("inlineCode",{parentName:"p"},"export")," 导出的模块。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," MyModule ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./my-module.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," NamedExport ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./other-module.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,t.kt)("p",{parentName:"aside"},"这里的关键词是",(0,t.kt)("strong",{parentName:"p"},"静态的"),"。标准的 ",(0,t.kt)("inlineCode",{parentName:"p"},"import")," 语句中，模块语句中不能以「具有逻辑或含有变量」的动态方式去引入其他模块。关于 import 的更多信息和 ",(0,t.kt)("inlineCode",{parentName:"p"},"import()")," 动态用法，请查看这里的",(0,t.kt)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import",parentName:"p"},"说明"),"。")),(0,t.kt)("p",null,"你也通过 ",(0,t.kt)("inlineCode",{parentName:"p"},"import")," 来引入 Data URI："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'data:text/javascript;charset=utf-8;base64,Y29uc29sZS5sb2coJ2lubGluZSAxJyk7'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  number",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  fn",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'data:text/javascript;charset=utf-8;base64,ZXhwb3J0IGNvbnN0IG51bWJlciA9IDQyOwpleHBvcnQgY29uc3QgZm4gPSAoKSA9PiAiSGVsbG8gd29ybGQiOw=='"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"export",parentName:"h3"}),"export",(0,t.kt)("a",{href:"#export","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"默认"),"导出整个模块或具名导出模块。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 具名导出"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," Count ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token number",parentName:"code"},"5"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"Multiply"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"a",(0,t.kt)("span",{className:"token punctuation",parentName:"span"},",")," b"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return")," a ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"*")," b",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\n",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 默认导出"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"default")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// Some data..."),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"import",parentName:"h3"}),"import()",(0,t.kt)("a",{href:"#import","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"function(string path):Promise")),(0,t.kt)("p",null,"动态的加载模块。调用 ",(0,t.kt)("inlineCode",{parentName:"p"},"import")," 的之处，被视为分割点，意思是，被请求的模块和它引用的所有子模块，会分割到一个单独的 chunk 中。"),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},(0,t.kt)("a",{href:"https://whatwg.github.io/loader/",parentName:"p"},"ES2015 Loader 规范")," 定义了 ",(0,t.kt)("inlineCode",{parentName:"p"},"import()")," 方法，可以在运行时动态地加载 ES2015 模块。")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"if")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"hot",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'lodash'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"then"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"_"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// Do something with lodash (a.k.a '_')..."),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"))),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,t.kt)("p",{parentName:"aside"},"import() 特性依赖于内置的 ",(0,t.kt)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"Promise")),"。如果想在低版本浏览器中使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"import()"),"，记得使用像 ",(0,t.kt)("a",{href:"https://github.com/stefanpenner/es6-promise",parentName:"p"},"es6-promise")," 或者 ",(0,t.kt)("a",{href:"https://github.com/taylorhakes/promise-polyfill",parentName:"p"},"promise-polyfill")," 这样 polyfill 库，来预先填充(shim) ",(0,t.kt)("inlineCode",{parentName:"p"},"Promise")," 环境。")),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"dynamic-expressions-in-import",parentName:"h3"}),"import() 中的表达式",(0,t.kt)("a",{href:"#dynamic-expressions-in-import","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"不能使用完全动态的 import 语句，例如 ",(0,t.kt)("inlineCode",{parentName:"p"},"import(foo)"),"。是因为 ",(0,t.kt)("inlineCode",{parentName:"p"},"foo")," 可能是系统或项目中任何文件的任何路径。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"import()")," 必须至少包含一些关于模块的路径信息。打包可以限定于一个特定的目录或文件集，以便于在使用动态表达式时 - 包括可能在 ",(0,t.kt)("inlineCode",{parentName:"p"},"import()")," 调用中请求的每个模块。例如， ",(0,t.kt)("inlineCode",{parentName:"p"},"import(`./locale/${language}.json`)")," 会把 ",(0,t.kt)("inlineCode",{parentName:"p"},".locale")," 目录中的每个 ",(0,t.kt)("inlineCode",{parentName:"p"},".json")," 文件打包到新的 chunk 中。在运行时，计算完变量 ",(0,t.kt)("inlineCode",{parentName:"p"},"language")," 后，就可以使用像 ",(0,t.kt)("inlineCode",{parentName:"p"},"english.json")," 或 ",(0,t.kt)("inlineCode",{parentName:"p"},"german.json")," 的任何文件。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 想象我们有一个从 cookies 或其他存储中获取语言的方法"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," language ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"detectVisitorLanguage"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token template-string",parentName:"code"},(0,t.kt)("span",{className:"token template-punctuation string",parentName:"span"},"`"),(0,t.kt)("span",{className:"token string",parentName:"span"},"./locale/"),(0,t.kt)("span",{className:"token interpolation",parentName:"span"},(0,t.kt)("span",{className:"token interpolation-punctuation punctuation",parentName:"span"},"${"),"language",(0,t.kt)("span",{className:"token interpolation-punctuation punctuation",parentName:"span"},"}")),(0,t.kt)("span",{className:"token string",parentName:"span"},".json"),(0,t.kt)("span",{className:"token template-punctuation string",parentName:"span"},"`")),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"then"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"module"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// do something with the translations"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},"使用 ",(0,t.kt)("a",{href:"/api/module-methods/#magic-comments",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"webpackInclude")," and ",(0,t.kt)("inlineCode",{parentName:"a"},"webpackExclude"))," 选项可让你添加正则表达式模式，以减少 webpack 打包导入的文件数量。")),(0,t.kt)("h4",null,(0,t.kt)("span",{id:"magic-comments",parentName:"h4"}),"Magic Comments",(0,t.kt)("a",{href:"#magic-comments","aria-hidden":"true",tabIndex:"-1",parentName:"h4"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"内联注释使这一特性得以实现。通过在 import 中添加注释，我们可以进行诸如给 chunk 命名或选择不同模式的操作。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 单个目标"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},'/* webpackChunkName: "my-chunk-name" */'),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},'/* webpackMode: "lazy" */'),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},'/* webpackExports: ["default", "named"] */'),"\n  ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'module'"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 多个可能的目标"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* webpackInclude: /\\.json$/ */"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* webpackExclude: /\\.noimport\\.json$/ */"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},'/* webpackChunkName: "my-chunk-name" */'),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},'/* webpackMode: "lazy" */'),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* webpackPrefetch: true */"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* webpackPreload: true */"),"\n  ",(0,t.kt)("span",{className:"token template-string",parentName:"code"},(0,t.kt)("span",{className:"token template-punctuation string",parentName:"span"},"`"),(0,t.kt)("span",{className:"token string",parentName:"span"},"./locale/"),(0,t.kt)("span",{className:"token interpolation",parentName:"span"},(0,t.kt)("span",{className:"token interpolation-punctuation punctuation",parentName:"span"},"${"),"language",(0,t.kt)("span",{className:"token interpolation-punctuation punctuation",parentName:"span"},"}")),(0,t.kt)("span",{className:"token template-punctuation string",parentName:"span"},"`")),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* webpackIgnore: true */")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'ignored-module.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"webpackIgnore"),"：设置为 true 时，禁用动态导入解析。"),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,t.kt)("p",{parentName:"aside"},"注意：将 ",(0,t.kt)("inlineCode",{parentName:"p"},"webpackIgnore")," 设置为 ",(0,t.kt)("inlineCode",{parentName:"p"},"true")," 则不进行代码分离。")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"webpackChunkName"),": 新 chunk 的名称。 从 webpack 2.6.0 开始，占位符 ",(0,t.kt)("inlineCode",{parentName:"p"},"[index]")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"[request]")," 分别支持递增的数字或实际的解析文件名。 添加此注释后，将单独的给我们的 chunk 命名为 [my-chunk-name].js 而不是 [id].js。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"webpackMode"),"：从 webpack 2.6.0 开始，可以指定以不同的模式解析动态导入。支持以下选项："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"'lazy'")," (默认值)：为每个 ",(0,t.kt)("inlineCode",{parentName:"li"},"import()")," 导入的模块生成一个可延迟加载（lazy-loadable）的 chunk。"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"'lazy-once'"),"：生成一个可以满足所有 ",(0,t.kt)("inlineCode",{parentName:"li"},"import()")," 调用的单个可延迟加载（lazy-loadable）的 chunk。此 chunk 将在第一次 ",(0,t.kt)("inlineCode",{parentName:"li"},"import()")," 时调用时获取，随后的 ",(0,t.kt)("inlineCode",{parentName:"li"},"import()")," 则使用相同的网络响应。注意，这种模式仅在部分动态语句中有意义，例如 ",(0,t.kt)("inlineCode",{parentName:"li"},"import(`./locales/${language}.json`)"),"，其中可能含有多个被请求的模块路径。"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"'eager'"),"：不会生成额外的 chunk。所有的模块都被当前的 chunk 引入，并且没有额外的网络请求。但是仍会返回一个 resolved 状态的 ",(0,t.kt)("inlineCode",{parentName:"li"},"Promise"),"。与静态导入相比，在调用 ",(0,t.kt)("inlineCode",{parentName:"li"},"import()")," 完成之前，该模块不会被执行。"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"'weak'"),"：尝试加载模块，如果该模块函数已经以其他方式加载，（即另一个 chunk 导入过此模块，或包含模块的脚本被加载）。仍会返回 ",(0,t.kt)("inlineCode",{parentName:"li"},"Promise"),"， 但是只有在客户端上已经有该 chunk 时才会成功解析。如果该模块不可用，则返回 rejected 状态的 ",(0,t.kt)("inlineCode",{parentName:"li"},"Promise"),"，且网络请求永远都不会执行。当需要的 chunks 始终在（嵌入在页面中的）初始请求中手动提供，而不是在应用程序导航在最初没有提供的模块导入的情况下触发，这对于通用渲染（SSR）是非常有用的。")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"webpackPrefetch"),"：告诉浏览器将来可能需要该资源来进行某些导航跳转。查看指南，了解有关更多信息 ",(0,t.kt)("a",{href:"/guides/code-splitting/#prefetchingpreloading-modules",parentName:"p"},"how webpackPrefetch works"),"。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"webpackPreload"),"：告诉浏览器在当前导航期间可能需要该资源。 查阅指南，了解有关的更多信息 ",(0,t.kt)("a",{href:"/guides/code-splitting/#prefetchingpreloading-modules",parentName:"p"},"how webpackPreload works"),"。"),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},"注意：所有选项都可以像这样组合 ",(0,t.kt)("inlineCode",{parentName:"p"},'/* webpackMode: "lazy-once", webpackChunkName: "all-i18n-data" */'),"。这会按没有花括号的 JSON5 对象去解析。它会被包裹在 JavaScript 对象中，并使用 ",(0,t.kt)("a",{href:"https://nodejs.org/dist/latest-v8.x/docs/api/vm.html",parentName:"p"},"node VM")," 执行。所以你不需要添加花括号。")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"webpackInclude"),"：在导入解析（import resolution）过程中，用于匹配的正则表达式。只有匹配到的模块",(0,t.kt)("strong",{parentName:"p"},"才会被打包"),"。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"webpackExclude"),"：在导入解析（import resolution）过程中，用于匹配的正则表达式。所有匹配到的模块",(0,t.kt)("strong",{parentName:"p"},"都不会被打包"),"。"),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},"注意，",(0,t.kt)("inlineCode",{parentName:"p"},"webpackInclude")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"webpackExclude")," 不会影响到前缀，例如 ",(0,t.kt)("inlineCode",{parentName:"p"},"./locale"),"。")),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"webpackExports"),": 告知 webpack 只构建指定出口的动态 ",(0,t.kt)("inlineCode",{parentName:"p"},"import()")," 模块。它可以减小 chunk 的大小。从 ",(0,t.kt)("a",{href:"https://github.com/webpack/webpack/releases/tag/v5.0.0-beta.18",parentName:"p"},"webpack 5.0.0-beta.18")," 起可用。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"commonjs",parentName:"h2"}),"CommonJS",(0,t.kt)("a",{href:"#commonjs","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"CommonJS 的目标是为浏览器之外的 JavaScript 指定一个生态系统。webpack 支持以下 CommonJS 的方法："),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"require",parentName:"h3"}),(0,t.kt)("inlineCode",{parentName:"h3"},"require"),(0,t.kt)("a",{href:"#require","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-typescript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"dependency",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," String",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"以同步的方式检索其他模块的导出。编译器（compiler）会确保依赖项在输出 bundle 中可用。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," $ ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'jquery'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," myModule ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'my-module'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"也可以为 ",(0,t.kt)("inlineCode",{parentName:"p"},"require")," 启用魔法注释，请参阅 ",(0,t.kt)("a",{href:"/configuration/module/#moduleparserjavascriptcommonjsmagiccomments",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"module.parser.javascript.commonjsMagicComments"))," 了解更多。"),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,t.kt)("p",{parentName:"aside"},"以异步的方式使用，可能不会达到预期效果。")),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"requireresolve",parentName:"h3"}),"require.resolve",(0,t.kt)("a",{href:"#requireresolve","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-typescript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"resolve"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"dependency",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," String",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"以同步的方式获取模块的 ID。编译器（compiler）会确保依赖项在最终输出 bundle 中可用。建议将其视为不透明值，只能与 ",(0,t.kt)("inlineCode",{parentName:"p"},"require.cache[id]")," 或 ",(0,t.kt)("inlineCode",{parentName:"p"},"__webpack_require__(id)")," 配合使用（最好避免这种用法）。"),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,t.kt)("p",{parentName:"aside"},"模块 ID 的类型可以是 ",(0,t.kt)("inlineCode",{parentName:"p"},"number")," 或 ",(0,t.kt)("inlineCode",{parentName:"p"},"string"),"，具体取决于 ",(0,t.kt)("a",{href:"/configuration/optimization/#optimizationmoduleids",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"optimization.moduleIds"))," 配置。")),(0,t.kt)("p",null,"有关更多模块的信息，详见 ",(0,t.kt)("a",{href:"/api/module-variables/#moduleid-commonjs",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"module.id")),"。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"requirecache",parentName:"h3"}),"require.cache",(0,t.kt)("a",{href:"#requirecache","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"多处引用同一模块，最终只会产生一次模块执行和一次导出。所以，会在运行时（runtime）中会保存一份缓存。删除此缓存，则会产生新的模块执行和新的导出。"),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,t.kt)("p",{parentName:"aside"},"仅在极少数情况下才需要考虑兼容性！")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," d1 ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'dependency'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token function",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'dependency'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"===")," d1",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"delete")," require",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"cache",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"require",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"resolve"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'dependency'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token function",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'dependency'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"!==")," d1",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token comment",parentName:"code"},"// in file.js"),"\nrequire",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"cache",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"id",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"===")," module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token function",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'./file.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"===")," module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"delete")," require",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"cache",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"id",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\nrequire",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"cache",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"id",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"===")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"undefined"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token function",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'./file.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"!==")," module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";")," ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 理论上是不相等的；实际运行中，则会导致堆栈溢出"),"\nrequire",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"cache",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"id",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"!==")," module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"requireensure",parentName:"h3"}),"require.ensure",(0,t.kt)("a",{href:"#requireensure","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,t.kt)("p",{parentName:"aside"},(0,t.kt)("inlineCode",{parentName:"p"},"require.ensure()")," 是 webpack 特有的，已被 ",(0,t.kt)("inlineCode",{parentName:"p"},"import()")," 取代。")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-ts",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"ensure"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n  dependencies",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," String",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token function-variable function",parentName:"code"},"callback"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token keyword",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token function-variable function",parentName:"code"},"errorCallback"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"error",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  chunkName",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," String\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"))),(0,t.kt)("p",null,"给定 ",(0,t.kt)("inlineCode",{parentName:"p"},"dependencies")," 参数，将其对应的文件拆分到一个单独的 bundle 中，此 bundle 会被异步加载。当使用 CommonJS 模块语法时，这是动态加载依赖项的唯一方法。这意味着，可以在模块执行时才允许代码，只有在满足特定条件时才会加载 ",(0,t.kt)("inlineCode",{parentName:"p"},"dependencies"),"。"),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,t.kt)("p",{parentName:"aside"},"这个特性依赖内置的 ",(0,t.kt)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"Promise")),"。如果你在低版本浏览器中使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"require.ensure"),"，记得使用像 ",(0,t.kt)("a",{href:"https://github.com/stefanpenner/es6-promise",parentName:"p"},"es6-promise")," 或 ",(0,t.kt)("a",{href:"https://github.com/taylorhakes/promise-polyfill",parentName:"p"},"promise-polyfill")," 这样的 polyfill 库，预先填充（shim）",(0,t.kt)("inlineCode",{parentName:"p"},"Promise")," 环境。")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," a ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'normal-dep'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"if")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"hot",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  require",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"ensure"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token string",parentName:"code"},"'b'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," c ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'c'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// Do something special..."),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"))),(0,t.kt)("p",null,"按照上面指定的顺序，",(0,t.kt)("inlineCode",{parentName:"p"},"require.ensure")," 支持以下参数："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"dependencies"),"：字符串数组，声明 ",(0,t.kt)("inlineCode",{parentName:"li"},"callback")," 回调函数中所需要的所有模块。"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"callback"),"：当依赖项加载完成后，webpack 将会执行此函数，",(0,t.kt)("inlineCode",{parentName:"li"},"require")," 函数的实现，作为参数传入此函数中。当程序运行需要依赖时，可以使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"require()")," 来加载依赖。函数体可以使用此参数，来进一步执行 ",(0,t.kt)("inlineCode",{parentName:"li"},"require()")," 模块。"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"errorCallback"),"：当 webpack 加载依赖失败时会执行此函数。"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"chunkName"),"：由 ",(0,t.kt)("inlineCode",{parentName:"li"},"require.ensure")," 创建的 chunk 的名称。通过将相同 ",(0,t.kt)("inlineCode",{parentName:"li"},"chunkName")," 传递给不同的 ",(0,t.kt)("inlineCode",{parentName:"li"},"require.ensure")," 调用，我们可以将其代码合并到一个单独的 chunk 中，从而只产生一个浏览器必须加载的 bundle。")),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,t.kt)("p",{parentName:"aside"},"虽然将 ",(0,t.kt)("inlineCode",{parentName:"p"},"require")," 的实现作为参数（可以使用任意名称）传递给 ",(0,t.kt)("inlineCode",{parentName:"p"},"callback")," 函数，例如，",(0,t.kt)("inlineCode",{parentName:"p"},"require.ensure([], function(request) { request('someModule'); })")," 则不能被 webpack 静态解析器处理，因此还是使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"require")," 作为参数名，例如，",(0,t.kt)("inlineCode",{parentName:"p"},"require.ensure([], function(require) { require('someModule') })"),"。")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"amd",parentName:"h2"}),"AMD",(0,t.kt)("a",{href:"#amd","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"AMD（Asynchronous Module Definition）是一种定义了用于编写和加载模块接口的 JavaScript 规范。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"define-with-factory",parentName:"h3"}),"define (with factory)",(0,t.kt)("a",{href:"#define-with-factory","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-ts",parentName:"pre"},(0,t.kt)("span",{className:"token function",parentName:"code"},"define"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"name",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," String",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"dependencies",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," String",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token function-variable function",parentName:"code"},"factoryMethod"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token operator",parentName:"code"},"..."),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"))),(0,t.kt)("p",null,"如果提供了 ",(0,t.kt)("inlineCode",{parentName:"p"},"dependencies")," 参数，就会调用 ",(0,t.kt)("inlineCode",{parentName:"p"},"factoryMethod")," 方法，并（以相同的顺序）导出每个依赖项。如果未提供 ",(0,t.kt)("inlineCode",{parentName:"p"},"dependencies")," 参数，调用 ",(0,t.kt)("inlineCode",{parentName:"p"},"factoryMethod")," 方法时会传入 ",(0,t.kt)("inlineCode",{parentName:"p"},"require")," , ",(0,t.kt)("inlineCode",{parentName:"p"},"exports")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"module"),"（用于兼容！）。如果此方法返回一个值，则返回值会作为此模块的导出。由编译器（compiler）来确保依赖项在最终输出的 bundle 中可用。"),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,t.kt)("p",{parentName:"aside"},"注意：webpack 会忽略 ",(0,t.kt)("inlineCode",{parentName:"p"},"name")," 参数。")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token function",parentName:"code"},"define"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token string",parentName:"code"},"'jquery'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'my-module'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"$",(0,t.kt)("span",{className:"token punctuation",parentName:"span"},",")," myModule"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 使用 $ 和 myModule 做一些操作..."),"\n\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 导出一个函数"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"doSomething"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,t.kt)("p",{parentName:"aside"},"上面的写法不能在异步函数中使用。")),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"define-with-value",parentName:"h3"}),"define (with value)",(0,t.kt)("a",{href:"#define-with-value","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-ts",parentName:"pre"},(0,t.kt)("span",{className:"token function",parentName:"code"},"define"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"value",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"!"),(0,t.kt)("span",{className:"token builtin",parentName:"code"},"Function"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"))),(0,t.kt)("p",null,"这种方式只将提供的 ",(0,t.kt)("inlineCode",{parentName:"p"},"value")," 导出。这里的 ",(0,t.kt)("inlineCode",{parentName:"p"},"value")," 可以是除函数以外的任何值。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token function",parentName:"code"},"define"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  answer",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token number",parentName:"code"},"42"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,t.kt)("p",{parentName:"aside"},"上面的写法不能在异步函数中使用。")),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"require-amd-version",parentName:"h3"}),"require (amd-version)",(0,t.kt)("a",{href:"#require-amd-version","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-ts",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"dependencies",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," String",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token function-variable function",parentName:"code"},"callback"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token operator",parentName:"code"},"..."),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"))),(0,t.kt)("p",null,"与 ",(0,t.kt)("inlineCode",{parentName:"p"},"require.ensure")," 类似，给定 ",(0,t.kt)("inlineCode",{parentName:"p"},"dependencies")," 参数，将其对应的文件拆分到一个单独的 bundle 中，此 bundle 会被异步加载。然后会调用 ",(0,t.kt)("inlineCode",{parentName:"p"},"callback")," 回调函数，并传入 ",(0,t.kt)("inlineCode",{parentName:"p"},"dependencies")," 数组中的每个项导出。"),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,t.kt)("p",{parentName:"aside"},"这个特性依赖内置的 ",(0,t.kt)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"Promise")),"。如果你在低版本浏览器中使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"require.ensure"),"，记得使用像 ",(0,t.kt)("a",{href:"https://github.com/stefanpenner/es6-promise",parentName:"p"},"es6-promise")," 或 ",(0,t.kt)("a",{href:"https://github.com/taylorhakes/promise-polyfill",parentName:"p"},"promise-polyfill")," 这样的 polyfill 库，预先填充（shim）",(0,t.kt)("inlineCode",{parentName:"p"},"Promise")," 环境。")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token function",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token string",parentName:"code"},"'b'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"b"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," c ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'c'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,t.kt)("p",{parentName:"aside"},"这里没有提供命名 bundle 名称的选项。")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"labeled-modules",parentName:"h2"}),"标签模块(Labeled Modules)",(0,t.kt)("a",{href:"#labeled-modules","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"webpack 内置的 ",(0,t.kt)("inlineCode",{parentName:"p"},"LabeledModulesPlugin")," 插件，允许你使用下面的方法导出和导入模块："),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"export-label",parentName:"h3"}),"export label",(0,t.kt)("a",{href:"#export-label","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"导出给定的 ",(0,t.kt)("inlineCode",{parentName:"p"},"value"),"。标签可以出现在函数声明或变量声明之前。函数名或变量名是导出值的标识符。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-ts",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," answer ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token number",parentName:"code"},"42"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token function-variable function",parentName:"code"},"export"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"method"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"value",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// Do something..."),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("aside",{className:"warning"},(0,t.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,t.kt)("p",{parentName:"aside"},"在异步函数中使用，可能不会达到预期的效果。")),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"require-label",parentName:"h3"}),"require label",(0,t.kt)("a",{href:"#require-label","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"在当前作用域下，依赖项的所有导出均可用。",(0,t.kt)("inlineCode",{parentName:"p"},"require")," 标签可以放置在一个字符串之前。依赖模块必须使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"export")," 标签导出值。CommonJS 或 AMD 模块无法通过这种方式使用。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"some-dependency.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-ts",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," answer ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token number",parentName:"code"},"42"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token function-variable function",parentName:"code"},"export"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"method"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"value",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// Do something..."),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-ts",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"require"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'some-dependency'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token builtin",parentName:"code"},"console"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"log"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"answer",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token function",parentName:"code"},"method"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token operator",parentName:"code"},"..."),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"webpack",parentName:"h2"}),"Webpack",(0,t.kt)("a",{href:"#webpack","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"除了上述模块语法之外，还允许使用一些 webpack 特定的方法："),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"requirecontext",parentName:"h3"}),"require.context",(0,t.kt)("a",{href:"#requirecontext","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-ts",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"context"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"directory",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," String",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"includeSubdirs",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," Boolean",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* 可选的，默认值是 true */"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"filter",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," RegExp",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* 可选的，默认值是 /^\\.\\/.*$/，所有文件 */"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"mode",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," String",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* 可选的， 'sync' | 'eager' | 'weak' | 'lazy' | 'lazy-once'，默认值是 'sync' */"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"))),(0,t.kt)("p",null,"指定一系列依赖项，通过使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"directory")," 的路径，以及 ",(0,t.kt)("inlineCode",{parentName:"p"},"includeSubdirs")," ，",(0,t.kt)("inlineCode",{parentName:"p"},"filter")," 选项，进行更细粒度的模块引入，使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"mode")," 定义加载方式。以此可以很容易的解析模块："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," context ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," require",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"context"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'components'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token boolean",parentName:"code"},"true"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token regex",parentName:"code"},"/\\.html$/"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," componentA ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," context",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"resolve"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'componentA'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"如果 ",(0,t.kt)("inlineCode",{parentName:"p"},"mode")," 设置为 ",(0,t.kt)("inlineCode",{parentName:"p"},"lazy"),"，基础模块将以异步方式加载："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," context ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," require",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"context"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'locales'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token boolean",parentName:"code"},"true"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token regex",parentName:"code"},"/\\.json$/"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'lazy'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token function",parentName:"code"},"context"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'localeA'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"then"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"locale"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// do something with locale"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"mode")," 的可用模式及说明的完整列表在 ",(0,t.kt)("a",{href:"#import",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"import()"))," 文档中进行了描述。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"requireinclude",parentName:"h3"}),"require.include",(0,t.kt)("a",{href:"#requireinclude","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-ts",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"include"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"dependency",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," String",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"引入一个不需要执行的 ",(0,t.kt)("inlineCode",{parentName:"p"},"dependency"),"，这样可以用于优化输出 chunk 中依赖模块的位置。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},"require",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"include"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'a'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\nrequire",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"ensure"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token string",parentName:"code"},"'a'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'b'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* ... */"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\nrequire",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"ensure"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token string",parentName:"code"},"'a'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'c'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* ... */"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"这会产生以下输出："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"entry chunk: ",(0,t.kt)("inlineCode",{parentName:"li"},"file.js")," and ",(0,t.kt)("inlineCode",{parentName:"li"},"a")),(0,t.kt)("li",{parentName:"ul"},"anonymous chunk: ",(0,t.kt)("inlineCode",{parentName:"li"},"b")),(0,t.kt)("li",{parentName:"ul"},"anonymous chunk: ",(0,t.kt)("inlineCode",{parentName:"li"},"c"))),(0,t.kt)("p",null,"不使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"require.include('a')"),"，输出的两个匿名 chunk 都会有模块 a。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"requireresolveweak",parentName:"h3"}),"require.resolveWeak",(0,t.kt)("a",{href:"#requireresolveweak","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"与 ",(0,t.kt)("inlineCode",{parentName:"p"},"require.resolve")," 类似，但是不会把 ",(0,t.kt)("inlineCode",{parentName:"p"},"module")," 引入到 bundle 中。这就是所谓的“弱（weak）”依赖。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"if")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"__webpack_modules__",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"require",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"resolveWeak"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'module'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 当模块可用时，执行一些操作……"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"if")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"require",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"cache",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"require",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"resolveWeak"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'module'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 在模块加载完成之前，执行一些操作……"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\n",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 你可以像执行其他 require/import 方法一样，"),"\n",(0,t.kt)("span",{className:"token comment",parentName:"code"},'// 执行动态解析上下文 resolves ("context")。'),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," page ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'Foo'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n__webpack_modules__",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"require",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"resolveWeak"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token template-string",parentName:"code"},(0,t.kt)("span",{className:"token template-punctuation string",parentName:"span"},"`"),(0,t.kt)("span",{className:"token string",parentName:"span"},"./page/"),(0,t.kt)("span",{className:"token interpolation",parentName:"span"},(0,t.kt)("span",{className:"token interpolation-punctuation punctuation",parentName:"span"},"${"),"page",(0,t.kt)("span",{className:"token interpolation-punctuation punctuation",parentName:"span"},"}")),(0,t.kt)("span",{className:"token template-punctuation string",parentName:"span"},"`")),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},(0,t.kt)("inlineCode",{parentName:"p"},"require.resolveWeak")," 是",(0,t.kt)("em",{parentName:"p"},"通用渲染"),"（服务器端渲染 SSR + 代码分离 Code Splitting）的基础。例如在 ",(0,t.kt)("a",{href:"https://github.com/faceyspacey/react-universal-component",parentName:"p"},"react-universal-component")," 等包中的用法。它允许代码在服务器端和客户端初始页面的加载上同步渲染。它要求手动或以某种方式提供 chunk。它可以在不需要指示应该被打包的情况下引入模块。它与 ",(0,t.kt)("inlineCode",{parentName:"p"},"import()")," 一起使用，当用户导航触发额外的导入时，它会被接管。")),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"warning",parentName:"h3"}),"warning",(0,t.kt)("a",{href:"#warning","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"如果模块源码包含无法静态分析的 require，则会发出关键依赖项警告。"),(0,t.kt)("p",null,"示例代码："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token function",parentName:"code"},"someFn"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"require",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token function",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"bind"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token keyword",parentName:"code"},"null"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token function",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"variable",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))))}s.isMDXComponent=!0,a.default=s}}]);