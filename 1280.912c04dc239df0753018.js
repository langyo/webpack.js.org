"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1280],{1280:function(e,a,n){n.r(a),n(7378);var t=n(2682);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},l.apply(this,arguments)}function r(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",l({components:a},n),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"Compiler")," 使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"NormalModuleFactory")," 模块生成各类模块。从入口点开始，此模块会分解每个请求，解析文件内容以查找进一步的请求，然后通过分解所有请求以及解析新的文件来爬取全部文件。在最后阶段，每个依赖项都会成为一个模块实例。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"NormalModuleFactory")," 类扩展了 ",(0,t.kt)("inlineCode",{parentName:"p"},"Tapable")," 并提供了以下的生命周期钩子。\n你可以像使用编译器钩子一样使用它们："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"NormalModuleFactory",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"hooks",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"someHook",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"tap"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* ... */"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"NormalModuleFactory")," 创建了可由 ",(0,t.kt)("inlineCode",{parentName:"p"},"HookMaps")," 访问的 ",(0,t.kt)("inlineCode",{parentName:"p"},"Parser")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"Generator")," 实例。同时必须传入 ",(0,t.kt)("inlineCode",{parentName:"p"},"identifier")," 才能使用以下代码："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"NormalModuleFactory",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"hooks",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"someHook",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"for"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'identifier'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"tap"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* ... */"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"与 ",(0,t.kt)("inlineCode",{parentName:"p"},"compiler")," 一样，",(0,t.kt)("inlineCode",{parentName:"p"},"tapAsync")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"tapPromise")," 是否可用\n取决于钩子的类型。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"beforeresolve",parentName:"h3"}),"beforeResolve",(0,t.kt)("a",{href:"#beforeresolve","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"AsyncSeriesBailHook")),(0,t.kt)("p",null,"当遇到新的依赖项请求时调用。可以通过返回 ",(0,t.kt)("inlineCode",{parentName:"p"},"false")," 来忽略依赖项。否则，返回 ",(0,t.kt)("inlineCode",{parentName:"p"},"undefined")," 以继续。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"回调参数：",(0,t.kt)("inlineCode",{parentName:"li"},"resolveData"))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"factorize",parentName:"h3"}),"factorize",(0,t.kt)("a",{href:"#factorize","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"AsyncSeriesBailHook")),(0,t.kt)("p",null,"在初始化解析之前调用。它应该返回 ",(0,t.kt)("inlineCode",{parentName:"p"},"undefined")," 以继续。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"回调参数：",(0,t.kt)("inlineCode",{parentName:"li"},"resolveData"))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"resolve",parentName:"h3"}),"resolve",(0,t.kt)("a",{href:"#resolve","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"AsyncSeriesBailHook")),(0,t.kt)("p",null,"在请求被解析之前调用。可以通过返回 ",(0,t.kt)("inlineCode",{parentName:"p"},"false")," 来忽略依赖项。返回一个模块实例将结束进程。否则，返回 ",(0,t.kt)("inlineCode",{parentName:"p"},"undefined")," 以继续。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"回调参数：",(0,t.kt)("inlineCode",{parentName:"li"},"resolveData"))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"resolveforscheme",parentName:"h3"}),"resolveForScheme",(0,t.kt)("a",{href:"#resolveforscheme","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"AsyncSeriesBailHook")),(0,t.kt)("p",null,"在解析符合统一资源标志符方案(URI)的请求之前调用。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"回调参数：",(0,t.kt)("inlineCode",{parentName:"li"},"resolveData"))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"afterresolve",parentName:"h3"}),"afterResolve",(0,t.kt)("a",{href:"#afterresolve","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"AsyncSeriesBailHook")),(0,t.kt)("p",null,"在请求解析后调用。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"回调参数：",(0,t.kt)("inlineCode",{parentName:"li"},"resolveData"))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"createmodule",parentName:"h3"}),"createModule",(0,t.kt)("a",{href:"#createmodule","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"AsyncSeriesBailHook")),(0,t.kt)("p",null,"在创建 ",(0,t.kt)("inlineCode",{parentName:"p"},"NormalModule")," 实例之前调用。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"回调参数：",(0,t.kt)("inlineCode",{parentName:"li"},"createData")," ",(0,t.kt)("inlineCode",{parentName:"li"},"resolveData"))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"module",parentName:"h3"}),"module",(0,t.kt)("a",{href:"#module","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"SyncWaterfallHook")),(0,t.kt)("p",null,"在创建 ",(0,t.kt)("inlineCode",{parentName:"p"},"NormalModule")," 实例后调用。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"回调参数：",(0,t.kt)("inlineCode",{parentName:"li"},"module")," ",(0,t.kt)("inlineCode",{parentName:"li"},"createData")," ",(0,t.kt)("inlineCode",{parentName:"li"},"resolveData"))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"createparser",parentName:"h3"}),"createParser",(0,t.kt)("a",{href:"#createparser","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"HookMap<SyncBailHook>")),(0,t.kt)("p",null,"在 ",(0,t.kt)("inlineCode",{parentName:"p"},"Parser")," 实例创建之前调用。",(0,t.kt)("inlineCode",{parentName:"p"},"parserOptions")," 是 ",(0,t.kt)("a",{href:"/configuration/module/#moduleparser",parentName:"p"},"module.parser")," 中对应标识符或空对象的选项。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"钩子参数：",(0,t.kt)("inlineCode",{parentName:"p"},"identifier"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"回调参数：",(0,t.kt)("inlineCode",{parentName:"p"},"parserOptions")))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"parser",parentName:"h3"}),"parser",(0,t.kt)("a",{href:"#parser","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"HookMap<SyncHook>")),(0,t.kt)("p",null,"在创建 ",(0,t.kt)("inlineCode",{parentName:"p"},"Parser")," 实例后触发。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"钩子参数：",(0,t.kt)("inlineCode",{parentName:"p"},"identifier"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"回调参数：",(0,t.kt)("inlineCode",{parentName:"p"},"parser")," ",(0,t.kt)("inlineCode",{parentName:"p"},"parserOptions")))),(0,t.kt)("p",null,"可能的默认标识符："),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("inlineCode",{parentName:"li"},"javascript/auto")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("inlineCode",{parentName:"li"},"javascript/dynamic")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("inlineCode",{parentName:"li"},"javascript/esm")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("inlineCode",{parentName:"li"},"json")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("inlineCode",{parentName:"li"},"webassembly/sync")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("inlineCode",{parentName:"li"},"webassembly/async")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("inlineCode",{parentName:"li"},"asset"))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"creategenerator",parentName:"h3"}),"createGenerator",(0,t.kt)("a",{href:"#creategenerator","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"HookMap<SyncBailHook>")),(0,t.kt)("p",null,"在 ",(0,t.kt)("inlineCode",{parentName:"p"},"Generator")," 实例创建之前调用。",(0,t.kt)("inlineCode",{parentName:"p"},"generatorOptions")," 是 ",(0,t.kt)("a",{href:"/configuration/module/#modulegenerator",parentName:"p"},"module.parser")," 中对应标识符或空对象的选项。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"钩子参数：",(0,t.kt)("inlineCode",{parentName:"p"},"identifier"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"回调参数：",(0,t.kt)("inlineCode",{parentName:"p"},"generatorOptions")))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"generator",parentName:"h3"}),"generator",(0,t.kt)("a",{href:"#generator","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"HookMap<SyncHook>")),(0,t.kt)("p",null,"在 ",(0,t.kt)("inlineCode",{parentName:"p"},"Generator")," 实例创建之后调用。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"钩子参数：",(0,t.kt)("inlineCode",{parentName:"p"},"identifier"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"回调参数：",(0,t.kt)("inlineCode",{parentName:"p"},"generator")," ",(0,t.kt)("inlineCode",{parentName:"p"},"generatorOptions")))),(0,t.kt)("p",null,"可能的默认标识符："),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("inlineCode",{parentName:"li"},"json")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("inlineCode",{parentName:"li"},"webassembly/sync")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("inlineCode",{parentName:"li"},"webassembly/async")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("inlineCode",{parentName:"li"},"asset")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("inlineCode",{parentName:"li"},"asset/source")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("inlineCode",{parentName:"li"},"asset/resource")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("inlineCode",{parentName:"li"},"asset/inline"))))}r.isMDXComponent=!0,a.default=r}}]);