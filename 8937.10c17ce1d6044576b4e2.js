"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8937],{8937:function(e,a,n){n.r(a),n(7378);var s=n(2682);function t(){return t=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},t.apply(this,arguments)}function p(e){let{components:a,...n}=e;return(0,s.kt)("wrapper",t({components:a},n),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"webpack")," compiler 能够识别遵循 ES2015 模块语法、CommonJS 或 AMD 规范编写的模块。然而，一些 third party(第三方库) 可能会引用一些全局依赖（例如 ",(0,s.kt)("inlineCode",{parentName:"p"},"jQuery")," 中的 ",(0,s.kt)("inlineCode",{parentName:"p"},"$"),'）。因此这些 library 也可能会创建一些需要导出的全局变量。这些 "broken modules(不符合规范的模块)" 就是 ',(0,s.kt)("em",{parentName:"p"},"shimming(预置依赖)")," 发挥作用的地方。"),(0,s.kt)("aside",{className:"warning"},(0,s.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,s.kt)("p",{parentName:"aside"},(0,s.kt)("strong",{parentName:"p"},"我们不推荐使用全局依赖"),"！webpack 背后的整个理念是使前端开发更加模块化。也就是说，需要编写具有良好的封闭性(well contained)、不依赖于隐含依赖（例如，全局变量）的彼此隔离的模块。请只在必要的时候才使用这些特性。")),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"shim")," 另外一个极其有用的使用场景就是：当你希望 ",(0,s.kt)("a",{href:"https://en.wikipedia.org/wiki/Polyfill_(programming)",parentName:"p"},"polyfill")," 扩展浏览器能力，来支持到更多用户时。在这种情况下，你可能只是想要将这些 polyfills 提供给需要修补(patch)的浏览器（也就是实现按需加载）。"),(0,s.kt)("p",null,"下面的文章将向我们展示这两种用例。"),(0,s.kt)("aside",{className:"tip"},(0,s.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,s.kt)("p",{parentName:"aside"},"为了方便，本指南继续沿用 ",(0,s.kt)("a",{href:"/guides/getting-started",parentName:"p"},"起步")," 中的代码示例。在继续之前，请确保你已经熟悉这些配置。")),(0,s.kt)("h2",null,(0,s.kt)("span",{id:"shimming-globals",parentName:"h2"}),"Shimming 预置全局变量",(0,s.kt)("a",{href:"#shimming-globals","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.kt)("span",{className:"header-link",parentName:"a"}))),(0,s.kt)("p",null,"让我们开始第一个 shimming 全局变量的用例。在此之前，先看下我们的项目："),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"project")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},"webpack-demo\n|- package.json\n|- package-lock.json\n|- webpack.config.js\n|- /dist\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- index.html\n")),"|- /src\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- index.js\n")),"|- /node_modules")),(0,s.kt)("p",null,"还记得我们之前用过的 ",(0,s.kt)("inlineCode",{parentName:"p"},"lodash")," 吗？出于演示目的，例如把这个应用程序中的模块依赖，改为一个全局变量依赖。要实现这些，我们需要使用 ",(0,s.kt)("inlineCode",{parentName:"p"},"ProvidePlugin")," 插件。"),(0,s.kt)("p",null,"使用 ",(0,s.kt)("a",{href:"/plugins/provide-plugin",parentName:"p"},(0,s.kt)("inlineCode",{parentName:"a"},"ProvidePlugin"))," 后，能够在 webpack 编译的每个模块中，通过访问一个变量来获取一个 package。如果 webpack 看到模块中用到这个变量，它将在最终 bundle 中引入给定的 package。让我们先移除 ",(0,s.kt)("inlineCode",{parentName:"p"},"lodash")," 的 ",(0,s.kt)("inlineCode",{parentName:"p"},"import")," 语句，改为通过插件提供它："),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"src/index.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"import _ from 'lodash';\n"),(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"function component() {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  const element = document.createElement('div');\n")),"\n",(0,s.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  // Lodash, now imported by this script\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  return element;\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"}\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"document.body.appendChild(component());")))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const path = require('path');\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"const webpack = require('webpack');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"module.exports = {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  entry: './src/index.js',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  output: {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    filename: 'main.js',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    path: path.resolve(__dirname, 'dist'),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  plugins: [\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    new webpack.ProvidePlugin({\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      _: 'lodash',\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    }),\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  ],\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"};")))),(0,s.kt)("p",null,"我们本质上所做的，就是告诉 webpack……"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"如果你遇到了至少一处用到 ",(0,s.kt)("inlineCode",{parentName:"p"},"_")," 变量的模块实例，那请你将 ",(0,s.kt)("inlineCode",{parentName:"p"},"lodash")," package 引入进来，并将其提供给需要用到它的模块。")),(0,s.kt)("p",null,"运行我们的构建脚本，将会看到同样的输出："),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-bash",parentName:"pre"},"$ ",(0,s.kt)("span",{className:"token function",parentName:"code"},"npm")," run build\n\n",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},".."),"\n\n",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"["),"webpack-cli",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"]")," Compilation finished\nasset main.js ",(0,s.kt)("span",{className:"token number",parentName:"code"},"69.1")," KiB ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"["),"minimized",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"("),"name: main",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,s.kt)("span",{className:"token number",parentName:"code"},"1")," related asset\nruntime modules ",(0,s.kt)("span",{className:"token number",parentName:"code"},"344")," bytes ",(0,s.kt)("span",{className:"token number",parentName:"code"},"2")," modules\ncacheable modules ",(0,s.kt)("span",{className:"token number",parentName:"code"},"530")," KiB\n  ./src/index.js ",(0,s.kt)("span",{className:"token number",parentName:"code"},"191")," bytes ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"["),"built",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"["),"code generated",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\n  ./node_modules/lodash/lodash.js ",(0,s.kt)("span",{className:"token number",parentName:"code"},"530")," KiB ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"["),"built",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"]")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"["),"code generated",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\nwebpack ",(0,s.kt)("span",{className:"token number",parentName:"code"},"5.4"),".0 compiled successfully ",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"in")," ",(0,s.kt)("span",{className:"token number",parentName:"code"},"2910")," ms")),(0,s.kt)("p",null,"还可以使用 ",(0,s.kt)("inlineCode",{parentName:"p"},"ProvidePlugin")," 暴露出某个模块中单个导出，通过配置一个“数组路径”（例如 ",(0,s.kt)("inlineCode",{parentName:"p"},"[module, child, ...children?]"),"）实现此功能。所以，我们假想如下，无论 ",(0,s.kt)("inlineCode",{parentName:"p"},"join")," 方法在何处调用，我们都只会获取到 ",(0,s.kt)("inlineCode",{parentName:"p"},"lodash")," 中提供的 ",(0,s.kt)("inlineCode",{parentName:"p"},"join")," 方法。"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"src/index.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"function component() {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  const element = document.createElement('div');\n")),"\n",(0,s.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  element.innerHTML = join(['Hello', 'webpack'], ' ');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  return element;\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"}\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"document.body.appendChild(component());")))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const path = require('path');\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const webpack = require('webpack');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"module.exports = {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  entry: './src/index.js',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  output: {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    filename: 'main.js',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    path: path.resolve(__dirname, 'dist'),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  plugins: [\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    new webpack.ProvidePlugin({\n")),(0,s.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      _: 'lodash',\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      join: ['lodash', 'join'],\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    }),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  ],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"};")))),(0,s.kt)("p",null,"这样就能很好的与 ",(0,s.kt)("a",{href:"/guides/tree-shaking",parentName:"p"},"tree shaking")," 配合，将 ",(0,s.kt)("inlineCode",{parentName:"p"},"lodash")," library 中的其余没有用到的导出去除。"),(0,s.kt)("h2",null,(0,s.kt)("span",{id:"granular-shimming",parentName:"h2"}),"细粒度 Shimming",(0,s.kt)("a",{href:"#granular-shimming","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.kt)("span",{className:"header-link",parentName:"a"}))),(0,s.kt)("p",null,"一些遗留模块依赖的 ",(0,s.kt)("inlineCode",{parentName:"p"},"this")," 指向的是 ",(0,s.kt)("inlineCode",{parentName:"p"},"window")," 对象。在接下来的用例中，调整我们的 ",(0,s.kt)("inlineCode",{parentName:"p"},"index.js"),"："),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"function component() {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  const element = document.createElement('div');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  element.innerHTML = join(['Hello', 'webpack'], ' ');\n")),"\n",(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"   // 假设我们处于 `window` 上下文\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"   this.alert('Hmmm, this probably isn\\'t a great idea...')\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  return element;\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"}\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"document.body.appendChild(component());")))),(0,s.kt)("p",null,"当模块运行在 CommonJS 上下文中，这将会变成一个问题，也就是说此时的 ",(0,s.kt)("inlineCode",{parentName:"p"},"this")," 指向的是 ",(0,s.kt)("inlineCode",{parentName:"p"},"module.exports"),"。在这种情况下，你可以通过使用 ",(0,s.kt)("a",{href:"/loaders/imports-loader/",parentName:"p"},(0,s.kt)("inlineCode",{parentName:"a"},"imports-loader"))," 覆盖 ",(0,s.kt)("inlineCode",{parentName:"p"},"this")," 指向："),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const path = require('path');\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const webpack = require('webpack');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"module.exports = {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  entry: './src/index.js',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  output: {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    filename: 'main.js',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    path: path.resolve(__dirname, 'dist'),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  module: {\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    rules: [\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      {\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"        test: require.resolve('./src/index.js'),\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"        use: 'imports-loader?wrapper=window',\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      },\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    ],\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  plugins: [\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    new webpack.ProvidePlugin({\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      join: ['lodash', 'join'],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    }),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  ],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"};")))),(0,s.kt)("h2",null,(0,s.kt)("span",{id:"global-exports",parentName:"h2"}),"全局 Exports",(0,s.kt)("a",{href:"#global-exports","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.kt)("span",{className:"header-link",parentName:"a"}))),(0,s.kt)("p",null,"让我们假设，某个 library 创建出一个全局变量，它期望 consumer(使用者) 使用这个变量。为此，我们可以在项目配置中，添加一个小模块来演示说明："),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"project")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," webpack-demo\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- package.json\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- package-lock.json\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- webpack.config.js\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- /dist\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- /src\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"   |- index.js\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"   |- globals.js\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- /node_modules")))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"src/globals.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,s.kt)("span",{className:"token keyword",parentName:"code"},"const")," file ",(0,s.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,s.kt)("span",{className:"token string",parentName:"code"},"'blah.txt'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"const")," helpers ",(0,s.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,s.kt)("span",{className:"token function-variable function",parentName:"code"},"test"),(0,s.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    console",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,s.kt)("span",{className:"token function",parentName:"code"},"log"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,s.kt)("span",{className:"token string",parentName:"code"},"'test something'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,s.kt)("span",{className:"token function-variable function",parentName:"code"},"parse"),(0,s.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    console",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,s.kt)("span",{className:"token function",parentName:"code"},"log"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,s.kt)("span",{className:"token string",parentName:"code"},"'parse something'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,s.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,s.kt)("p",null,"你可能从来没有在自己的源码中做过这些事情，但是你也许遇到过一个老旧的 library，和上面所展示的代码类似。在这种情况下，我们可以使用 ",(0,s.kt)("a",{href:"/loaders/exports-loader/",parentName:"p"},(0,s.kt)("inlineCode",{parentName:"a"},"exports-loader")),"，将一个全局变量作为一个普通的模块来导出。例如，为了将 ",(0,s.kt)("inlineCode",{parentName:"p"},"file")," 导出为 ",(0,s.kt)("inlineCode",{parentName:"p"},"file")," 以及将 ",(0,s.kt)("inlineCode",{parentName:"p"},"helpers.parse")," 导出为 ",(0,s.kt)("inlineCode",{parentName:"p"},"parse"),"，做如下调整："),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const path = require('path');\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const webpack = require('webpack');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"module.exports = {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  entry: './src/index.js',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  output: {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    filename: 'main.js',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    path: path.resolve(__dirname, 'dist'),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  module: {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    rules: [\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"        test: require.resolve('./src/index.js'),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"        use: 'imports-loader?wrapper=window',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      },\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      {\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"        test: require.resolve('./src/globals.js'),\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"        use:\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"          'exports-loader?type=commonjs&exports=file,multiple|helpers.parse|parse',\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      },\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    ],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  plugins: [\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    new webpack.ProvidePlugin({\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      join: ['lodash', 'join'],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    }),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  ],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"};")))),(0,s.kt)("p",null,"此时，在我们的 entry 入口文件中（即 ",(0,s.kt)("inlineCode",{parentName:"p"},"src/index.js"),"），可以使用 ",(0,s.kt)("inlineCode",{parentName:"p"},"const { file, parse } = require('./globals.js');"),"，可以保证一切将顺利运行。"),(0,s.kt)("h2",null,(0,s.kt)("span",{id:"loading-polyfills",parentName:"h2"}),"加载 Polyfills",(0,s.kt)("a",{href:"#loading-polyfills","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.kt)("span",{className:"header-link",parentName:"a"}))),(0,s.kt)("p",null,"目前为止我们所讨论的所有内容都是处理那些遗留的 package，让我们进入到第二个话题：",(0,s.kt)("strong",{parentName:"p"},"polyfill"),"。"),(0,s.kt)("p",null,"有很多方法来加载 polyfill。例如，想要引入 ",(0,s.kt)("a",{href:"https://babel.docschina.org/docs/en/babel-polyfill/",parentName:"p"},(0,s.kt)("inlineCode",{parentName:"a"},"babel-polyfill"))," 我们只需如下操作："),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-bash",parentName:"pre"},(0,s.kt)("span",{className:"token function",parentName:"code"},"npm")," ",(0,s.kt)("span",{className:"token function",parentName:"code"},"install")," --save babel-polyfill")),(0,s.kt)("p",null,"然后，使用 ",(0,s.kt)("inlineCode",{parentName:"p"},"import")," 将其引入到我们的主 bundle 文件："),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"src/index.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"import 'babel-polyfill';\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"function component() {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  const element = document.createElement('div');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  element.innerHTML = join(['Hello', 'webpack'], ' ');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  // Assume we are in the context of `window`\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},'  this.alert("Hmmm, this probably isn\'t a great idea...");\n')),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  return element;\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"}\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"document.body.appendChild(component());")))),(0,s.kt)("aside",{className:"tip"},(0,s.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,s.kt)("p",{parentName:"aside"},"注意，我们没有将 ",(0,s.kt)("inlineCode",{parentName:"p"},"import")," 绑定到某个变量。这是因为 polyfill 直接基于自身执行，并且是在基础代码执行之前，这样通过这些预置，我们就可以假定已经具有某些原生功能。")),(0,s.kt)("p",null,"注意，这种方式优先考虑正确性，而不考虑 bundle 体积大小。为了安全和可靠，polyfill/shim 必须",(0,s.kt)("strong",{parentName:"p"},"运行于所有其他代码之前"),"，而且需要同步加载，或者说，需要在所有 polyfill/shim 加载之后，再去加载所有应用程序代码。\n社区中存在许多误解，即现代浏览器“不需要”polyfill，或者 polyfill/shim 仅用于添加缺失功能 - 实际上，它们通常用于",(0,s.kt)("strong",{parentName:"p"},"修复损坏实现(repair broken implementation)"),"，即使是在最现代的浏览器中，也会出现这种情况。\n因此，最佳实践仍然是，不加选择地和同步地加载所有 polyfill/shim，尽管这会导致额外的 bundle 体积成本。"),(0,s.kt)("p",null,"如果你认为自己已经打消这些顾虑，并且希望承受损坏的风险。那么接下来的这件事情，可能是你应该要做的：\n我们将会把 ",(0,s.kt)("inlineCode",{parentName:"p"},"import")," 放入一个新文件，并加入 ",(0,s.kt)("a",{href:"https://github.com/github/fetch",parentName:"p"},(0,s.kt)("inlineCode",{parentName:"a"},"whatwg-fetch"))," polyfill："),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-bash",parentName:"pre"},(0,s.kt)("span",{className:"token function",parentName:"code"},"npm")," ",(0,s.kt)("span",{className:"token function",parentName:"code"},"install")," --save whatwg-fetch")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"src/index.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"import 'babel-polyfill';\n"),(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"function component() {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  const element = document.createElement('div');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  element.innerHTML = join(['Hello', 'webpack'], ' ');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  // Assume we are in the context of `window`\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},'  this.alert("Hmmm, this probably isn\'t a great idea...");\n')),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  return element;\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"}\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"document.body.appendChild(component());")))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"project")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," webpack-demo\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- package.json\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- package-lock.json\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- webpack.config.js\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- /dist\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- /src\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"   |- index.js\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"   |- globals.js\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"   |- polyfills.js\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"}," |- /node_modules")))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"src/polyfills.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,s.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,s.kt)("span",{className:"token string",parentName:"code"},"'babel-polyfill'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,s.kt)("span",{className:"token string",parentName:"code"},"'whatwg-fetch'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const path = require('path');\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"const webpack = require('webpack');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"module.exports = {\n")),(0,s.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  entry: './src/index.js',\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  entry: {\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    polyfills: './src/polyfills',\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    index: './src/index.js',\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  output: {\n")),(0,s.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    filename: 'main.js',\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    filename: '[name].bundle.js',\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    path: path.resolve(__dirname, 'dist'),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  module: {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    rules: [\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"        test: require.resolve('./src/index.js'),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"        use: 'imports-loader?wrapper=window',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      },\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"        test: require.resolve('./src/globals.js'),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"        use:\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"          'exports-loader?type=commonjs&exports[]=file&exports[]=multiple|helpers.parse|parse',\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      },\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    ],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  },\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  plugins: [\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    new webpack.ProvidePlugin({\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"      join: ['lodash', 'join'],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    }),\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  ],\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"};")))),(0,s.kt)("p",null,"如上配置之后，我们可以在代码中添加一些逻辑，有条件地加载新的 ",(0,s.kt)("inlineCode",{parentName:"p"},"polyfills.bundle.js")," 文件。根据需要支持的技术和浏览器来决定是否加载。我们将做一些简单的试验，来确定是否需要引入这些 polyfill："),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"dist/index.html")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"<!DOCTYPE html>\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"<html>\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  <head>\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},'    <meta charset="utf-8" />\n'),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"    <title>Getting Started</title>\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    <script>\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      const modernBrowser = 'fetch' in window && 'assign' in Object;\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      if (!modernBrowser) {\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"        const scriptElement = document.createElement('script');\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"        scriptElement.async = false;\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"        scriptElement.src = '/polyfills.bundle.js';\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"        document.head.appendChild(scriptElement);\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"      }\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    <\/script>\n")),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  </head>\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  <body>\n")),(0,s.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,s.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,s.kt)("span",{className:"token line",parentName:"span"},'    <script src="main.js"><\/script>\n')),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},'    <script src="index.bundle.js"><\/script>\n')),(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  </body>\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"</html>")))),(0,s.kt)("p",null,"现在，在 entry 入口文件中，可以通过 ",(0,s.kt)("inlineCode",{parentName:"p"},"fetch")," 获取一些数据："),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"src/index.js")),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"function component() {\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  const element = document.createElement('div');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  element.innerHTML = join(['Hello', 'webpack'], ' ');\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  // Assume we are in the context of `window`\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},'  this.alert("Hmmm, this probably isn\'t a great idea...");\n')),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"  return element;\n"),(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"}\n")),"\n",(0,s.kt)("span",{className:"token unchanged",parentName:"code"},(0,s.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,s.kt)("span",{className:"token line",parentName:"span"},"document.body.appendChild(component());\n")),(0,s.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"fetch('https://jsonplaceholder.typicode.com/users')\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  .then((response) => response.json())\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  .then((json) => {\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    console.log(\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},'      "We retrieved some data! AND we\'re confident it will work on a variety of browser distributions."\n'),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    );\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    console.log(json);\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  })\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  .catch((error) =>\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"    console.error('Something went wrong when fetching this data: ', error)\n"),(0,s.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,s.kt)("span",{className:"token line",parentName:"span"},"  );")))),(0,s.kt)("p",null,"执行构建脚本，可以看到，浏览器发送了额外的 ",(0,s.kt)("inlineCode",{parentName:"p"},"polyfills.bundle.js")," 文件请求，然后所有代码顺利执行。注意，以上的这些设定可能还会有所改进，这里我们向你提供一个很棒的想法：将 polyfill 提供给需要引入它的用户。"),(0,s.kt)("h2",null,(0,s.kt)("span",{id:"further-optimizations",parentName:"h2"}),"进一步优化",(0,s.kt)("a",{href:"#further-optimizations","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.kt)("span",{className:"header-link",parentName:"a"}))),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"babel-preset-env")," package 通过 ",(0,s.kt)("a",{href:"https://github.com/browserslist/browserslist",parentName:"p"},"browserslist")," 来转译那些你浏览器中不支持的特性。这个 preset 使用 ",(0,s.kt)("a",{href:"https://babel.docschina.org/docs/en/babel-preset-env#usebuiltins",parentName:"p"},(0,s.kt)("inlineCode",{parentName:"a"},"useBuiltIns"))," 选项，默认值是 ",(0,s.kt)("inlineCode",{parentName:"p"},"false"),"，这种方式可以将全局 ",(0,s.kt)("inlineCode",{parentName:"p"},"babel-polyfill")," 导入，改进为更细粒度的 ",(0,s.kt)("inlineCode",{parentName:"p"},"import")," 格式："),(0,s.kt)("pre",null,(0,s.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,s.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,s.kt)("span",{className:"token string",parentName:"code"},"'core-js/modules/es7.string.pad-start'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,s.kt)("span",{className:"token string",parentName:"code"},"'core-js/modules/es7.string.pad-end'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,s.kt)("span",{className:"token string",parentName:"code"},"'core-js/modules/web.timers'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,s.kt)("span",{className:"token string",parentName:"code"},"'core-js/modules/web.immediate'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,s.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,s.kt)("span",{className:"token string",parentName:"code"},"'core-js/modules/web.dom.iterable'"),(0,s.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{href:"https://babeljs.io/docs/en/babel-preset-env",parentName:"p"},"the babel-preset-env documentation")," for more information."),(0,s.kt)("h2",null,(0,s.kt)("span",{id:"node-built-ins",parentName:"h2"}),"Node 内置",(0,s.kt)("a",{href:"#node-built-ins","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.kt)("span",{className:"header-link",parentName:"a"}))),(0,s.kt)("p",null,"像 ",(0,s.kt)("inlineCode",{parentName:"p"},"process")," 这种 Node 内置模块，能直接根据配置文件进行正确的 polyfill，而不需要任何特定的 loader 或者 plugin。查看 ",(0,s.kt)("a",{href:"/configuration/node",parentName:"p"},"node")," 配置页面获取更多信息。"),(0,s.kt)("h2",null,(0,s.kt)("span",{id:"other-utilities",parentName:"h2"}),"其他工具",(0,s.kt)("a",{href:"#other-utilities","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,s.kt)("span",{className:"header-link",parentName:"a"}))),(0,s.kt)("p",null,"还有一些其他的工具，也能够帮助我们处理这些遗留模块。"),(0,s.kt)("p",null,"如果这些遗留模块没有 AMD/CommonJS 版本，但你也想将他们加入 ",(0,s.kt)("inlineCode",{parentName:"p"},"dist")," 文件，则可以使用 ",(0,s.kt)("a",{href:"/configuration/module/#modulenoparse",parentName:"p"},(0,s.kt)("inlineCode",{parentName:"a"},"noParse"))," 来标识出这个模块。这样就能使 webpack 将引入这些模块，但是不进行转化(parse)，以及不解析(resolve) ",(0,s.kt)("inlineCode",{parentName:"p"},"require()")," 和 ",(0,s.kt)("inlineCode",{parentName:"p"},"import")," 语句。这种用法还会提高构建性能。"),(0,s.kt)("aside",{className:"warning"},(0,s.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,s.kt)("p",{parentName:"aside"},"任何需要 AST 的功能（例如 ",(0,s.kt)("inlineCode",{parentName:"p"},"ProvidePlugin"),"）都不起作用。")),(0,s.kt)("p",null,"最后，一些模块支持多种 ",(0,s.kt)("a",{href:"/concepts/modules",parentName:"p"},"模块格式"),"，例如一个混合有 AMD、CommonJS 和 legacy(遗留) 的模块。在大多数这样的模块中，会首先检查 ",(0,s.kt)("inlineCode",{parentName:"p"},"define"),"，然后使用一些怪异代码导出一些属性。在这些情况下，可以通过 ",(0,s.kt)("a",{href:"/loaders/imports-loader/",parentName:"p"},(0,s.kt)("inlineCode",{parentName:"a"},"imports-loader"))," 设置 ",(0,s.kt)("inlineCode",{parentName:"p"},"additionalCode=var%20define%20=%20false;")," 来强制 CommonJS 路径。"),(0,s.kt)("hr",null),(0,s.kt)("aside",{className:"tip"},(0,s.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,s.kt)("p",{parentName:"aside"},"译者注：shimming 是一个库(library)，它将一个新的 API 引入到一个旧的环境中，而且仅靠旧的环境中已有的手段实现。polyfill 就是一个用在浏览器 API 上的 shimming。我们通常的做法是先检查当前浏览器是否支持某个 API，如果不支持的话就按需加载对应的 polyfill。然后新旧浏览器就都可以使用这个 API 了。")))}p.isMDXComponent=!0,a.default=p}}]);