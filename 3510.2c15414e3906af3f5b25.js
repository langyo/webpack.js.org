"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3510],{3510:function(e,a,n){n.r(a),n(7378);var t=n(2682);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},s.apply(this,arguments)}function p(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",s({components:a},n),(0,t.kt)("p",null,"在本指南中，我们将深入一些最佳实践和工具，将站点或应用程序构建到生产环境中。"),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},"以下示例来源于 ",(0,t.kt)("a",{href:"/guides/tree-shaking",parentName:"p"},"tree shaking")," 和 ",(0,t.kt)("a",{href:"/guides/development",parentName:"p"},"开发环境"),"。在继续之前，请确保你已经熟悉这些指南中所介绍的概念/配置。")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"setup",parentName:"h2"}),"配置",(0,t.kt)("a",{href:"#setup","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"development(开发环境)")," 和 ",(0,t.kt)("strong",{parentName:"p"},"production(生产环境)")," 这两个环境下的构建目标存在着巨大差异。在",(0,t.kt)("strong",{parentName:"p"},"开发环境"),"中，我们需要：强大的 source map 和一个有着 live reloading(实时重新加载) 或 hot module replacement(模块热替换) 能力的 localhost server。而",(0,t.kt)("strong",{parentName:"p"},"生产环境"),"目标则转移至其他方面，关注点在于压缩 bundle、更轻量的 source map、资源优化等，通过这些优化方式改善加载时间。由于要遵循逻辑分离，我们通常建议为每个环境编写",(0,t.kt)("strong",{parentName:"p"},"彼此独立的 webpack 配置"),"。"),(0,t.kt)("p",null,"虽然，以上我们将 ",(0,t.kt)("em",{parentName:"p"},"生产环境")," 和 ",(0,t.kt)("em",{parentName:"p"},"开发环境"),' 做了细微区分，但是，请注意，我们还是会遵循不重复原则(Don\'t repeat yourself - DRY)，保留一个 "common(通用)" 配置。为了将这些配置合并在一起，我们将使用一个名为 ',(0,t.kt)("a",{href:"https://github.com/survivejs/webpack-merge",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"webpack-merge")),' 的工具。此工具会引用 "common" 配置，因此我们不必再在环境特定(environment-specific)的配置中编写重复代码。'),(0,t.kt)("p",null,"我们先从安装 ",(0,t.kt)("inlineCode",{parentName:"p"},"webpack-merge")," 开始，并将之前指南中已经成型的那些代码进行分离："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-bash",parentName:"pre"},(0,t.kt)("span",{className:"token function",parentName:"code"},"npm")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"install")," --save-dev webpack-merge")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"project")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," webpack-demo\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- package.json\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- package-lock.json\n")),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- webpack.config.js\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- webpack.common.js\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- webpack.dev.js\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- webpack.prod.js\n")),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- /dist\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- /src\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   |- index.js\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   |- math.js\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," |- /node_modules")))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.common.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," const path = require('path');\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," const HtmlWebpackPlugin = require('html-webpack-plugin');\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," module.exports = {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   entry: {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     app: './src/index.js',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   },\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   plugins: [\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     new HtmlWebpackPlugin({\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"       title: 'Production',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     }),\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   ],\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   output: {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     filename: '[name].bundle.js',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     path: path.resolve(__dirname, 'dist'),\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     clean: true,\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   },\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," };")))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.dev.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," const { merge } = require('webpack-merge');\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," const common = require('./webpack.common.js');\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," module.exports = merge(common, {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   mode: 'development',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   devtool: 'inline-source-map',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   devServer: {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     static: './dist',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   },\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," });")))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.prod.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," const { merge } = require('webpack-merge');\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," const common = require('./webpack.common.js');\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," module.exports = merge(common, {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   mode: 'production',\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," });")))),(0,t.kt)("p",null,"现在，在 ",(0,t.kt)("inlineCode",{parentName:"p"},"webpack.common.js")," 中，我们设置了 ",(0,t.kt)("inlineCode",{parentName:"p"},"entry")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"output")," 配置，并且在其中引入这两个环境公用的全部插件。在 ",(0,t.kt)("inlineCode",{parentName:"p"},"webpack.dev.js")," 中，我们将 ",(0,t.kt)("inlineCode",{parentName:"p"},"mode")," 设置为 ",(0,t.kt)("inlineCode",{parentName:"p"},"development"),"，并且为此环境添加了推荐的 ",(0,t.kt)("inlineCode",{parentName:"p"},"devtool"),"（强大的 source map）和 ",(0,t.kt)("inlineCode",{parentName:"p"},"devServer")," 配置。最后，在 ",(0,t.kt)("inlineCode",{parentName:"p"},"webpack.prod.js")," 中，我们将 ",(0,t.kt)("inlineCode",{parentName:"p"},"mode")," 设置为 ",(0,t.kt)("inlineCode",{parentName:"p"},"production"),"，其中会引入之前在 ",(0,t.kt)("a",{href:"/guides/tree-shaking",parentName:"p"},"tree shaking")," 指南中介绍过的 ",(0,t.kt)("inlineCode",{parentName:"p"},"TerserPlugin"),"。"),(0,t.kt)("p",null,"注意，在环境特定的配置中使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"merge()")," 功能，可以很方便地引用 ",(0,t.kt)("inlineCode",{parentName:"p"},"webpack.dev.js")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"webpack.prod.js")," 中公用的 common 配置。",(0,t.kt)("inlineCode",{parentName:"p"},"webpack-merge")," 工具提供了各种 merge(合并) 高级功能，但是在我们的用例中，无需用到这些功能。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"npm-scripts",parentName:"h2"}),"NPM Scripts",(0,t.kt)("a",{href:"#npm-scripts","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"现在，我们把 ",(0,t.kt)("inlineCode",{parentName:"p"},"scripts")," 重新指向到新配置。让 ",(0,t.kt)("inlineCode",{parentName:"p"},"npm start")," script 中 ",(0,t.kt)("inlineCode",{parentName:"p"},"webpack-dev-server"),", 使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"webpack.dev.js"),", 而让 ",(0,t.kt)("inlineCode",{parentName:"p"},"npm run build")," script 使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"webpack.prod.js"),":"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"package.json")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'   "name": "development",\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'   "version": "1.0.0",\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'   "description": "",\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'   "main": "src/index.js",\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'   "scripts": {\n')),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},'     "start": "webpack serve --open",\n')),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},'     "start": "webpack serve --open --config webpack.dev.js",\n')),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},'     "build": "webpack"\n')),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},'     "build": "webpack --config webpack.prod.js"\n')),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   },\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'   "keywords": [],\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'   "author": "",\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'   "license": "ISC",\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'   "devDependencies": {\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'     "css-loader": "^0.28.4",\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'     "csv-loader": "^2.1.1",\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'     "express": "^4.15.3",\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'     "file-loader": "^0.11.2",\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'     "html-webpack-plugin": "^2.29.0",\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'     "style-loader": "^0.18.2",\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'     "webpack": "^4.30.0",\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'     "webpack-dev-middleware": "^1.12.0",\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'     "webpack-dev-server": "^2.9.1",\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'     "webpack-merge": "^4.1.0",\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},'     "xml-loader": "^1.2.1"\n'),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   }\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," }")))),(0,t.kt)("p",null,"随便运行下这些脚本，然后查看输出结果的变化，然后我们会继续添加一些生产环境配置。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"specify-the-mode",parentName:"h2"}),"指定 mode",(0,t.kt)("a",{href:"#specify-the-mode","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"许多 library 通过与 ",(0,t.kt)("inlineCode",{parentName:"p"},"process.env.NODE_ENV")," 环境变量关联，以决定 library 中应该引用哪些内容。例如，当",(0,t.kt)("inlineCode",{parentName:"p"},"process.env.NODE_ENV")," 没有被设置为 ",(0,t.kt)("inlineCode",{parentName:"p"},"'production'")," 时，某些 library 为了使调试变得容易，可能会添加额外的 log(日志记录) 和 test(测试) 功能。并且，在使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"process.env.NODE_ENV === 'production'")," 时，一些 library 可能针对具体用户的环境，删除或添加一些重要代码，以进行代码执行方面的优化。从 webpack v4 开始, 指定 ",(0,t.kt)("a",{href:"/configuration/mode/",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"mode"))," 会自动地配置 ",(0,t.kt)("a",{href:"/plugins/define-plugin",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"DefinePlugin")),"："),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.prod.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," const { merge } = require('webpack-merge');\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," const common = require('./webpack.common.js');\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," module.exports = merge(common, {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   mode: 'production',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," });")))),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},"技术上讲，",(0,t.kt)("inlineCode",{parentName:"p"},"NODE_ENV")," 是一个由 Node.js 暴露给执行脚本的系统环境变量。通常用于决定在开发环境与生产环境(dev-vs-prod)下，server tools(服务期工具)、build scripts(构建脚本) 和 client-side libraries(客户端库) 的行为。然而，与预期相反，在构建脚本 ",(0,t.kt)("inlineCode",{parentName:"p"},"webpack.config.js")," 中 ",(0,t.kt)("inlineCode",{parentName:"p"},"process.env.NODE_ENV")," 并没有被设置为 ",(0,t.kt)("inlineCode",{parentName:"p"},'"production"'),"，请查看 ",(0,t.kt)("a",{href:"https://github.com/webpack/webpack/issues/2537",parentName:"p"},"#2537"),"。因此，在 webpack 配置文件中，",(0,t.kt)("inlineCode",{parentName:"p"},"process.env.NODE_ENV === 'production' ? '[name].[contenthash].bundle.js' : '[name].bundle.js'")," 这样的条件语句，无法按照预期运行。")),(0,t.kt)("p",null,"如果你正在使用像 ",(0,t.kt)("a",{href:"https://react.docchina.org/",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"react"))," 这样的 library，那么在添加此 DefinePlugin 插件后，你应该看到 bundle 大小显著下降。还要注意，任何位于 ",(0,t.kt)("inlineCode",{parentName:"p"},"/src")," 的本地代码都可以关联到 process.env.NODE_ENV 环境变量，所以以下检查也是有效的："),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"src/index.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," import { cube } from './math.js';\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," if (process.env.NODE_ENV !== 'production') {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   console.log('Looks like we are in development mode!');\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," }\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," function component() {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   const element = document.createElement('pre');\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   element.innerHTML = [\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"     'Hello webpack!',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"     '5 cubed is equal to ' + cube(5)\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   ].join('\\n\\n');\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   return element;\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," }\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," document.body.appendChild(component());")))),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"minification",parentName:"h2"}),"压缩(Minification)",(0,t.kt)("a",{href:"#minification","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack v4+ will minify your code by default in ",(0,t.kt)("a",{href:"/configuration/mode/#mode-production",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"production mode")),"."),(0,t.kt)("p",null,"注意，虽然生产环境下默认使用 ",(0,t.kt)("a",{href:"/plugins/terser-webpack-plugin",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"TerserPlugin"))," ，并且也是代码压缩方面比较好的选择，但是还有一些其他可选择项。以下有几个同样很受欢迎的插件："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{href:"https://github.com/webpack-contrib/closure-webpack-plugin",parentName:"li"},(0,t.kt)("inlineCode",{parentName:"a"},"ClosureWebpackPlugin")))),(0,t.kt)("p",null,"如果决定尝试一些其他压缩插件，确保新插件也会按照 ",(0,t.kt)("a",{href:"/guides/tree-shaking",parentName:"p"},"tree shake")," 指南中所陈述的具有删除未引用代码(dead code)的能力，并将它作为 ",(0,t.kt)("a",{href:"/configuration/optimization/#optimizationminimizer",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"optimization.minimizer")),"。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"source-mapping",parentName:"h2"}),"源码映射(Source Mapping)",(0,t.kt)("a",{href:"#source-mapping","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"我们鼓励你在生产环境中启用 source map，因为它们对 debug(调试源码) 和运行 benchmark tests(基准测试) 很有帮助。虽然有着如此强大的功能，然而还是应该针对生产环境用途，选择一个可以快速构建的推荐配置（更多选项请查看 ",(0,t.kt)("a",{href:"/configuration/devtool",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"devtool")),"）。对于本指南，我们将在 ",(0,t.kt)("strong",{parentName:"p"},"生产环境")," 中使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"source-map")," 选项，而不是我们在开发环境中用到的 ",(0,t.kt)("inlineCode",{parentName:"p"},"inline-source-map"),"："),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.prod.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," const { merge } = require('webpack-merge');\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," const common = require('./webpack.common.js');\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," module.exports = merge(common, {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   mode: 'production',\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   devtool: 'source-map',\n")),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," });")))),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},"避免在生产中使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"inline-***")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"eval-***"),"，因为它们会增加 bundle 体积大小，并降低整体性能。")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"minimize-css",parentName:"h2"}),"压缩 CSS",(0,t.kt)("a",{href:"#minimize-css","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"将生产环境下的 CSS 进行压缩会非常重要，请查看 ",(0,t.kt)("a",{href:"/plugins/mini-css-extract-plugin/#minimizing-for-production",parentName:"p"},"在生产环境下压缩")," 章节。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"cli-alternatives",parentName:"h2"}),"CLI 替代选项",(0,t.kt)("a",{href:"#cli-alternatives","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"上述许多选项都可以通过命令行参数进行设置。例如，",(0,t.kt)("a",{href:"/configuration/optimization/#optimizationminimize",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"optimize-minimize"))," 可以使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"--optimization-minimize")," 进行设置，",(0,t.kt)("a",{href:"/configuration/mode/",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"mode"))," 可以使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"--mode")," 进行设置。运行 ",(0,t.kt)("inlineCode",{parentName:"p"},"npx webpack --help=verbose")," 可以查看所有关于 CLI 的可用参数。"),(0,t.kt)("p",null,"虽然这种简写方式很有用处，但我们还是建议通过 webpack 配置文件的方式进行使用，这样可以提高可配置能力。"))}p.isMDXComponent=!0,a.default=p}}]);