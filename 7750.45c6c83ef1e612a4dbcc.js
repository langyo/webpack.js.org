"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7750],{7750:function(e,a,n){n.r(a),n(7378);var t=n(2682);function p(){return p=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},p.apply(this,arguments)}const s=("StackBlitzPreview",e=>(console.warn("Component `%s` was not imported, exported, or provided by MDXProvider as global scope","StackBlitzPreview"),(0,t.kt)(t.kt.Fragment,null,e.children)));function o(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",p({components:a},n),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"motivation",parentName:"h2"}),"动机",(0,t.kt)("a",{href:"#motivation","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"多个独立的构建可以组成一个应用程序，这些独立的构建之间不应该存在依赖关系，因此可以单独开发和部署它们。"),(0,t.kt)("p",null,"这通常被称作微前端，但并不仅限于此。"),(0,t.kt)(s,{example:"module-federation?terminal=start&terminal=",description:"Check out this live module federation example on StackBlitz.",mdxType:"StackBlitzPreview"}),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"low-level-concepts",parentName:"h2"}),"底层概念",(0,t.kt)("a",{href:"#low-level-concepts","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"我们区分本地模块和远程模块。本地模块即为普通模块，是当前构建的一部分。远程模块不属于当前构建，并在运行时从所谓的容器加载。"),(0,t.kt)("p",null,"加载远程模块被认为是异步操作。当使用远程模块时，这些异步操作将被放置在远程模块和入口之间的下一个 chunk 的加载操作中。如果没有 chunk 加载操作，就不能使用远程模块。"),(0,t.kt)("p",null,"chunk 的加载操作通常是通过调用 ",(0,t.kt)("inlineCode",{parentName:"p"},"import()")," 实现的，但也支持像 ",(0,t.kt)("inlineCode",{parentName:"p"},"require.ensure")," 或 ",(0,t.kt)("inlineCode",{parentName:"p"},"require([...])")," 之类的旧语法。"),(0,t.kt)("p",null,"容器是由容器入口创建的，该入口暴露了对特定模块的异步访问。暴露的访问分为两个步骤："),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"加载模块（异步的）"),(0,t.kt)("li",{parentName:"ol"},"执行模块（同步的）")),(0,t.kt)("p",null,"步骤 1 将在 chunk 加载期间完成。步骤 2 将在与其他（本地和远程）的模块交错执行期间完成。这样一来，执行顺序不受模块从本地转换为远程或从远程转为本地的影响。"),(0,t.kt)("p",null,"容器可以嵌套使用，容器可以使用来自其他容器的模块。容器之间也可以循环依赖。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"high-level-concepts",parentName:"h2"}),"高级概念",(0,t.kt)("a",{href:"#high-level-concepts","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"每个构建都充当一个容器，也可将其他构建作为容器。通过这种方式，每个构建都能够通过从对应容器中加载模块来访问其他容器暴露出来的模块。"),(0,t.kt)("p",null,"共享模块是指既可重写的又可作为向嵌套容器提供重写的模块。它们通常指向每个构建中的相同模块，例如相同的库。"),(0,t.kt)("p",null,"packageName 选项允许通过设置包名来查找所需的版本。默认情况下，它会自动推断模块请求，当想禁用自动推断时，请将 requiredVersion 设置为 false 。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"building-blocks",parentName:"h2"}),"构建块(Building blocks)",(0,t.kt)("a",{href:"#building-blocks","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"containerplugin-low-level",parentName:"h3"}),"ContainerPlugin (low level)",(0,t.kt)("a",{href:"#containerplugin-low-level","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"该插件使用指定的公开模块来创建一个额外的容器入口。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"containerreferenceplugin-low-level",parentName:"h3"}),"ContainerReferencePlugin (low level)",(0,t.kt)("a",{href:"#containerreferenceplugin-low-level","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"该插件将特定的引用添加到作为外部资源（externals）的容器中，并允许从这些容器中导入远程模块。它还会调用这些容器的 ",(0,t.kt)("inlineCode",{parentName:"p"},"override")," API 来为它们提供重载。本地的重载（当构建也是一个容器时，通过 ",(0,t.kt)("inlineCode",{parentName:"p"},"__webpack_override__")," 或 ",(0,t.kt)("inlineCode",{parentName:"p"},"override")," API）和指定的重载被提供给所有引用的容器。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"modulefederationplugin-high-level",parentName:"h3"}),"ModuleFederationPlugin (high level)",(0,t.kt)("a",{href:"#modulefederationplugin-high-level","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("a",{href:"/plugins/module-federation-plugin",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"ModuleFederationPlugin"))," 组合了 ",(0,t.kt)("inlineCode",{parentName:"p"},"ContainerPlugin")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"ContainerReferencePlugin"),"。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"concept-goals",parentName:"h2"}),"概念目标",(0,t.kt)("a",{href:"#concept-goals","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"它既可以暴露，又可以使用 webpack 支持的任何模块类型"),(0,t.kt)("li",{parentName:"ul"},"代码块加载应该并行加载所需的所有内容(web:到服务器的单次往返)"),(0,t.kt)("li",{parentName:"ul"},"从使用者到容器的控制",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"重写模块是一种单向操作"),(0,t.kt)("li",{parentName:"ul"},"同级容器不能重写彼此的模块。"))),(0,t.kt)("li",{parentName:"ul"},"概念适用于独立于环境",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"可用于 web、Node.js 等"))),(0,t.kt)("li",{parentName:"ul"},"共享中的相对和绝对请求",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"会一直提供，即使不使用"),(0,t.kt)("li",{parentName:"ul"},"会将相对路径解析到 ",(0,t.kt)("inlineCode",{parentName:"li"},"config.context")),(0,t.kt)("li",{parentName:"ul"},"默认不会使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"requiredVersion")))),(0,t.kt)("li",{parentName:"ul"},"共享中的模块请求",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"只在使用时提供"),(0,t.kt)("li",{parentName:"ul"},"会匹配构建中所有使用的相等模块请求"),(0,t.kt)("li",{parentName:"ul"},"将提供所有匹配模块"),(0,t.kt)("li",{parentName:"ul"},"将从图中这个位置的 package.json 提取 ",(0,t.kt)("inlineCode",{parentName:"li"},"requiredVersion")),(0,t.kt)("li",{parentName:"ul"},"当你有嵌套的 node_modules 时，可以提供和使用多个不同的版本"))),(0,t.kt)("li",{parentName:"ul"},"共享中尾部带有 ",(0,t.kt)("inlineCode",{parentName:"li"},"/"),"  的模块请求将匹配所有具有这个前缀的模块请求")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"use-cases",parentName:"h2"}),"用例",(0,t.kt)("a",{href:"#use-cases","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"separate-builds-per-page",parentName:"h3"}),"每个页面单独构建",(0,t.kt)("a",{href:"#separate-builds-per-page","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"单页应用的每个页面都是在单独的构建中从容器暴露出来的。主体应用程序(application shell)也是独立构建，会将所有页面作为远程模块来引用。通过这种方式，可以单独部署每个页面。在更新路由或添加新路由时部署主体应用程序。主体应用程序将常用库定义为共享模块，以避免在页面构建中出现重复。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"components-library-as-container",parentName:"h3"}),"将组件库作为容器",(0,t.kt)("a",{href:"#components-library-as-container","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"许多应用程序共享一个通用的组件库，可以将其构建成暴露所有组件的容器。每个应用程序使用来自组件库容器的组件。可以单独部署对组件库的更改，而不需要重新部署所有应用程序。应用程序自动使用组件库的最新版本。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"dynamic-remote-containers",parentName:"h2"}),"动态远程容器",(0,t.kt)("a",{href:"#dynamic-remote-containers","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"该容器接口支持 ",(0,t.kt)("inlineCode",{parentName:"p"},"get"),"  和 ",(0,t.kt)("inlineCode",{parentName:"p"},"init")," 方法。\n",(0,t.kt)("inlineCode",{parentName:"p"},"init")," 是一个兼容 ",(0,t.kt)("inlineCode",{parentName:"p"},"async")," 的方法，调用时，只含有一个参数：共享作用域对象(shared scope object)。此对象在远程容器中用作共享作用域，并由 host 提供的模块填充。\n可以利用它在运行时动态地将远程容器连接到 host 容器。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"init.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token keyword",parentName:"code"},"async")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 初始化共享作用域（shared scope）用提供的已知此构建和所有远程的模块填充它"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"await")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"__webpack_init_sharing__"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'default'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," container ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," window",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"someContainer",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";")," ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 或从其他地方获取容器"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 初始化容器 它可能提供共享模块"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"await")," container",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"init"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"__webpack_share_scopes__",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"default",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," module ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"await")," container",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"get"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'./module'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"容器尝试提供共享模块，但是如果共享模块已经被使用，则会发出警告，并忽略所提供的共享模块。容器仍能将其作为降级模块。"),(0,t.kt)("p",null,"你可以通过动态加载的方式，提供一个共享模块的不同版本，从而实现 A/B 测试。"),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},"在尝试动态连接远程容器之前，确保已加载容器。")),(0,t.kt)("p",null,"例子："),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"init.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"loadComponent"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"scope",(0,t.kt)("span",{className:"token punctuation",parentName:"span"},",")," module"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"async")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 初始化共享作用域（shared scope）用提供的已知此构建和所有远程的模块填充它"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"await")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"__webpack_init_sharing__"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'default'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," container ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," window",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"scope",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";")," ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 或从其他地方获取容器"),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 初始化容器 它可能提供共享模块"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"await")," container",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"init"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"__webpack_share_scopes__",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"default",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," factory ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"await")," window",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"scope",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"get"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," Module ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"factory"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return")," Module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\n",(0,t.kt)("span",{className:"token function",parentName:"code"},"loadComponent"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'abtests'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'test123'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("a",{href:"https://github.com/module-federation/module-federation-examples/tree/master/advanced-api/dynamic-remotes",parentName:"p"},"查看完整实现")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"promisebaseddynamicremotes",parentName:"h2"}),"基于 Promise 的动态 Remote",(0,t.kt)("a",{href:"#promisebaseddynamicremotes","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"一般来说，remote 是使用 URL 配置的，示例如下："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  plugins",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"ModuleFederationPlugin"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      name",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'host'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      remotes",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        app1",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'app1@http://localhost:3001/remoteEntry.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"但是你也可以向 remote 传递一个 promise，其会在运行时被调用。你应该用任何符合上面描述的 ",(0,t.kt)("inlineCode",{parentName:"p"},"get/init")," 接口的模块来调用这个 promise。例如，如果你想传递你应该使用哪个版本的联邦模块，你可以通过一个查询参数做以下事情："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  plugins",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"ModuleFederationPlugin"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      name",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'host'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      remotes",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        app1",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token template-string",parentName:"code"},(0,t.kt)("span",{className:"token template-punctuation string",parentName:"span"},"`"),(0,t.kt)("span",{className:"token string",parentName:"span"},"promise new Promise(resolve => {\n      const urlParams = new URLSearchParams(window.location.search)\n      const version = urlParams.get('app1VersionParam')\n      // This part depends on how you plan on hosting and versioning your federated modules\n      const remoteUrlWithVersion = 'http://localhost:3001/' + version + '/remoteEntry.js'\n      const script = document.createElement('script')\n      script.src = remoteUrlWithVersion\n      script.onload = () => {\n        // the injected script has loaded and is available on window\n        // we can now resolve this Promise\n        const proxy = {\n          get: (request) => window.app1.get(request),\n          init: (arg) => {\n            try {\n              return window.app1.init(arg)\n            } catch(e) {\n              console.log('remote container already initialized')\n            }\n          }\n        }\n        resolve(proxy)\n      }\n      // inject this script with the src set to the versioned remoteEntry.js\n      document.head.appendChild(script);\n    })\n    "),(0,t.kt)("span",{className:"token template-punctuation string",parentName:"span"},"`")),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"请注意当使用该 API 时，你 ",(0,t.kt)("em",{parentName:"p"},"必须")," resolve 一个包含 get/init API 的对象。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"dynamicpublicpath",parentName:"h2"}),"动态 Public Path",(0,t.kt)("a",{href:"#dynamicpublicpath","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"offerahostapitosetthepublicpath",parentName:"h3"}),"提供一个 host api 以设置 publicPath",(0,t.kt)("a",{href:"#offerahostapitosetthepublicpath","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"可以允许 host 在运行时通过公开远程模块的方法来设置远程模块的 publicPath。"),(0,t.kt)("p",null,"当你在 host 域的子路径上挂载独立部署的子应用程序时，这种方法特别有用。"),(0,t.kt)("p",null,"场景："),(0,t.kt)("p",null,"你在 ",(0,t.kt)("inlineCode",{parentName:"p"},"https://my-host.com/app/*")," 上有一个 host 应用，并且在 ",(0,t.kt)("inlineCode",{parentName:"p"},"https://foo-app.com")," 上有一个子应用。子应用程序也挂载在 host 域上, 因此，\n",(0,t.kt)("inlineCode",{parentName:"p"},"https://foo-app.com")," 可以通过 ",(0,t.kt)("inlineCode",{parentName:"p"},"https://my-host.com/app/foo-app")," 访问，并且 ",(0,t.kt)("inlineCode",{parentName:"p"},"https://my-host.com/app/foo-app/*")," 可以通过代理重定向到 ",(0,t.kt)("inlineCode",{parentName:"p"},"https://foo-app.com/*"),"。"),(0,t.kt)("p",null,"示例："),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.config.js (remote)")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  entry",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    remote",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./public-path'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  plugins",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"ModuleFederationPlugin"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      name",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'remote'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 该名称必须与入口名称相匹配"),"\n      exposes",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token string",parentName:"code"},"'./public-path'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"public-path.js (remote)")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"set"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"value"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  __webpack_public_path__ ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," value",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"src/index.js (host)")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-ts",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," publicPath ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"await")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'remote/public-path'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\npublicPath",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token keyword",parentName:"code"},"set"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'/your-public-path'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,t.kt)("span",{className:"token comment",parentName:"code"},"//bootstrap app  e.g. import('./bootstrap.js')"))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"inferpublicpathfromscript",parentName:"h3"}),"Infer publicPath from script",(0,t.kt)("a",{href:"#inferpublicpathfromscript","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"One could infer the publicPath from the script tag from ",(0,t.kt)("inlineCode",{parentName:"p"},"document.currentScript.src")," and set it with the ",(0,t.kt)("a",{href:"/api/module-variables/#__webpack_public_path__-webpack-specific",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"__webpack_public_path__"))," module variable at runtime."),(0,t.kt)("p",null,"示例："),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.config.js (remote)")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  entry",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    remote",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./setup-public-path'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  plugins",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"ModuleFederationPlugin"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      name",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'remote'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 该名称必须与入口名称相匹配"),"\n      ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"setup-public-path.js (remote)")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 使用你自己的逻辑派生 publicPath，并使用 __webpack_public_path__ API 设置它"),"\n__webpack_public_path__ ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," document",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"currentScript",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"src ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"+")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'/../'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},(0,t.kt)("a",{href:"/configuration/output/#outputpublicpath",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"output.publicPath"))," 配置项也可设置为 ",(0,t.kt)("inlineCode",{parentName:"p"},"'auto'"),"，它将为你自动决定一个 publicPath。")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"troubleshooting",parentName:"h2"}),"故障排除",(0,t.kt)("a",{href:"#troubleshooting","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"Uncaught-Error-Shared-module-is-not-available-for-eager-consumption",parentName:"h3"}),(0,t.kt)("inlineCode",{parentName:"h3"},"Uncaught Error: Shared module is not available for eager consumption"),(0,t.kt)("a",{href:"#Uncaught-Error-Shared-module-is-not-available-for-eager-consumption","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"应用程序正急切地执行一个作为全局主机运行的应用程序。有如下选项可供选择:"),(0,t.kt)("p",null,"你可以在模块联邦的高级 API 中将依赖设置为即时依赖，此 API 不会将模块放在异步 chunk 中，而是同步地提供它们。这使得我们在初始块中可以直接使用这些共享模块。但是要注意，由于所有提供的和降级模块是要异步下载的，因此，建议只在应用程序的某个地方提供它，例如 shell。"),(0,t.kt)("p",null,"我们强烈建议使用异步边界(asynchronous boundary)。它将把初始化代码分离成更大的块，以避免任何额外的开销，以提高总体性能。"),(0,t.kt)("p",null,"例如，你的入口看起来是这样的："),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"index.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," React ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'react'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," ReactDOM ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'react-dom'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," App ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./App'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\nReactDOM",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"render"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token operator",parentName:"code"},"<"),"App ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"/"),(0,t.kt)("span",{className:"token operator",parentName:"code"},">"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," document",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"getElementById"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'root'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"让我们创建 bootstrap.js 文件，并将入口文件的内容放到里面，然后将 bootstrap 引入到入口文件中:"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"index.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," import('./bootstrap');\n")),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"}," import React from 'react';\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"}," import ReactDOM from 'react-dom';\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"}," import App from './App';\n"),(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"}," ReactDOM.render(<App />, document.getElementById('root'));")))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"bootstrap.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," import React from 'react';\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," import ReactDOM from 'react-dom';\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," import App from './App';\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," ReactDOM.render(<App />, document.getElementById('root'));")))),(0,t.kt)("p",null,"这种方法有效，但存在局限性或缺点。"),(0,t.kt)("p",null,"通过 ",(0,t.kt)("inlineCode",{parentName:"p"},"ModuleFederationPlugin"),"  将依赖的 ",(0,t.kt)("inlineCode",{parentName:"p"},"eager")," 属性设置为 ",(0,t.kt)("inlineCode",{parentName:"p"},"true")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token comment",parentName:"code"},"// ..."),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"ModuleFederationPlugin"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  shared",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"..."),"deps",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    react",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      eager",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token boolean",parentName:"code"},"true"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"Uncaught-Error-Module-Button-does-not-exist-in-container",parentName:"h3"}),(0,t.kt)("inlineCode",{parentName:"h3"},'Uncaught Error: Module "./Button" does not exist in container.'),(0,t.kt)("a",{href:"#Uncaught-Error-Module-Button-does-not-exist-in-container","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"错误提示中可能不会显示 ",(0,t.kt)("inlineCode",{parentName:"p"},'"./Button"'),"，但是信息看起来差不多。这个问题通常会出现在将 webpack beta.16 升级到 webpack beta.17 中。"),(0,t.kt)("p",null,"在 ModuleFederationPlugin 里，更改 exposes:"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},"new ModuleFederationPlugin({\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," exposes: {\n")),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   'Button': './src/Button'\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   './Button':'./src/Button'\n")),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," }\n")),"});")),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"Uncaught-TypeError-fn-is-not-a-function",parentName:"h3"}),(0,t.kt)("inlineCode",{parentName:"h3"},"Uncaught TypeError: fn is not a function"),(0,t.kt)("a",{href:"#Uncaught-TypeError-fn-is-not-a-function","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"此处错误可能是丢失了远程容器，请确保在使用前添加它。\n如果已为试图使用远程服务器的容器加载了容器，但仍然看到此错误，则需将主机容器的远程容器文件也添加到 HTML 中。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"collision-between-modules-from-different-remotes",parentName:"h3"}),"来自多个 remote 的模块之间的冲突",(0,t.kt)("a",{href:"#collision-between-modules-from-different-remotes","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"如果你想从不同的 remote 中加载多个模块，建议为你的远程构建设置 ",(0,t.kt)("a",{href:"/configuration/output/#outputuniquename",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"output.uniqueName"))," 以避免多个 webpack 运行时之间的冲突。\nIf you're going to load multiple modules from different remotes, it's advised to set the ",(0,t.kt)("a",{href:"/configuration/output/#outputuniquename",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"output.uniqueName"))," option for your remote builds to avoid collisions between multiple webpack runtimes."))}o.isMDXComponent=!0,a.default=o}}]);