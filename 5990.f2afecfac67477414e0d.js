"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5990],{5990:function(e,a,t){t.r(a),t(7378);var n=t(2682);function p(){return p=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},p.apply(this,arguments)}function l(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",p({components:a},t),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"DllPlugin")," 和 ",(0,n.kt)("inlineCode",{parentName:"p"},"DllReferencePlugin"),' 用某种方法实现了拆分 bundles，同时还大幅度提升了构建的速度。"DLL" 一词代表微软最初引入的动态链接库。'),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"dllplugin",parentName:"h2"}),"DllPlugin",(0,n.kt)("a",{href:"#dllplugin","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"此插件用于在单独的 webpack 配置中创建一个 dll-only-bundle。 此插件会生成一个名为 ",(0,n.kt)("inlineCode",{parentName:"p"},"manifest.json")," 的文件，这个文件是用于让 ",(0,n.kt)("a",{href:"#dllreferenceplugin",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"DllReferencePlugin"))," 能够映射到相应的依赖上。"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"context"),"（可选）： manifest 文件中请求的 context (默认值为 webpack 的 context)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"format")," (boolean = false)：如果为 ",(0,n.kt)("inlineCode",{parentName:"li"},"true"),"，则 manifest json 文件 (输出文件) 将被格式化。"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"name"),"：暴露出的 DLL 的函数名（",(0,n.kt)("a",{href:"https://github.com/webpack/webpack/blob/master/lib/TemplatedPathPlugin.js",parentName:"li"},"TemplatePaths"),"：",(0,n.kt)("inlineCode",{parentName:"li"},"[fullhash]")," & ",(0,n.kt)("inlineCode",{parentName:"li"},"[name]")," ）"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"path"),"：manifest.json 文件的 ",(0,n.kt)("strong",{parentName:"li"},"绝对路径"),"（输出文件）"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"entryOnly")," (boolean = true)：如果为 ",(0,n.kt)("inlineCode",{parentName:"li"},"true"),"，则仅暴露入口"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"type"),"：dll bundle 的类型")),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,n.kt)("span",{className:"token class-name",parentName:"code"},"webpack",(0,n.kt)("span",{className:"token punctuation",parentName:"span"},"."),"DllPlugin"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),"options",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("aside",{className:"warning"},(0,n.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,n.kt)("p",{parentName:"aside"},"我们建议 DllPlugin 只在 ",(0,n.kt)("inlineCode",{parentName:"p"},"entryOnly: true")," 时使用，否则 DLL 中的 tree shaking 将无法工作，因为所有 exports 均可使用。")),(0,n.kt)("p",null,"在给定的 ",(0,n.kt)("inlineCode",{parentName:"p"},"path")," 路径下创建一个 ",(0,n.kt)("inlineCode",{parentName:"p"},"manifest.json")," 文件。这个文件包含了从 require 和 import 中 request 到模块 id 的映射。 ",(0,n.kt)("inlineCode",{parentName:"p"},"DllReferencePlugin")," 也会用到这个文件。"),(0,n.kt)("p",null,"此插件与 ",(0,n.kt)("a",{href:"/configuration/output/#outputlibrary",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"output.library"))," 的选项相结合可以暴露出（也称为放入全局作用域）dll 函数。"),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"dllreferenceplugin",parentName:"h2"}),"DllReferencePlugin",(0,n.kt)("a",{href:"#dllreferenceplugin","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"此插件配置在 webpack 的主配置文件中，此插件会把 dll-only-bundles 引用到需要的预编译的依赖中。"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"context"),"：（",(0,n.kt)("strong",{parentName:"li"},"绝对路径"),"） manifest (或者是内容属性)中请求的上下文"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"extensions"),"：用于解析 dll bundle 中模块的扩展名 (仅在使用 'scope' 时使用)。"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"manifest")," ：包含 ",(0,n.kt)("inlineCode",{parentName:"li"},"content")," 和 ",(0,n.kt)("inlineCode",{parentName:"li"},"name")," 的对象，或者是一个字符串 —— 编译时用于加载 JSON manifest 的绝对路径"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"content")," (可选)： 请求到模块 id 的映射（默认值为 ",(0,n.kt)("inlineCode",{parentName:"li"},"manifest.content"),"）"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"name")," (可选)：dll 暴露地方的名称（默认值为 ",(0,n.kt)("inlineCode",{parentName:"li"},"manifest.name"),"）（可参考",(0,n.kt)("a",{href:"/configuration/externals/",parentName:"li"},(0,n.kt)("inlineCode",{parentName:"a"},"externals")),"）"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"scope")," (可选)：dll 中内容的前缀"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"sourceType")," (可选)：dll 是如何暴露的 (",(0,n.kt)("a",{href:"/configuration/output/#outputlibrarytarget",parentName:"li"},"libraryTarget"),")")),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,n.kt)("span",{className:"token class-name",parentName:"code"},"webpack",(0,n.kt)("span",{className:"token punctuation",parentName:"span"},"."),"DllReferencePlugin"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),"options",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,"通过引用 dll 的 manifest 文件来把依赖的名称映射到模块的 id 上，之后再在需要的时候通过内置的 ",(0,n.kt)("inlineCode",{parentName:"p"},"__webpack_require__")," 函数来 ",(0,n.kt)("inlineCode",{parentName:"p"},"require")," 对应的模块"),(0,n.kt)("aside",{className:"warning"},(0,n.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,n.kt)("p",{parentName:"aside"},"保持 ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," 与 ",(0,n.kt)("a",{href:"/configuration/output/#outputlibrary",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"output.library"))," 一致。")),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"modes",parentName:"h3"}),"模式(Modes)",(0,n.kt)("a",{href:"#modes","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"这个插件支持两种模式，分别是作用域（",(0,n.kt)("em",{parentName:"p"},"scoped"),"）和映射（",(0,n.kt)("em",{parentName:"p"},"mapped"),"）。"),(0,n.kt)("h4",null,(0,n.kt)("span",{id:"scoped-mode",parentName:"h4"}),"Scoped Mode",(0,n.kt)("a",{href:"#scoped-mode","aria-hidden":"true",tabIndex:"-1",parentName:"h4"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"dll 中的内容可以使用模块前缀的方式引用，举例来说，设置 ",(0,n.kt)("inlineCode",{parentName:"p"},"scope = 'xyz'"),"，这个 dll 中的名为 ",(0,n.kt)("inlineCode",{parentName:"p"},"abc")," 的文件可以通过 ",(0,n.kt)("inlineCode",{parentName:"p"},"require('xyz/abc')")," 来获取。"),(0,n.kt)("aside",{className:"tip"},(0,n.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,n.kt)("p",{parentName:"aside"},(0,n.kt)("a",{href:"https://github.com/webpack/webpack/tree/master/examples/dll-user",parentName:"p"},"查看 scope 的使用示例"))),(0,n.kt)("h4",null,(0,n.kt)("span",{id:"mapped-mode",parentName:"h4"}),"Mapped Mode",(0,n.kt)("a",{href:"#mapped-mode","aria-hidden":"true",tabIndex:"-1",parentName:"h4"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"dll 中的内容会被映射到当前目录下。如果被 ",(0,n.kt)("inlineCode",{parentName:"p"},"require")," 的文件与 dll 中的某个文件匹配（解析之后），那么这个 dll 中的文件就会被使用。"),(0,n.kt)("p",null,"由于这是在解析了 dll 中每个文件之后才触发的，因此相同的路径必须能够确保这个 dll bundle 的使用者（不一定是人，可指某些代码）有权限访问。 举例来说， 假如一个 dll bundle 中含有 ",(0,n.kt)("inlineCode",{parentName:"p"},"loadash")," 库以及文件 ",(0,n.kt)("inlineCode",{parentName:"p"},"abc"),"， 那么 ",(0,n.kt)("inlineCode",{parentName:"p"},'require("lodash")')," 和 ",(0,n.kt)("inlineCode",{parentName:"p"},'require("./abc")')," 都不会被编译进主 bundle 文件中，而是会被 dll 所使用。"),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"usage",parentName:"h2"}),"用法(Usage)",(0,n.kt)("a",{href:"#usage","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("aside",{className:"warning"},(0,n.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,n.kt)("p",{parentName:"aside"},(0,n.kt)("inlineCode",{parentName:"p"},"DllReferencePlugin")," 和 ",(0,n.kt)("inlineCode",{parentName:"p"},"DllPlugin")," 都是在 ",(0,n.kt)("em",{parentName:"p"},"单独的")," webpack 配置中使用的。")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"webpack.vendor.config.js")),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"const")," path ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token function",parentName:"code"},"require"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token string",parentName:"code"},"'path'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,n.kt)("span",{className:"token class-name",parentName:"code"},"webpack",(0,n.kt)("span",{className:"token punctuation",parentName:"span"},"."),"DllPlugin"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  context",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," __dirname",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  name",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'[name]_[fullhash]'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  path",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," path",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"join"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),"__dirname",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'manifest.json'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"webpack.app.config.js")),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,n.kt)("span",{className:"token class-name",parentName:"code"},"webpack",(0,n.kt)("span",{className:"token punctuation",parentName:"span"},"."),"DllReferencePlugin"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  context",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," __dirname",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  manifest",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token function",parentName:"code"},"require"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token string",parentName:"code"},"'./manifest.json'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  scope",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'xyz'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  sourceType",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'commonjs2'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"examples",parentName:"h2"}),"示例",(0,n.kt)("a",{href:"#examples","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,(0,n.kt)("a",{href:"https://github.com/webpack/webpack/tree/master/examples/dll",parentName:"p"},"Vendor")," 和 ",(0,n.kt)("a",{href:"https://github.com/webpack/webpack/tree/master/examples/dll-user",parentName:"p"},"User")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"两个单独的用例，用来分别演示作用域（scope）和上下文（context）。")),(0,n.kt)("aside",{className:"tip"},(0,n.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,n.kt)("p",{parentName:"aside"},"多个 ",(0,n.kt)("inlineCode",{parentName:"p"},"DllPlugins")," 和 ",(0,n.kt)("inlineCode",{parentName:"p"},"DllReferencePlugins"),"。")),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"references",parentName:"h2"}),"参考",(0,n.kt)("a",{href:"#references","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"source",parentName:"h3"}),"Source",(0,n.kt)("a",{href:"#source","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{href:"https://github.com/webpack/webpack/blob/master/lib/DllPlugin.js",parentName:"li"},"DllPlugin source")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{href:"https://github.com/webpack/webpack/blob/master/lib/DllReferencePlugin.js",parentName:"li"},"DllReferencePlugin source")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{href:"https://github.com/webpack/webpack/blob/master/lib/DllEntryPlugin.js",parentName:"li"},"DllEntryPlugin source")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{href:"https://github.com/webpack/webpack/blob/master/lib/DllModuleFactory.js",parentName:"li"},"DllModuleFactory source")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{href:"https://github.com/webpack/webpack/blob/master/lib/LibManifestPlugin.js",parentName:"li"},"ManifestPlugin source"))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"tests",parentName:"h3"}),"Tests",(0,n.kt)("a",{href:"#tests","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{href:"https://github.com/webpack/webpack/blob/master/test/configCases/dll-plugin/0-create-dll/webpack.config.js",parentName:"li"},"DllPlugin creation test")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{href:"https://github.com/webpack/webpack/blob/master/test/configCases/dll-plugin/2-use-dll-without-scope/webpack.config.js",parentName:"li"},"DllPlugin without scope test")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{href:"https://github.com/webpack/webpack/tree/master/test/configCases/dll-plugin",parentName:"li"},"DllReferencePlugin use Dll test"))))}l.isMDXComponent=!0,a.default=l}}]);