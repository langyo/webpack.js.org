"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1227],{1227:function(a,e,n){n.r(e),n(7378);var t=n(2682);function s(){return s=Object.assign?Object.assign.bind():function(a){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(a[t]=n[t])}return a},s.apply(this,arguments)}function p(a){let{components:e,...n}=a;return(0,t.kt)("wrapper",s({components:e},n),(0,t.kt)("p",null,"插件向第三方开发者提供了 webpack 引擎中完整的能力。使用阶段式的构建回调，开发者可以在 webpack 构建流程中引入自定义的行为。创建插件比创建 loader 更加高级，因为你需要理解 webpack 底层的特性来处理相应的钩子，所以请做好阅读源码的准备！"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"creating-a-plugin",parentName:"h2"}),"创建插件",(0,t.kt)("a",{href:"#creating-a-plugin","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"webpack 插件由以下组成："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"一个 JavaScript 命名函数或 JavaScript 类。"),(0,t.kt)("li",{parentName:"ul"},"在插件函数的 prototype 上定义一个 ",(0,t.kt)("inlineCode",{parentName:"li"},"apply")," 方法。"),(0,t.kt)("li",{parentName:"ul"},"指定一个绑定到 webpack 自身的",(0,t.kt)("a",{href:"/api/compiler-hooks/",parentName:"li"},"事件钩子"),"。"),(0,t.kt)("li",{parentName:"ul"},"处理 webpack 内部实例的特定数据。"),(0,t.kt)("li",{parentName:"ul"},"功能完成后调用 webpack 提供的回调。")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 一个 JavaScript 类"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"class")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"MyExampleWebpackPlugin")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 在插件函数的 prototype 上定义一个 `apply` 方法，以 compiler 为参数。"),"\n  ",(0,t.kt)("span",{className:"token function",parentName:"code"},"apply"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"compiler"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 指定一个挂载到 webpack 自身的事件钩子。"),"\n    compiler",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"hooks",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"emit",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"tapAsync"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n      ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'MyExampleWebpackPlugin'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"compilation",(0,t.kt)("span",{className:"token punctuation",parentName:"span"},",")," callback"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        console",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"log"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'这是一个示例插件！'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n        console",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"log"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n          ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'这里表示了资源的单次构建的 `compilation` 对象：'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n          compilation\n        ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n        ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 用 webpack 提供的插件 API 处理构建过程"),"\n        compilation",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"addModule"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* ... */"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n        ",(0,t.kt)("span",{className:"token function",parentName:"code"},"callback"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"))),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"basic-plugin-architecture",parentName:"h2"}),"基本插件架构",(0,t.kt)("a",{href:"#basic-plugin-architecture","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"插件是由「具有 ",(0,t.kt)("inlineCode",{parentName:"p"},"apply")," 方法的 prototype 对象」所实例化出来的。这个 ",(0,t.kt)("inlineCode",{parentName:"p"},"apply")," 方法在安装插件时，会被 webpack compiler 调用一次。",(0,t.kt)("inlineCode",{parentName:"p"},"apply")," 方法可以接收一个 webpack compiler 对象的引用，从而可以在回调函数中访问到 compiler 对象。一个插件结构如下："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"class")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"HelloWorldPlugin")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token function",parentName:"code"},"apply"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"compiler"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    compiler",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"hooks",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"done",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"tap"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n      ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'Hello World Plugin'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n        stats ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"/* 绑定 done 钩子后，stats 会作为参数传入。 */"),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        console",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"log"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'Hello World!'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\nmodule",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," HelloWorldPlugin",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"然后，要安装这个插件，只需要在你的 webpack 配置的 plugin 数组中添加一个实例："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token comment",parentName:"code"},"// webpack.config.js"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"var")," HelloWorldPlugin ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'hello-world'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\nmodule",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// ... 这里是其他配置 ..."),"\n  plugins",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"HelloWorldPlugin"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," options",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token boolean",parentName:"code"},"true")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"使用 ",(0,t.kt)("a",{href:"https://github.com/webpack/schema-utils",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"schema-utils"))," 来校验传入插件的选项。这里是个例子："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," validate ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'schema-utils'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 选项对象的 schema"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," schema ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  type",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'object'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  properties",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    test",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      type",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'string'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"default")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"class")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"HelloWorldPlugin")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token function",parentName:"code"},"constructor"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"options ",(0,t.kt)("span",{className:"token operator",parentName:"span"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"span"},"{"),(0,t.kt)("span",{className:"token punctuation",parentName:"span"},"}")),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token function",parentName:"code"},"validate"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"schema",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," options",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      name",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'Hello World Plugin'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      baseDataPath",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'options'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\n  ",(0,t.kt)("span",{className:"token function",parentName:"code"},"apply"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"compiler"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"))),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"compiler-and-compilation",parentName:"h2"}),"Compiler 和 Compilation",(0,t.kt)("a",{href:"#compiler-and-compilation","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"在插件开发中最重要的两个资源就是 ",(0,t.kt)("a",{href:"/api/node/#compiler-instance",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"compiler"))," 和 ",(0,t.kt)("a",{href:"/api/compilation-hooks/",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"compilation"))," 对象。理解它们的角色是扩展 webpack 引擎重要的第一步。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"class")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"HelloCompilationPlugin")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token function",parentName:"code"},"apply"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"compiler"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 指定一个挂载到 compilation 的钩子，回调函数的参数为 compilation 。"),"\n    compiler",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"hooks",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"compilation",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"tap"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'HelloCompilationPlugin'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"compilation"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 现在可以通过 compilation 对象绑定各种钩子"),"\n      compilation",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"hooks",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"optimize",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"tap"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'HelloCompilationPlugin'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        console",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"log"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'资源已经优化完毕。'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\nmodule",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," HelloCompilationPlugin",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"compiler")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"compilation")," 以及其他重要对象提供的钩子清单，请查看 ",(0,t.kt)("a",{href:"/api/plugins/",parentName:"p"},"plugins API")," 文档。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"async-event-hooks",parentName:"h2"}),"异步编译插件",(0,t.kt)("a",{href:"#async-event-hooks","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"有些插件钩子是异步的。我们可以像同步方式一样用 ",(0,t.kt)("inlineCode",{parentName:"p"},"tap")," 方法来绑定，也可以用 ",(0,t.kt)("inlineCode",{parentName:"p"},"tapAsync")," 或 ",(0,t.kt)("inlineCode",{parentName:"p"},"tapPromise")," 这两个异步方法来绑定。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"tapasync",parentName:"h3"}),"tapAsync",(0,t.kt)("a",{href:"#tapasync","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"当我们用 ",(0,t.kt)("inlineCode",{parentName:"p"},"tapAsync")," 方法来绑定插件时，_必须_调用函数的最后一个参数 ",(0,t.kt)("inlineCode",{parentName:"p"},"callback")," 指定的回调函数。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"class")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"HelloAsyncPlugin")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token function",parentName:"code"},"apply"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"compiler"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    compiler",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"hooks",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"emit",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"tapAsync"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n      ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'HelloAsyncPlugin'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"compilation",(0,t.kt)("span",{className:"token punctuation",parentName:"span"},",")," callback"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 执行某些异步操作..."),"\n        ",(0,t.kt)("span",{className:"token function",parentName:"code"},"setTimeout"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n          console",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"log"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'异步任务完成...'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n          ",(0,t.kt)("span",{className:"token function",parentName:"code"},"callback"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n        ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token number",parentName:"code"},"1000"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\nmodule",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," HelloAsyncPlugin",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("h4",null,(0,t.kt)("span",{id:"tappromise",parentName:"h4"}),"tapPromise",(0,t.kt)("a",{href:"#tappromise","aria-hidden":"true",tabIndex:"-1",parentName:"h4"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"当我们用 ",(0,t.kt)("inlineCode",{parentName:"p"},"tapPromise")," 方法来绑定插件时，_必须_返回一个 pormise ，异步任务完成后 resolve 。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"class")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"HelloAsyncPlugin")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token function",parentName:"code"},"apply"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"compiler"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    compiler",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"hooks",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"emit",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"tapPromise"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'HelloAsyncPlugin'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"compilation"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 返回一个 pormise ，异步任务完成后 resolve"),"\n      ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"Promise"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"resolve",(0,t.kt)("span",{className:"token punctuation",parentName:"span"},",")," reject"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        ",(0,t.kt)("span",{className:"token function",parentName:"code"},"setTimeout"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n          console",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"log"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'异步任务完成...'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n          ",(0,t.kt)("span",{className:"token function",parentName:"code"},"resolve"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n        ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token number",parentName:"code"},"1000"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\nmodule",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," HelloAsyncPlugin",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"example",parentName:"h2"}),"示例",(0,t.kt)("a",{href:"#example","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"一旦我们可以深入理解 webpack compiler 和每个独立的 compilation，我们依赖 webpack 引擎将有无限多的事可以做。我们可以重新格式化已有的文件，创建衍生的文件，或者制作全新的生成文件。"),(0,t.kt)("p",null,"让我们来写一个简单的示例插件，生成一个叫做 ",(0,t.kt)("inlineCode",{parentName:"p"},"assets.md")," 的新文件；文件内容是所有构建生成的文件的列表。这个插件大概像下面这样："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"class")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"FileListPlugin")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"static")," defaultOptions ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    outputFile",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'assets.md'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 需要传入自定义插件构造函数的任意选项"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"//（这是自定义插件的公开API）"),"\n  ",(0,t.kt)("span",{className:"token function",parentName:"code"},"constructor"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"options ",(0,t.kt)("span",{className:"token operator",parentName:"span"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"span"},"{"),(0,t.kt)("span",{className:"token punctuation",parentName:"span"},"}")),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 在应用默认选项前，先应用用户指定选项"),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 合并后的选项暴露给插件方法"),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 记得在这里校验所有选项"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"this"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"options ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"..."),"FileListPlugin",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"defaultOptions",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"..."),"options ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\n  ",(0,t.kt)("span",{className:"token function",parentName:"code"},"apply"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"compiler"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," pluginName ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," FileListPlugin",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"name",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// webpack 模块实例，可以通过 compiler 对象访问，"),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 这样确保使用的是模块的正确版本"),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// （不要直接 require/import webpack）"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," webpack ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," compiler",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// Compilation 对象提供了对一些有用常量的访问。"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," Compilation ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," webpack",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},'// RawSource 是其中一种 “源码”("sources") 类型，'),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 用来在 compilation 中表示资源的源码"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," RawSource ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," webpack",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"sources",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 绑定到 “thisCompilation” 钩子，"),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 以便进一步绑定到 compilation 过程更早期的阶段"),"\n    compiler",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"hooks",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"thisCompilation",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"tap"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"pluginName",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"compilation"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 绑定到资源处理流水线(assets processing pipeline)"),"\n      compilation",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"hooks",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"processAssets",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"tap"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n        ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n          name",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," pluginName",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n\n          ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 用某个靠后的资源处理阶段，"),"\n          ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 确保所有资源已被插件添加到 compilation"),"\n          stage",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," Compilation",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token constant",parentName:"code"},"PROCESS_ASSETS_STAGE_SUMMARIZE"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n        ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n        ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"assets"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n          ",(0,t.kt)("span",{className:"token comment",parentName:"code"},'// "assets" 是一个包含 compilation 中所有资源(assets)的对象。'),"\n          ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 该对象的键是资源的路径，"),"\n          ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 值是文件的源码"),"\n\n          ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 遍历所有资源，"),"\n          ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 生成 Markdown 文件的内容"),"\n          ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," content ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"="),"\n            ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'# In this build:\\n\\n'")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"+"),"\n            Object",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"keys"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"assets",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\n              ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"map"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"filename"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token template-string",parentName:"code"},(0,t.kt)("span",{className:"token template-punctuation string",parentName:"span"},"`"),(0,t.kt)("span",{className:"token string",parentName:"span"},"- "),(0,t.kt)("span",{className:"token interpolation",parentName:"span"},(0,t.kt)("span",{className:"token interpolation-punctuation punctuation",parentName:"span"},"${"),"filename",(0,t.kt)("span",{className:"token interpolation-punctuation punctuation",parentName:"span"},"}")),(0,t.kt)("span",{className:"token template-punctuation string",parentName:"span"},"`")),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\n              ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"join"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'\\n'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n          ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 向 compilation 添加新的资源，"),"\n          ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 这样 webpack 就会自动生成并输出到 output 目录"),"\n          compilation",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"emitAsset"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n            ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"this"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"options",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"outputFile",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n            ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"RawSource"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"content",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),"\n          ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n        ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\nmodule",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," FileListPlugin ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," FileListPlugin ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"require"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'./file-list-plugin.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 在 webpack 配置中使用自定义的插件："),"\nmodule",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// …"),"\n\n  plugins",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 添加插件，使用默认选项"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"FileListPlugin"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 或者:"),"\n\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 使用任意支持的选项"),"\n    ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"FileListPlugin"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      outputFile",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'my-assets.md'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"这样就生成了一个制定名称的 markdown 文件："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-markdown",parentName:"pre"},"# In this build:\n\n- main.css\n- main.js\n- index.html\n")),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},"我们使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"tap()")," 方法来绑定 ",(0,t.kt)("inlineCode",{parentName:"p"},"processAssets")," 钩子，是因为上例中不需要执行任何异步操作。不过 ",(0,t.kt)("inlineCode",{parentName:"p"},"processAssets")," 钩子是一个异步钩子，因此需要的时候也可用 ",(0,t.kt)("inlineCode",{parentName:"p"},"tapPromise()")," 或 ",(0,t.kt)("inlineCode",{parentName:"p"},"tapAsync()")," 方法。")),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},(0,t.kt)("a",{href:"/api/compilation-hooks/#processassets",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"processAssets"))," 钩子还支持 ",(0,t.kt)("inlineCode",{parentName:"p"},"additionalAssets")," 属性，不仅支持自定义插件拦截其他插件在当前阶段之前添加的资源，还支持当前阶段之后添加的资源。这样可以拦截 compilation 中的所有资源。不过这个例子在 ",(0,t.kt)("inlineCode",{parentName:"p"},"SUMMARIZE")," 阶段捕获之前阶段生成的所有资源就够了（因为这些资源就是所有的了）。")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"different-plugin-shapes",parentName:"h2"}),"插件的不同类型",(0,t.kt)("a",{href:"#different-plugin-shapes","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"webpack 插件可以按照它所注册的事件分成不同的类型。每一个事件钩子都预先定义为同步、异步、瀑布或并行钩子，钩子在内部用 call/callAsync 方法调用。支持的钩子清单或可被绑定的钩子清单，通常在 ",(0,t.kt)("inlineCode",{parentName:"p"},"this.hooks")," 属性指定。"),(0,t.kt)("p",null,"例如:"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-javascript",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"this"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"hooks ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  shouldEmit",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"SyncBailHook"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token string",parentName:"code"},"'compilation'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"表示唯一支持的钩子是 ",(0,t.kt)("inlineCode",{parentName:"p"},"shouldEmit")," ，这是一个 ",(0,t.kt)("inlineCode",{parentName:"p"},"SyncBailHook")," 类型的钩子，传入插件的唯一参数是 ",(0,t.kt)("inlineCode",{parentName:"p"},"compilation")," 。"),(0,t.kt)("p",null,"支持的各类型钩子："),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"synchronous-hooks",parentName:"h3"}),"Synchronous(同步) Hooks",(0,t.kt)("a",{href:"#synchronous-hooks","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"SyncHook")),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"通过 ",(0,t.kt)("inlineCode",{parentName:"li"},"new SyncHook([params])")," 定义。"),(0,t.kt)("li",{parentName:"ul"},"用 ",(0,t.kt)("inlineCode",{parentName:"li"},"tap")," 方法绑定。"),(0,t.kt)("li",{parentName:"ul"},"用 ",(0,t.kt)("inlineCode",{parentName:"li"},"call(...params)")," 方法调用。"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Bail(保险) Hooks")),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"通过 ",(0,t.kt)("inlineCode",{parentName:"li"},"new SyncBailHook([params])")," 定义。"),(0,t.kt)("li",{parentName:"ul"},"用 ",(0,t.kt)("inlineCode",{parentName:"li"},"tap")," 方法绑定。"),(0,t.kt)("li",{parentName:"ul"},"用 ",(0,t.kt)("inlineCode",{parentName:"li"},"call(...params)")," 方法调用。")),(0,t.kt)("p",{parentName:"li"},"Bail类型的钩子，其插件回调函数是串行调用，任意一个插件回调函数返回非 undefined 值，则停止执行插件，该值作为钩子的返回值。",(0,t.kt)("inlineCode",{parentName:"p"},"optimizeChunks"),"，",(0,t.kt)("inlineCode",{parentName:"p"},"optimizeChunkModules")," 等很有用的事件都是 SyncBailHooks 。")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Waterfall(瀑布) Hooks")),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"通过 ",(0,t.kt)("inlineCode",{parentName:"li"},"new SyncWaterfallHook([params])")," 定义。"),(0,t.kt)("li",{parentName:"ul"},"用 ",(0,t.kt)("inlineCode",{parentName:"li"},"tap")," 方法绑定。"),(0,t.kt)("li",{parentName:"ul"},"用 ",(0,t.kt)("inlineCode",{parentName:"li"},"call(...params)")," 方法调用。")),(0,t.kt)("p",{parentName:"li"},"该类型的插件是一个接一个串行执行，前一个的返回值作为后一个的入参。插件需要考虑执行的顺序，因为后一个插件必须接受前一个插件执行的结果作为入参。第一个插件的参数为 ",(0,t.kt)("inlineCode",{parentName:"p"},"init")," 。\n所以 waterfall 钩子至少要制定一个参数。这种模式用于和 ",(0,t.kt)("inlineCode",{parentName:"p"},"ModuleTemplate"),"，",(0,t.kt)("inlineCode",{parentName:"p"},"ChunkTemplate")," 等 webpack 模板相关的 Tapable 实例。"))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"asynchronous-hooks",parentName:"h3"}),"Asynchronous(异步) Hooks",(0,t.kt)("a",{href:"#asynchronous-hooks","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Async Series(异步串联) Hook")),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"通过 ",(0,t.kt)("inlineCode",{parentName:"li"},"new AsyncSeriesHook([params])")," 定义。"),(0,t.kt)("li",{parentName:"ul"},"用 ",(0,t.kt)("inlineCode",{parentName:"li"},"tap"),"/",(0,t.kt)("inlineCode",{parentName:"li"},"tapAsync"),"/",(0,t.kt)("inlineCode",{parentName:"li"},"tapPromise")," 方法绑定。"),(0,t.kt)("li",{parentName:"ul"},"用 ",(0,t.kt)("inlineCode",{parentName:"li"},"callAsync(...params)")," 方法调用。")),(0,t.kt)("p",{parentName:"li"},"插件处理函数(handler functions)的参数为所有参数，以及一个签名为 ",(0,t.kt)("inlineCode",{parentName:"p"},"(err?: Error) -> void")," 的 callback 函数，callback 函数的处理函数按注册顺序执行。",(0,t.kt)("inlineCode",{parentName:"p"},"callback")," 在所有处理函数执行完后调用。\n这是 ",(0,t.kt)("inlineCode",{parentName:"p"},"emit")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"run")," 事件的常见使用模式。")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Async waterfall(异步瀑布)")," 插件会用 waterfall 方式异步应用"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"通过 ",(0,t.kt)("inlineCode",{parentName:"li"},"new AsyncWaterfallHook([params])")," 定义。"),(0,t.kt)("li",{parentName:"ul"},"用 ",(0,t.kt)("inlineCode",{parentName:"li"},"tap"),"/",(0,t.kt)("inlineCode",{parentName:"li"},"tapAsync"),"/",(0,t.kt)("inlineCode",{parentName:"li"},"tapPromise")," 方法绑定。"),(0,t.kt)("li",{parentName:"ul"},"用 ",(0,t.kt)("inlineCode",{parentName:"li"},"callAsync(...params)")," 方法调用。")),(0,t.kt)("p",{parentName:"li"},"插件处理函数的参数为当前值，以及一个签名为 ",(0,t.kt)("inlineCode",{parentName:"p"},"(err: Error, nextValue: any) -> void")," 的 callback 函数。调用时 ",(0,t.kt)("inlineCode",{parentName:"p"},"nextValue")," 是下一个处理函数的当前值。第一个处理函数的当前是只 ",(0,t.kt)("inlineCode",{parentName:"p"},"init")," 。当所有 handler 都执行后，callback执行，参数为最后一个值。任一个 handler 传入 ",(0,t.kt)("inlineCode",{parentName:"p"},"err")," 值，停止调用 handler 且 callback 被调用。\n这种模式在 ",(0,t.kt)("inlineCode",{parentName:"p"},"before-resolve")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"after-resolve")," 事件中常见。")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Async Series Bail")),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"通过 ",(0,t.kt)("inlineCode",{parentName:"li"},"new AsyncSeriesBailHook([params])")," 定义。"),(0,t.kt)("li",{parentName:"ul"},"用 ",(0,t.kt)("inlineCode",{parentName:"li"},"tap"),"/",(0,t.kt)("inlineCode",{parentName:"li"},"tapAsync"),"/",(0,t.kt)("inlineCode",{parentName:"li"},"tapPromise")," 方法绑定。"),(0,t.kt)("li",{parentName:"ul"},"用 ",(0,t.kt)("inlineCode",{parentName:"li"},"callAsync(...params)")," 方法调用。"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Async Parallel")),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"通过 ",(0,t.kt)("inlineCode",{parentName:"li"},"new AsyncParallelHook([params])")," 定义。"),(0,t.kt)("li",{parentName:"ul"},"用 ",(0,t.kt)("inlineCode",{parentName:"li"},"tap"),"/",(0,t.kt)("inlineCode",{parentName:"li"},"tapAsync"),"/",(0,t.kt)("inlineCode",{parentName:"li"},"tapPromise")," 方法绑定。"),(0,t.kt)("li",{parentName:"ul"},"用 ",(0,t.kt)("inlineCode",{parentName:"li"},"callAsync(...params)")," 方法调用。")))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"configuration-defaults",parentName:"h3"}),"默认配置",(0,t.kt)("a",{href:"#configuration-defaults","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 先应用插件的默认配置，再应用自身的默认配置。这样可以让插件拥有自己的默认配置，同时支持实现创建预设配置的插件。"))}p.isMDXComponent=!0,e.default=p}}]);