"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2437],{2437:function(e,a,n){n.r(a),n(7378);var t=n(2682);function p(){return p=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},p.apply(this,arguments)}function o(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",p({components:a},n),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"此章节描述 webpack 内部实现，对于插件开发人员可能会提供帮助")),(0,t.kt)("p",null,"打包，是指处理某些文件并将其输出为其他文件的能力。"),(0,t.kt)("p",null,"但是，在输入和输出之间，还包括有 ",(0,t.kt)("a",{href:"/concepts/modules/",parentName:"p"},"模块"),", ",(0,t.kt)("a",{href:"/concepts/entry-points/",parentName:"p"},"入口起点"),", chunk, chunk 组和许多其他中间部分。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"the-main-parts",parentName:"h2"}),"主要部分",(0,t.kt)("a",{href:"#the-main-parts","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"项目中使用的每个文件都是一个 ",(0,t.kt)("a",{href:"/concepts/modules/",parentName:"p"},"模块")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"./index.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," app ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./app.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"./app.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"default")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'the app'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"通过互相引用，这些模块会形成一个图(",(0,t.kt)("inlineCode",{parentName:"p"},"ModuleGraph"),")数据结构。"),(0,t.kt)("p",null,"在打包过程中，模块会被合并成 chunk。\nchunk 合并成 chunk 组，并形成一个通过模块互相连接的图(",(0,t.kt)("inlineCode",{parentName:"p"},"ModuleGraph"),")。\n那么如何通过以上来描述一个入口起点：在其内部，会创建一个只有一个 chunk 的 chunk 组。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"./webpack.config.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  entry",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./index.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"这会创建出一个名为 ",(0,t.kt)("inlineCode",{parentName:"p"},"main")," 的 chunk 组（",(0,t.kt)("inlineCode",{parentName:"p"},"main")," 是入口起点的默认名称）。\n此 chunk 组包含 ",(0,t.kt)("inlineCode",{parentName:"p"},"./index.js")," 模块。随着 parser 处理 ",(0,t.kt)("inlineCode",{parentName:"p"},"./index.js")," 内部的 import 时， 新模块就会被添加到此 chunk 中。"),(0,t.kt)("p",null,"另外的一个示例："),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"./webpack.config.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  entry",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    home",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./home.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    about",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./about.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"这会创建出两个名为 ",(0,t.kt)("inlineCode",{parentName:"p"},"home")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"about")," 的 chunk 组。\n每个 chunk 组都有一个包含一个模块的 chunk：",(0,t.kt)("inlineCode",{parentName:"p"},"./home.js")," 对应 ",(0,t.kt)("inlineCode",{parentName:"p"},"home"),"，",(0,t.kt)("inlineCode",{parentName:"p"},"./about.js")," 对应 ",(0,t.kt)("inlineCode",{parentName:"p"},"about")),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},"一个 chunk 组中可能有多个 chunk。例如，",(0,t.kt)("a",{href:"/plugins/split-chunks-plugin/",parentName:"p"},"SplitChunksPlugin")," 会将一个 chunk 组拆分为一个或多个 chunk。")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"chunks",parentName:"h2"}),"chunk",(0,t.kt)("a",{href:"#chunks","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"chunk 有两种形式："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"initial(初始化)")," 是入口起点的 main chunk。此 chunk 包含为入口起点指定的所有模块及其依赖项。"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"non-initial")," 是可以延迟加载的块。可能会出现在使用 ",(0,t.kt)("a",{href:"/guides/code-splitting/#dynamic-imports",parentName:"li"},"动态导入(dynamic imports)")," 或者 ",(0,t.kt)("a",{href:"/plugins/split-chunks-plugin/",parentName:"li"},"SplitChunksPlugin")," 时。")),(0,t.kt)("p",null,"每个 chunk 都有对应的 ",(0,t.kt)("strong",{parentName:"p"},"asset(资源)"),"。资源，是指输出文件（即打包结果）。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  entry",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./src/index.jsx'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"./src/index.jsx")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," React ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'react'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," ReactDOM ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'react-dom'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token string",parentName:"code"},"'./app.jsx'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"then"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"App"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ReactDOM",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"render"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token operator",parentName:"code"},"<"),"App ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"/"),(0,t.kt)("span",{className:"token operator",parentName:"code"},">"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," root",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"这会创建出一个名为 ",(0,t.kt)("inlineCode",{parentName:"p"},"main")," 的 initial chunk。其中包含："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"./src/index.jsx")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"react")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"react-dom"))),(0,t.kt)("p",null,"以及除 ",(0,t.kt)("inlineCode",{parentName:"p"},"./app.jsx")," 外的所有依赖"),(0,t.kt)("p",null,"然后会为 ",(0,t.kt)("inlineCode",{parentName:"p"},"./app.jsx")," 创建 non-initial chunk，这是因为 ",(0,t.kt)("inlineCode",{parentName:"p"},"./app.jsx")," 是动态导入的。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Output:")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"/dist/main.js")," - 一个 ",(0,t.kt)("inlineCode",{parentName:"li"},"initial")," chunk"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"/dist/394.js")," - ",(0,t.kt)("inlineCode",{parentName:"li"},"non-initial")," chunk")),(0,t.kt)("p",null,"默认情况下，这些 ",(0,t.kt)("inlineCode",{parentName:"p"},"non-initial")," chunk 没有名称，因此会使用唯一 ID 来替代名称。\n在使用动态导入时，我们可以通过使用 ",(0,t.kt)("a",{href:"/api/module-methods/#magic-comments",parentName:"p"},"magic comment(魔术注释)")," 来显式指定 chunk 名称："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"\n  ",(0,t.kt)("span",{className:"token comment",parentName:"code"},'/* webpackChunkName: "app" */'),"\n  ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./app.jsx'"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"then"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token parameter",parentName:"code"},"App"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=>")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ReactDOM",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"render"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token operator",parentName:"code"},"<"),"App ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"/"),(0,t.kt)("span",{className:"token operator",parentName:"code"},">"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," root",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Output:")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"/dist/main.js")," - 一个 ",(0,t.kt)("inlineCode",{parentName:"li"},"initial")," chunk"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"/dist/app.js")," - ",(0,t.kt)("inlineCode",{parentName:"li"},"non-initial")," chunk")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"output",parentName:"h2"}),"output(输出)",(0,t.kt)("a",{href:"#output","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"输出文件的名称会受配置中的两个字段的影响："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{href:"/configuration/output/#outputfilename",parentName:"li"},(0,t.kt)("inlineCode",{parentName:"a"},"output.filename"))," - 用于 ",(0,t.kt)("inlineCode",{parentName:"li"},"initial")," chunk 文件"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{href:"/configuration/output/#outputchunkfilename",parentName:"li"},(0,t.kt)("inlineCode",{parentName:"a"},"output.chunkFilename"))," - 用于 ",(0,t.kt)("inlineCode",{parentName:"li"},"non-initial")," chunk 文件"),(0,t.kt)("li",{parentName:"ul"},"在某些情况下，使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"initial")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"non-initial")," 的 chunk 时，可以使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"output.filename"),"。")),(0,t.kt)("p",null,"这些字段中会有一些 ",(0,t.kt)("a",{href:"/configuration/output/#template-strings",parentName:"p"},"占位符"),"。常用的占位符如下："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"[id]")," - chunk id（例如 ",(0,t.kt)("inlineCode",{parentName:"li"},"[id].js")," -> ",(0,t.kt)("inlineCode",{parentName:"li"},"485.js"),"）"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"[name]")," - chunk name（例如 ",(0,t.kt)("inlineCode",{parentName:"li"},"[name].js")," -> ",(0,t.kt)("inlineCode",{parentName:"li"},"app.js"),"）。如果 chunk 没有名称，则会使用其 id 作为名称"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"[contenthash]")," - 输出文件内容的 md4-hash（例如 ",(0,t.kt)("inlineCode",{parentName:"li"},"[contenthash].js")," -> ",(0,t.kt)("inlineCode",{parentName:"li"},"4ea6ff1de66c537eb9b2.js"),"）")))}o.isMDXComponent=!0,a.default=o}}]);