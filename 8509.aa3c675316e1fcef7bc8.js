"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8509],{8509:function(e,a,t){t.r(a),t(7378);var n=t(2682);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},o.apply(this,arguments)}function s(e){let{components:a,...t}=e;return(0,n.kt)("wrapper",o({components:a},t),(0,n.kt)("p",null,"loader 用于对模块的源代码进行转换。loader 可以使你在 ",(0,n.kt)("inlineCode",{parentName:"p"},"import"),' 或 "load(加载)" 模块时预处理文件。因此，loader 类似于其他构建工具中“任务(task)”，并提供了处理前端构建步骤的得力方式。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript 或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 ',(0,n.kt)("inlineCode",{parentName:"p"},"import")," CSS 文件！"),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"example",parentName:"h2"}),"示例",(0,n.kt)("a",{href:"#example","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"例如，你可以使用 loader 告诉 webpack 加载 CSS 文件，或者将 TypeScript 转为 JavaScript。为此，首先安装相对应的 loader："),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-bash",parentName:"pre"},(0,n.kt)("span",{className:"token function",parentName:"code"},"npm")," ",(0,n.kt)("span",{className:"token function",parentName:"code"},"install")," --save-dev css-loader ts-loader")),(0,n.kt)("p",null,"然后指示 webpack 对每个 ",(0,n.kt)("inlineCode",{parentName:"p"},".css")," 使用 ",(0,n.kt)("a",{href:"/loaders/css-loader",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"css-loader")),"，以及对所有 ",(0,n.kt)("inlineCode",{parentName:"p"},".ts")," 文件使用 ",(0,n.kt)("a",{href:"https://github.com/TypeStrong/ts-loader",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"ts-loader")),"："),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  module",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    rules",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"["),"\n      ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{")," test",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token regex",parentName:"code"},"/\\.css$/"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},",")," use",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'css-loader'")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{")," test",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token regex",parentName:"code"},"/\\.ts$/"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},",")," use",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'ts-loader'")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"using-loaders",parentName:"h2"}),"使用 loader",(0,n.kt)("a",{href:"#using-loaders","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"在你的应用程序中，有两种使用 loader 的方式："),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{href:"#configuration",parentName:"li"},"配置方式"),"（推荐）：在 ",(0,n.kt)("strong",{parentName:"li"},"webpack.config.js")," 文件中指定 loader。"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{href:"#inline",parentName:"li"},"内联方式"),"：在每个 ",(0,n.kt)("inlineCode",{parentName:"li"},"import")," 语句中显式指定 loader。")),(0,n.kt)("p",null,"注意在 webpack v4 版本可以通过 CLI 使用 loader，但是在 webpack v5 中被弃用。"),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"configuration",parentName:"h3"}),"Configuration",(0,n.kt)("a",{href:"#configuration","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,(0,n.kt)("a",{href:"/configuration/module/#modulerules",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"module.rules"))," 允许你在 webpack 配置中指定多个 loader。\n这种方式是展示 loader 的一种简明方式，并且有助于使代码变得简洁和易于维护。同时让你对各个 loader 有个全局概览："),(0,n.kt)("p",null,"loader 从右到左（或从下到上）地取值(evaluate)/执行(execute)。在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。查看 ",(0,n.kt)("a",{href:"/concepts/loaders/#loader-features",parentName:"p"},"loader 功能")," 章节，了解有关 loader 顺序的更多信息。"),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  module",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    rules",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"["),"\n      ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        test",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token regex",parentName:"code"},"/\\.css$/"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n        use",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"["),"\n          ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{")," loader",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'style-loader'")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n          ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n            loader",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'css-loader'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n            options",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n              modules",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token boolean",parentName:"code"},"true"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n            ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n          ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n          ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{")," loader",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'sass-loader'")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n        ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"inline",parentName:"h3"}),"内联方式",(0,n.kt)("a",{href:"#inline","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"可以在 ",(0,n.kt)("inlineCode",{parentName:"p"},"import")," 语句或任何 ",(0,n.kt)("a",{href:"/api/module-methods",parentName:"p"},'与 "import" 方法同等的引用方式')," 中指定 loader。使用 ",(0,n.kt)("inlineCode",{parentName:"p"},"!")," 将资源中的 loader 分开。每个部分都会相对于当前目录解析。"),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"import")," Styles ",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'style-loader!css-loader?modules!./styles.css'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,"通过为内联 ",(0,n.kt)("inlineCode",{parentName:"p"},"import")," 语句添加前缀，可以覆盖 ",(0,n.kt)("a",{href:"/configuration",parentName:"p"},"配置")," 中的所有 loader, preLoader 和 postLoader："),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"使用 ",(0,n.kt)("inlineCode",{parentName:"p"},"!")," 前缀，将禁用所有已配置的 normal loader(普通 loader)"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"import")," Styles ",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'!style-loader!css-loader?modules!./styles.css'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"使用 ",(0,n.kt)("inlineCode",{parentName:"p"},"!!")," 前缀，将禁用所有已配置的 loader（preLoader, loader, postLoader）"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"import")," Styles ",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'!!style-loader!css-loader?modules!./styles.css'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"使用 ",(0,n.kt)("inlineCode",{parentName:"p"},"-!")," 前缀，将禁用所有已配置的 preLoader 和 loader，但是不禁用 postLoaders"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"import")," Styles ",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'-!style-loader!css-loader?modules!./styles.css'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))))),(0,n.kt)("p",null,"选项可以传递查询参数，例如 ",(0,n.kt)("inlineCode",{parentName:"p"},"?key=value&foo=bar"),"，或者一个 JSON 对象，例如 ",(0,n.kt)("inlineCode",{parentName:"p"},'?{"key":"value","foo":"bar"}'),"。"),(0,n.kt)("aside",{className:"tip"},(0,n.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,n.kt)("p",{parentName:"aside"},"尽可能使用 ",(0,n.kt)("inlineCode",{parentName:"p"},"module.rules"),"，因为这样可以减少源码中样板文件的代码量，并且可以在出错时，更快地调试和定位 loader 中的问题。")),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"loader-features",parentName:"h2"}),"loader 特性",(0,n.kt)("a",{href:"#loader-features","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"loader 支持链式调用。链中的每个 loader 会将转换应用在已处理过的资源上。一组链式的 loader 将按照相反的顺序执行。链中的第一个 loader 将其结果（也就是应用过转换后的资源）传递给下一个 loader，依此类推。最后，链中的最后一个 loader，返回 webpack 所期望的 JavaScript。"),(0,n.kt)("li",{parentName:"ul"},"loader 可以是同步的，也可以是异步的。"),(0,n.kt)("li",{parentName:"ul"},"loader 运行在 Node.js 中，并且能够执行任何操作。"),(0,n.kt)("li",{parentName:"ul"},"loader 可以通过 ",(0,n.kt)("inlineCode",{parentName:"li"},"options")," 对象配置（仍然支持使用 ",(0,n.kt)("inlineCode",{parentName:"li"},"query")," 参数来设置选项，但是这种方式已被废弃）。"),(0,n.kt)("li",{parentName:"ul"},"除了常见的通过 ",(0,n.kt)("inlineCode",{parentName:"li"},"package.json")," 的 ",(0,n.kt)("inlineCode",{parentName:"li"},"main")," 来将一个 npm 模块导出为 loader，还可以在 module.rules 中使用 ",(0,n.kt)("inlineCode",{parentName:"li"},"loader")," 字段直接引用一个模块。"),(0,n.kt)("li",{parentName:"ul"},"插件(plugin)可以为 loader 带来更多特性。"),(0,n.kt)("li",{parentName:"ul"},"loader 能够产生额外的任意文件。")),(0,n.kt)("p",null,"可以通过 loader 的预处理函数，为 JavaScript 生态系统提供更多能力。用户现在可以更加灵活地引入细粒度逻辑，例如：压缩、打包、语言转译（或编译）和 ",(0,n.kt)("a",{href:"/loaders",parentName:"p"},"更多其他特性"),"。"),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"resolving-loaders",parentName:"h2"}),"解析 loader",(0,n.kt)("a",{href:"#resolving-loaders","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"loader 遵循标准 ",(0,n.kt)("a",{href:"/concepts/module-resolution/",parentName:"p"},"模块解析")," 规则。多数情况下，loader 将从 ",(0,n.kt)("a",{href:"/concepts/module-resolution/#module-paths",parentName:"p"},"模块路径")," 加载（通常是从 ",(0,n.kt)("inlineCode",{parentName:"p"},"npm install"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"node_modules")," 进行加载）。"),(0,n.kt)("p",null,"我们预期 loader 模块导出为一个函数，并且编写为 Node.js 兼容的 JavaScript。通常使用 npm 进行管理 loader，但是也可以将应用程序中的文件作为自定义 loader。按照约定，loader 通常被命名为 ",(0,n.kt)("inlineCode",{parentName:"p"},"xxx-loader"),"（例如 ",(0,n.kt)("inlineCode",{parentName:"p"},"json-loader"),"）。更多详细信息，请查看 ",(0,n.kt)("a",{href:"/contribute/writing-a-loader/",parentName:"p"},"编写一个 loader"),"。"))}s.isMDXComponent=!0,a.default=s}}]);