"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1062],{1062:function(e,a,n){n.r(a),n(7378);var t=n(2682);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},s.apply(this,arguments)}function p(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",s({components:a},n),(0,t.kt)("aside",{className:"tip"},(0,t.kt)("h6",{className:"tip__prefix",parentName:"aside"},"提示"),(0,t.kt)("p",{parentName:"aside"},"本指南继续沿用 ",(0,t.kt)("a",{href:"/guides/output-management",parentName:"p"},"管理输出")," 中的代码示例。")),(0,t.kt)("p",null,"渐进式网络应用程序(progressive web application - PWA)，是一种可以提供类似于 native app(原生应用程序) 体验的 web app(网络应用程序)。PWA 可以用来做很多事。其中最重要的是，在**离线(offline)**时应用程序能够继续运行功能。这是通过使用名为 ",(0,t.kt)("a",{href:"https://developers.google.com/web/fundamentals/primers/service-workers/",parentName:"p"},"Service Workers")," 的 web 技术来实现的。"),(0,t.kt)("p",null,"本章将重点介绍，如何为我们的应用程序添加离线体验。我们将使用名为 ",(0,t.kt)("a",{href:"https://github.com/GoogleChrome/workbox",parentName:"p"},"Workbox")," 的 Google 项目来实现此目的，该项目提供的工具可帮助我们更简单地为 web app 提供离线支持。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"we-dont-work-offline-now",parentName:"h2"}),"现在，我们并没有运行在离线环境下",(0,t.kt)("a",{href:"#we-dont-work-offline-now","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"到目前为止，我们一直是直接查看本地文件系统的输出结果。通常情况下，真正的用户是通过网络访问 web app；用户的浏览器会与一个提供所需资源（例如，",(0,t.kt)("inlineCode",{parentName:"p"},".html"),", ",(0,t.kt)("inlineCode",{parentName:"p"},".js")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},".css")," 文件）的 ",(0,t.kt)("strong",{parentName:"p"},"server")," 通讯。"),(0,t.kt)("p",null,"我们通过搭建一个拥有更多基础特性的 server 来测试下这种离线体验。这里使用 ",(0,t.kt)("a",{href:"https://www.npmjs.com/package/http-server",parentName:"p"},"http-server")," package：",(0,t.kt)("inlineCode",{parentName:"p"},"npm install http-server --save-dev"),"。还要修改 ",(0,t.kt)("inlineCode",{parentName:"p"},"package.json")," 的 ",(0,t.kt)("inlineCode",{parentName:"p"},"scripts")," 部分，来添加一个 ",(0,t.kt)("inlineCode",{parentName:"p"},"start")," script："),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"package.json")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},"{\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," ...\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},' "scripts": {\n')),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},'    "build": "webpack"\n')),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},'    "build": "webpack",\n'),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},'    "start": "http-server dist"\n')),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," },\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," ...\n")),"}")),(0,t.kt)("p",null,"注意：默认情况下，",(0,t.kt)("a",{href:"/configuration/dev-server/",parentName:"p"},"webpack DevServer")," 会写入到内存。我们需要启用 ",(0,t.kt)("a",{href:"/configuration/dev-server/#devserverdevmiddleware",parentName:"p"},"devserverdevmiddleware.writeToDisk")," 配置项，来让 http-server 处理 ",(0,t.kt)("inlineCode",{parentName:"p"},"./dist")," 目录中的文件。"),(0,t.kt)("p",null,"如果你之前没有操作过，先得运行命令 ",(0,t.kt)("inlineCode",{parentName:"p"},"npm run build")," 来构建你的项目。然后运行命令 ",(0,t.kt)("inlineCode",{parentName:"p"},"npm start"),"。应该产生以下输出："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-bash",parentName:"pre"},(0,t.kt)("span",{className:"token operator",parentName:"code"},">")," http-server dist\n\nStarting up http-server, serving dist\nAvailable on:\n  http://xx.x.x.x:8080\n  http://127.0.0.1:8080\n  http://xxx.xxx.x.x:8080\nHit CTRL-C to stop the server")),(0,t.kt)("p",null,"如果你打开浏览器访问 ",(0,t.kt)("inlineCode",{parentName:"p"},"http://localhost:8080")," (即 ",(0,t.kt)("inlineCode",{parentName:"p"},"http://127.0.0.1"),")，你应该会看到 webpack 应用程序被 serve 到 ",(0,t.kt)("inlineCode",{parentName:"p"},"dist")," 目录。如果停止 server 然后刷新，则 webpack 应用程序不再可访问。"),(0,t.kt)("p",null,"这就是我们为实现离线体验所需要的改变。在本章结束时，我们应该要实现的是，停止 server 然后刷新，仍然可以看到应用程序正常运行。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"adding-workbox",parentName:"h2"}),"添加 Workbox",(0,t.kt)("a",{href:"#adding-workbox","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"添加 workbox-webpack-plugin 插件，然后调整 ",(0,t.kt)("inlineCode",{parentName:"p"},"webpack.config.js")," 文件："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-bash",parentName:"pre"},(0,t.kt)("span",{className:"token function",parentName:"code"},"npm")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"install")," workbox-webpack-plugin --save-dev")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," const path = require('path');\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," const HtmlWebpackPlugin = require('html-webpack-plugin');\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," const WorkboxPlugin = require('workbox-webpack-plugin');\n")),"\n",(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," module.exports = {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   entry: {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"     app: './src/index.js',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"     print: './src/print.js',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   },\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   plugins: [\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"     new HtmlWebpackPlugin({\n")),(0,t.kt)("span",{className:"token deleted-sign deleted",parentName:"code"},(0,t.kt)("span",{className:"token prefix deleted",parentName:"span"},"-"),(0,t.kt)("span",{className:"token line",parentName:"span"},"       title: 'Output Management',\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"       title: 'Progressive Web Application',\n")),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"     }),\n")),(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     new WorkboxPlugin.GenerateSW({\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"       // 这些选项帮助快速启用 ServiceWorkers\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"       // 不允许遗留任何“旧的” ServiceWorkers\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"       clientsClaim: true,\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"       skipWaiting: true,\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     }),\n")),(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   ],\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   output: {\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"     filename: '[name].bundle.js',\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"     path: path.resolve(__dirname, 'dist'),\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"     clean: true,\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"},"   },\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," };")))),(0,t.kt)("p",null,"完成这些设置，再次执行 ",(0,t.kt)("inlineCode",{parentName:"p"},"npm run build"),"，看下会发生什么："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-bash",parentName:"pre"},(0,t.kt)("span",{className:"token punctuation",parentName:"code"},".."),".\n                  Asset       Size  Chunks                    Chunk Names\n          app.bundle.js     ",(0,t.kt)("span",{className:"token number",parentName:"code"},"545")," kB    ",(0,t.kt)("span",{className:"token number",parentName:"code"},"0"),", ",(0,t.kt)("span",{className:"token number",parentName:"code"},"1"),"  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"big",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"  app\n        print.bundle.js    ",(0,t.kt)("span",{className:"token number",parentName:"code"},"2.74")," kB       ",(0,t.kt)("span",{className:"token number",parentName:"code"},"1"),"  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"         print\n             index.html  ",(0,t.kt)("span",{className:"token number",parentName:"code"},"254")," bytes          ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\nprecache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js  ",(0,t.kt)("span",{className:"token number",parentName:"code"},"268")," bytes          ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\n      service-worker.js       ",(0,t.kt)("span",{className:"token number",parentName:"code"},"1")," kB          ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"emitted",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},".."),".")),(0,t.kt)("p",null,"现在你可以看到，生成了两个额外的文件：",(0,t.kt)("inlineCode",{parentName:"p"},"service-worker.js")," 和名称冗长的 ",(0,t.kt)("inlineCode",{parentName:"p"},"precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js"),"。",(0,t.kt)("inlineCode",{parentName:"p"},"service-worker.js")," 是 Service Worker 文件，",(0,t.kt)("inlineCode",{parentName:"p"},"precache-manifest.b5ca1c555e832d6fbf9462efd29d27eb.js")," 是 ",(0,t.kt)("inlineCode",{parentName:"p"},"service-worker.js")," 引用的文件，所以它也可以运行。你本地生成的文件可能会有所不同；但是应该会有一个 ",(0,t.kt)("inlineCode",{parentName:"p"},"service-worker.js")," 文件。"),(0,t.kt)("p",null,"所以，值得高兴的是，我们现在已经创建出一个 Service Worker。接下来该做什么？"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"registering-our-service-worker",parentName:"h2"}),"注册 Service Worker",(0,t.kt)("a",{href:"#registering-our-service-worker","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"接下来我们注册 Service Worker，使其出场并开始表演。通过添加以下注册代码来完成此操作："),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"index.js")),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-diff",parentName:"pre"},(0,t.kt)("span",{className:"token unchanged",parentName:"code"},(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," import _ from 'lodash';\n"),(0,t.kt)("span",{className:"token prefix unchanged",parentName:"span"}," "),(0,t.kt)("span",{className:"token line",parentName:"span"}," import printMe from './print.js';\n")),"\n",(0,t.kt)("span",{className:"token inserted-sign inserted",parentName:"code"},(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," if ('serviceWorker' in navigator) {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   window.addEventListener('load', () => {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     navigator.serviceWorker.register('/service-worker.js').then(registration => {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"       console.log('SW registered: ', registration);\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     }).catch(registrationError => {\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"       console.log('SW registration failed: ', registrationError);\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"     });\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"},"   });\n"),(0,t.kt)("span",{className:"token prefix inserted",parentName:"span"},"+"),(0,t.kt)("span",{className:"token line",parentName:"span"}," }")))),(0,t.kt)("p",null,"再次运行 ",(0,t.kt)("inlineCode",{parentName:"p"},"npm run build")," 来构建包含注册代码版本的应用程序。然后用 ",(0,t.kt)("inlineCode",{parentName:"p"},"npm start")," 启动服务。访问 ",(0,t.kt)("inlineCode",{parentName:"p"},"http://localhost:8080")," 并查看 console 控制台。在那里你应该看到："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-bash",parentName:"pre"},"SW registered")),(0,t.kt)("p",null,"现在来进行测试。停止 server 并刷新页面。如果浏览器能够支持 Service Worker，应该可以看到你的应用程序还在正常运行。然而，server 已经",(0,t.kt)("strong",{parentName:"p"},"停止")," serve 整个 dist 文件夹，此刻是 Service Worker 在进行 serve。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"conclusion",parentName:"h2"}),"结论",(0,t.kt)("a",{href:"#conclusion","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"你已经使用 Workbox 项目构建了一个离线应用程序。开始进入将 web app 改造为 PWA 的旅程。你现在可能想要考虑下一步做什么。",(0,t.kt)("a",{href:"https://web.dev/progressive-web-apps/",parentName:"p"},"这里"),"是可以帮助到你解决下一步问题的比较不错的资源。"))}p.isMDXComponent=!0,a.default=p}}]);