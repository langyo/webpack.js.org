"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3781],{3781:function(a,e,t){t.r(e),t(7378);var n=t(2682);function p(){return p=Object.assign?Object.assign.bind():function(a){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(a[n]=t[n])}return a},p.apply(this,arguments)}function s(a){let{components:e,...t}=a;return(0,n.kt)("wrapper",p({components:e},t),(0,n.kt)("p",null,(0,n.kt)("a",{href:"/configuration/output/#outputpublicpath",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"publicPath"))," 配置选项在各种场景中都非常有用。你可以通过它来指定应用程序中所有资源的基础路径。"),(0,n.kt)("h2",null,(0,n.kt)("span",{id:"use-cases",parentName:"h2"}),"示例",(0,n.kt)("a",{href:"#use-cases","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"下面提供一些用于实际应用程序的示例，通过这些示例，此功能显得极其简单。实质上，发送到 ",(0,n.kt)("inlineCode",{parentName:"p"},"output.path")," 目录的每个文件，都将从 ",(0,n.kt)("inlineCode",{parentName:"p"},"output.publicPath")," 位置引用。这也包括（通过 ",(0,n.kt)("a",{href:"/guides/code-splitting/",parentName:"p"},"代码分离")," 创建的）子 chunk 和作为依赖图一部分的所有其他资源（例如 image, font 等）。"),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"environment-based",parentName:"h3"}),"基于环境设置",(0,n.kt)("a",{href:"#environment-based","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"在开发环境中，我们通常有一个 ",(0,n.kt)("inlineCode",{parentName:"p"},"assets/")," 文件夹，它与索引页面位于同一级别。这没太大问题，但是，如果我们将所有静态资源托管至 CDN，然后想在生产环境中使用呢？"),(0,n.kt)("p",null,"想要解决这个问题，可以直接使用一个有着悠久历史的 environment variable(环境变量)。假设我们有一个变量 ",(0,n.kt)("inlineCode",{parentName:"p"},"ASSET_PATH"),"："),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,n.kt)("span",{className:"token keyword",parentName:"code"},"import")," webpack ",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'webpack'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,n.kt)("span",{className:"token comment",parentName:"code"},"// 尝试使用环境变量，否则使用根路径"),"\n",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"const")," ",(0,n.kt)("span",{className:"token constant",parentName:"code"},"ASSET_PATH")," ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," process",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"env",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token constant",parentName:"code"},"ASSET_PATH")," ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"||")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'/'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"default")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  output",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    publicPath",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token constant",parentName:"code"},"ASSET_PATH"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n\n  plugins",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"["),"\n    ",(0,n.kt)("span",{className:"token comment",parentName:"code"},"// 这可以帮助我们在代码中安全地使用环境变量"),"\n    ",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,n.kt)("span",{className:"token class-name",parentName:"code"},"webpack",(0,n.kt)("span",{className:"token punctuation",parentName:"span"},"."),"DefinePlugin"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'process.env.ASSET_PATH'"),(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token constant",parentName:"code"},"JSON"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token function",parentName:"code"},"stringify"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,n.kt)("span",{className:"token constant",parentName:"code"},"ASSET_PATH"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"on-the-fly",parentName:"h3"}),"在运行时设置",(0,n.kt)("a",{href:"#on-the-fly","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"另一个可能出现的情况是，需要在运行时设置 ",(0,n.kt)("inlineCode",{parentName:"p"},"publicPath"),"。webpack 暴露了一个名为 ",(0,n.kt)("inlineCode",{parentName:"p"},"__webpack_public_path__")," 的全局变量。所以在应用程序的 entry point 中，可以直接如下设置："),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"__webpack_public_path__ ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," process",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"env",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,n.kt)("span",{className:"token constant",parentName:"code"},"ASSET_PATH"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,"这些内容就是你所需要的。由于我们已经在配置中使用了 ",(0,n.kt)("inlineCode",{parentName:"p"},"DefinePlugin"),"，\n",(0,n.kt)("inlineCode",{parentName:"p"},"process.env.ASSET_PATH")," 将始终都被定义，\n因此我们可以安全地使用。"),(0,n.kt)("aside",{className:"warning"},(0,n.kt)("h6",{className:"warning__prefix",parentName:"aside"},"警告"),(0,n.kt)("p",{parentName:"aside"},"注意，如果在 entry 文件中使用 ES2015 module import，则会在 import 之后进行 ",(0,n.kt)("inlineCode",{parentName:"p"},"__webpack_public_path__")," 赋值。在这种情况下，你必须将 public path 赋值移至一个专用模块中，然后将它的 import 语句放置到 entry.js 最上面：")),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,n.kt)("span",{className:"token comment",parentName:"code"},"// entry.js"),"\n",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'./public-path'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,n.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'./app'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("h3",null,(0,n.kt)("span",{id:"Automatic-publicPath-automaticpublicPath",parentName:"h3"}),"Automatic publicPath $#automaticpublicPath$",(0,n.kt)("a",{href:"#Automatic-publicPath-automaticpublicPath","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,n.kt)("span",{className:"header-link",parentName:"a"}))),(0,n.kt)("p",null,"有可能你事先不知道 publicPath 是什么，webpack 会自动根据 ",(0,n.kt)("a",{href:"/api/module-variables/#importmetaurl",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"import.meta.url")),"、",(0,n.kt)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"document.currentScript")),"、",(0,n.kt)("inlineCode",{parentName:"p"},"script.src")," 或者 ",(0,n.kt)("inlineCode",{parentName:"p"},"self.location")," 变量设置 publicPath。你需要做的是将 ",(0,n.kt)("a",{href:"/configuration/output/#outputpublicpath",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"output.publicPath"))," 设为 ",(0,n.kt)("inlineCode",{parentName:"p"},"'auto'"),"："),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"webpack.config.js")),(0,n.kt)("pre",null,(0,n.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,n.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  output",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    publicPath",(0,n.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,n.kt)("span",{className:"token string",parentName:"code"},"'auto'"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,n.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,n.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,n.kt)("p",null,"请注意在某些情况下不支持 ",(0,n.kt)("inlineCode",{parentName:"p"},"document.currentScript"),"，例如：IE 浏览器，你不得不引入一个 polyfill，例如 ",(0,n.kt)("a",{href:"https://github.com/amiller-gh/currentScript-polyfill",parentName:"p"},(0,n.kt)("inlineCode",{parentName:"a"},"currentScript Polyfill")),"。"))}s.isMDXComponent=!0,e.default=s}}]);