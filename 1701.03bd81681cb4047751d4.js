"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1701],{1701:function(e,a,n){n.r(a),n(7378);var t=n(2682);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},l.apply(this,arguments)}function i(e){let{components:a,...n}=e;return(0,t.kt)("wrapper",l({components:a},n),(0,t.kt)("p",null,'Webpack 4 于 2018 年 2 月发布。\n从那时起，我们在没有重大更新的情况下，推出了很多功能。\n我们知道，人们不喜欢带有突破性的重大变化。\n尤其是 webpack，人们通常一年只接触两次，剩下的时间就 "只管用 "了。\n但是，在不做突破性改动的情况下推出功能也是有成本的：\n我们不能做重大的 API 或架构改进。'),(0,t.kt)("p",null,"所以时不时就会有一个点，困难堆积起来，我们不得不做突破性的改动，才不至于把一切都搞乱。\n这时候就需要一个新的主要版本了。\n所以 webpack 5 包含了这些架构上的改进，以及没有这些改进就不可能实现的功能。"),(0,t.kt)("p",null,"这个主要版本也是修改一些默认值的机会，并与此同时出现的建议和规范保持一致。"),(0,t.kt)("p",null,"所以今天（2020-10-10）webpack 5.0.0 发布了，但这并不意味着它已经完成了，没有 bug，甚至功能完整。\n就像 webpack 4 一样，我们通过修复问题以及增加新特性来延续开发。\n在接下来的日子里，可能会有很多 bug 修复。新特性可能也会出现。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"common-questions",parentName:"h2"}),"疑问解答",(0,t.kt)("a",{href:"#common-questions","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"so-what-does-the-release-mean",parentName:"h3"}),"那么发布意味着什么呢？",(0,t.kt)("a",{href:"#so-what-does-the-release-mean","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"这意味着我们完成了重大的变更。\n许多重构已经完成，以提高架构的水平，并为未来的功能（和当前的功能）创建一个良好的基础。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"so-when-is-the-time-to-upgrade",parentName:"h3"}),"那么什么时候是升级的时候呢？",(0,t.kt)("a",{href:"#so-when-is-the-time-to-upgrade","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"这要看情况。有一个很好的机会，升级失败，你需要给它第二次或第三次尝试。\n如果你愿意的话，现在就尝试升级，并向 webpack、插件和加载器提供反馈。\n我们很想解决这些问题。总得有人开始，而你将是第一批受益者之一。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"sponsoring-update",parentName:"h2"}),"赞助情况",(0,t.kt)("a",{href:"#sponsoring-update","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 是完全基于",(0,t.kt)("a",{href:"https://opencollective.com/webpack",parentName:"p"},"赞助"),"的。\n它不像其他一些开源项目那样与大公司挂钩（并由其支付费用）。\n99% 的赞助收入是根据贡献者和维护者的贡献来分配的。\n我们相信将这些钱投资于使 webpack 变得更好。"),(0,t.kt)("p",null,"但是由于疫情的原因，公司已经不怎么愿意赞助了。\n在这种情况下，Webpack 也受到了影响（就像许多其他公司和人一样）。"),(0,t.kt)("p",null,"我们从来没有能力支付给我们的贡献者我们认为他们应得的金额，但现在我们只有一半的钱，所以我们需要更严重的削减。\n在情况好转之前，我们将只向贡献者和维护者支付前 10 天或每个月的工资。\n其余的日子，他们可以自愿工作，由雇主支付工资，从事其他工作，或者休息一些日子。\n这样我们就可以在前 10 天的工作中支付更多相当于投入时间的报酬。"),(0,t.kt)("p",null,"我们最感激的是 ",(0,t.kt)("a",{href:"https://tech.trivago.com/opensource",parentName:"p"},"trivago"),"，他们在过去的 3 年里为 webpack 提供了大量的赞助。\n遗憾的是，由于受到 Covid-19 的冲击，他们今年无法继续赞助了。\n希望有其他公司站出来，跟随这些（巨头）的脚步。"),(0,t.kt)("p",null,"感谢所有的赞助者。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"general-direction",parentName:"h2"}),"整体方向",(0,t.kt)("a",{href:"#general-direction","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"这个版本的重点在于以下几点。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"尝试用持久性缓存来提高构建性能。"),(0,t.kt)("li",{parentName:"ul"},"尝试用更好的算法和默认值来改进长期缓存。"),(0,t.kt)("li",{parentName:"ul"},"尝试用更好的 Tree Shaking 和代码生成来改善包大小。"),(0,t.kt)("li",{parentName:"ul"},"尝试改善与网络平台的兼容性。"),(0,t.kt)("li",{parentName:"ul"},"尝试在不引入任何破坏性变化的情况下，清理那些在实现 v4 功能时处于奇怪状态的内部结构。"),(0,t.kt)("li",{parentName:"ul"},"试图通过现在引入突破性的变化来为未来的功能做准备，使其能够尽可能长时间地保持在 v5 版本上。")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"migration-guide",parentName:"h2"}),(0,t.kt)("strong",{parentName:"h2"},"迁移"),"指南",(0,t.kt)("a",{href:"#migration-guide","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("a",{href:"/migrate/5",parentName:"p"},"在这里可查阅",(0,t.kt)("strong",{parentName:"a"},"迁移"),"指南")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"major-changes-removals",parentName:"h2"}),"重大变更: 功能清除",(0,t.kt)("a",{href:"#major-changes-removals","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"removed-deprecated-items",parentName:"h3"}),"清理弃用的能力",(0,t.kt)("a",{href:"#removed-deprecated-items","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"所有在 v4 中被废弃的能力都被移除。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),": 确保你的 webpack 4 构建没有打印废弃警告。"),(0,t.kt)("p",null,"以下是一些被移除但在 v4 中没有废弃警告的东西："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"IgnorePlugin 和 BannerPlugin 现在必须只传递一个参数，这个参数可以是对象、字符串或函数。")),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"deprecation-codes",parentName:"h3"}),"废弃代码",(0,t.kt)("a",{href:"#deprecation-codes","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"新的弃用包括一个弃用代码，这样他们更容易被引用。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"syntax-deprecated",parentName:"h3"}),"语法废弃",(0,t.kt)("a",{href:"#syntax-deprecated","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"require.include"),"已被废弃，使用时默认会发出警告。"),(0,t.kt)("p",null,"可以通过 ",(0,t.kt)("inlineCode",{parentName:"p"},"Rule.parser.requireInclude")," 将行为改为允许、废弃或禁用。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"automatic-nodejs-polyfills-removed",parentName:"h3"}),"不再为 Node.js 模块 自动引用 Polyfills",(0,t.kt)("a",{href:"#automatic-nodejs-polyfills-removed","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"在早期，webpack 的目的是为了让大多数的 Node.js 模块运行在浏览器中，但如今模块的格局已经发生了变化，现在许多模块主要是为前端而编写。Webpack <= 4 的版本中提供了许多 Node.js 核心模块的 polyfills，一旦某个模块引用了任何一个核心模块（如 ",(0,t.kt)("inlineCode",{parentName:"p"},"cypto")," 模块），webpack 就会自动引用这些 polyfills。"),(0,t.kt)("p",null,"尽管这会使得使用为 Node.js 编写模块变得容易，但它在构建时给 bundle 附加了庞大的 polyfills。在大部分情况下，这些 polyfills 并非必须。"),(0,t.kt)("p",null,"从 Webpack 5 开始不再自动填充这些 polyfills，而会专注于前端模块兼容。我们的目标是提高 web 平台的兼容性。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"尽量使用前端兼容的模块。"),(0,t.kt)("li",{parentName:"ul"},"可以手动为 Node.js 核心模块添加 polyfill。错误提示会告诉你如何实现。"),(0,t.kt)("li",{parentName:"ul"},"Package 作者：在 ",(0,t.kt)("inlineCode",{parentName:"li"},"package.json")," 中添加 ",(0,t.kt)("inlineCode",{parentName:"li"},"browser")," 字段，使 package 与前端兼容。为浏览器提供其他的实现/dependencies。")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"major-changes-long-term-caching",parentName:"h2"}),"重大变更：长期缓存",(0,t.kt)("a",{href:"#major-changes-long-term-caching","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"deterministic-chunk-module-ids-and-export-names",parentName:"h3"}),"确定的 Chunk、模块 ID 和导出名称",(0,t.kt)("a",{href:"#deterministic-chunk-module-ids-and-export-names","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"新增了长期缓存的算法。这些算法在生产模式下是默认启用的。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},'chunkIds: "deterministic"'),"\n",(0,t.kt)("inlineCode",{parentName:"p"},'moduleIds: "deterministic"'),"\n",(0,t.kt)("inlineCode",{parentName:"p"},'mangleExports: "deterministic"')),(0,t.kt)("p",null,"该算法以确定性的方式为模块和分块分配短的（3 或 5 位）数字 ID，\n这是包大小和长期缓存之间的一种权衡。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"moduleIds/chunkIds/mangleExports: false")," 禁用默认行为，你可以通过插件提供一个自定义算法。请注意，在 webpack 4 中，",(0,t.kt)("inlineCode",{parentName:"p"},"moduleIds/chunkIds: false")," 如果没有自定义插件，则可以正常运行，而在 webpack 5 中，你必须提供一个自定义插件。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：最好使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"chunkIds"),"、",(0,t.kt)("inlineCode",{parentName:"p"},"moduleIds")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"mangleExports")," 的默认值。你也可以选择使用旧的默认值",(0,t.kt)("inlineCode",{parentName:"p"},'chunkIds: "size"，moduleIds: "size", mangleExports: "size"'),"，这将会生成更小的包，但为了缓存，会更频繁地将其失效。"),(0,t.kt)("p",null,"注意：在 webpack 4 中，散列的模块 id 会导致 gzip 性能降低。这与模块顺序的改变有关，已经被修正。"),(0,t.kt)("p",null,"注意：在 webpack 5 中，",(0,t.kt)("inlineCode",{parentName:"p"},"deterministic")," Ids 在生产模式下是默认启用的。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"real-content-hash",parentName:"h3"}),"真正的内容哈希",(0,t.kt)("a",{href:"#real-content-hash","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"当使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"[contenthash]"),' 时，Webpack 5 将使用真正的文件内容哈希值。之前它 "只" 使用内部结构的哈希值。\n当只有注释被修改或变量被重命名时，这对长期缓存会有积极影响。这些变化在压缩后是不可见的。'),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"major-changes-development-support",parentName:"h2"}),"重大变更：开发支持",(0,t.kt)("a",{href:"#major-changes-development-support","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"named-chunk-ids",parentName:"h3"}),"命名代码块 ID",(0,t.kt)("a",{href:"#named-chunk-ids","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"在开发模式下，默认启用的新命名代码块 ID 算法为模块（和文件名）提供了人类可读的名称。\n模块 ID 由其路径决定，相对于 ",(0,t.kt)("inlineCode",{parentName:"p"},"context"),"。\n代码块 ID 由代码块的内容决定。"),(0,t.kt)("p",null,"所以你不再需要使用",(0,t.kt)("inlineCode",{parentName:"p"},'import(/* webpackChunkName: "name" */ "module")'),"来调试。\n但如果你想控制生产环境的文件名，还是有意义的。"),(0,t.kt)("p",null,"可以在生产环境中使用 ",(0,t.kt)("inlineCode",{parentName:"p"},'chunkIds: "named"')," 在生产环境中使用，但要确保不要不小心暴露模块名的敏感信息。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：如果你不喜欢在开发中改变文件名，你可以通过 ",(0,t.kt)("inlineCode",{parentName:"p"},'chunkIds: "natural"')," 来使用旧的数字模式。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"module-federation",parentName:"h3"}),"模块联邦",(0,t.kt)("a",{href:"#module-federation","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,'Webpack 5 增加了一个新的功能 "模块联邦"，它允许多个 webpack 构建一起工作。\n从运行时的角度来看，多个构建的模块将表现得像一个巨大的连接模块图。\n从开发者的角度来看，模块可以从指定的远程构建中导入，并以最小的限制来使用。'),(0,t.kt)("p",null,"更多细节请参见",(0,t.kt)("a",{href:"/concepts/module-federation",parentName:"p"},"本单独指南"),"。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"major-changes-new-web-platform-features",parentName:"h2"}),"重大变更：支持崭新的 Web 平台特性",(0,t.kt)("a",{href:"#major-changes-new-web-platform-features","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"json-modules",parentName:"h3"}),"JSON 模块",(0,t.kt)("a",{href:"#json-modules","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"JSON 模块现在与提案保持一致，并在使用非默认导出时发出警告。\n当从严格的 ECMAScript 模块导入时，JSON 模块不再有命名的导出。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),": 使用默认导出。"),(0,t.kt)("p",null,"即使使用默认导出，未使用的属性也会被 ",(0,t.kt)("inlineCode",{parentName:"p"},"optimization.usedExports")," 优化丢弃，属性会被 ",(0,t.kt)("inlineCode",{parentName:"p"},"optimization.mangleExports")," 优化打乱。"),(0,t.kt)("p",null,"可以在 ",(0,t.kt)("inlineCode",{parentName:"p"},"Rule.parser.parse")," 中指定一个自定义的 JSON 解析器来导入类似 JSON 的文件（例如针对 toml、yaml、json5 等）。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"importmeta",parentName:"h3"}),"import.meta",(0,t.kt)("a",{href:"#importmeta","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"import.meta.webpackHot")," 是 ",(0,t.kt)("inlineCode",{parentName:"li"},"module.hot")," 的别名，在严格的 ESM 中也可以使用。"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"import.meta.webpack")," 是 webpack 的主要版本号。"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"import.meta.url")," 是当前文件的 ",(0,t.kt)("inlineCode",{parentName:"li"},"file:")," url(类似于",(0,t.kt)("inlineCode",{parentName:"li"},"__filename"),"，但作为文件 url)。")),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"asset-modules",parentName:"h3"}),"资源模块",(0,t.kt)("a",{href:"#asset-modules","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 5 现在已经对表示资源的模块提供了内置支持。\n这些模块可以向输出文件夹发送一个文件，或者向 javascript 包注入一个 DataURI。\n无论哪种方式，它们都会给出一个 URL 来工作。"),(0,t.kt)("p",null,"它们可以通过多种方式被使用："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},'import url from "./image.png"')," 和 在",(0,t.kt)("inlineCode",{parentName:"li"},"module.rule")," 中设置 ",(0,t.kt)("inlineCode",{parentName:"li"},'type: "asset"')," 当匹配这样的导入时。(老方法)"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},'new URL("./image.png", import.meta.url)')," (新方式)")),(0,t.kt)("p",null,'选择 "新的方式 "语法是为了允许在没有打包工具的情况下运行代码。这种语法也可以在浏览器中的原生 ECMAScript 模块中使用。'),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"native-worker-support",parentName:"h3"}),"原生 Worker 支持",(0,t.kt)("a",{href:"#native-worker-support","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"当把资源的 ",(0,t.kt)("inlineCode",{parentName:"p"},"new URL")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"new Worker"),"/",(0,t.kt)("inlineCode",{parentName:"p"},"new SharedWorker"),"/",(0,t.kt)("inlineCode",{parentName:"p"},"navigator.serviceWorker.register")," 结合起来时，webpack 会自动为 web worker 创建一个新的入口点（entrypoint）。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},'new Worker(new URL("./worker.js", import.meta.url))')),(0,t.kt)("p",null,"选择这种语法也是为了允许在没有打包工具的情况下运行代码。这种语法在浏览器的原生 ECMAScript 模块中也可以使用。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"uris",parentName:"h3"}),"URIs",(0,t.kt)("a",{href:"#uris","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 5 支持在请求中处理协议。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"支持",(0,t.kt)("inlineCode",{parentName:"li"},"data:"),"。支持 Base64 或原始编码。Mimetype 可以在",(0,t.kt)("inlineCode",{parentName:"li"},"module.rule"),"中被映射到加载器和模块类型。例如：",(0,t.kt)("inlineCode",{parentName:"li"},'import x from "data:text/javascript,export default 42"'),"。"),(0,t.kt)("li",{parentName:"ul"},"支持",(0,t.kt)("inlineCode",{parentName:"li"},"file:"),"。"),(0,t.kt)("li",{parentName:"ul"},"支持",(0,t.kt)("inlineCode",{parentName:"li"},"http(s):"),"，但需要通过",(0,t.kt)("inlineCode",{parentName:"li"},"new webpack.experiments.s schemesHttp(s)UriPlugin()"),"选择加入。",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},'默认情况下，当目标为 "web "时，这些 URI 会导致对外部资源的请求（它们是外部资源）。')))),(0,t.kt)("p",null,"支持请求中的片段。例如：",(0,t.kt)("inlineCode",{parentName:"p"},"./file.js#fragment"),"。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"async-modules",parentName:"h3"}),"异步模块",(0,t.kt)("a",{href:"#async-modules","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,'Webpack 5 支持所谓的 "异步模块"。\n这些模块并不是同步解析的，而是基于异步和 Promise 的。'),(0,t.kt)("p",null,'通过 "import "导入它们会被自动处理，不需要额外的语法，而且几乎看不出区别。'),(0,t.kt)("p",null,"通过",(0,t.kt)("inlineCode",{parentName:"p"},"require()"),"导入它们会返回一个解析到导出的 Promise。"),(0,t.kt)("p",null,"在 webpack 中，有多种方式来拥有异步模块。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"异步的外部资源(async externals)"),(0,t.kt)("li",{parentName:"ul"},"新规范中的 WebAssembly 模块"),(0,t.kt)("li",{parentName:"ul"},"使用顶层 Await 的 ECMAScript 模块。")),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"externals",parentName:"h3"}),"外部资源",(0,t.kt)("a",{href:"#externals","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 5 增加了更多的外部类型来覆盖更多的应用："),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"promise"),": 一个评估为 Promise 的表达式。外部模块是一个异步模块，解析值作为模块导出使用。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"import"),"。原生的 ",(0,t.kt)("inlineCode",{parentName:"p"},"import()")," 用于加载指定的请求，外部模块是一个异步模块，解析值作为模块导出。外部模块是一个异步模块。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"module"),": 尚未实现，但计划通过 ",(0,t.kt)("inlineCode",{parentName:"p"},'import x from "..."')," 加载模块。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"script"),": 通过 ",(0,t.kt)("inlineCode",{parentName:"p"},"<script>")," 标签加载一个 url，并从一个全局变量（以及它的可选属性）中获取输出。外部模块是一个异步模块。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"major-changes-new-nodejs-ecosystem-features",parentName:"h2"}),"重大变更：支持全新的 Node.js 生态特性",(0,t.kt)("a",{href:"#major-changes-new-nodejs-ecosystem-features","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"resolving",parentName:"h3"}),"解析",(0,t.kt)("a",{href:"#resolving","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"现在支持 package.json 中的 ",(0,t.kt)("inlineCode",{parentName:"p"},"exports")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"imports")," 字段。"),(0,t.kt)("p",null,"原生支持 Yarn PnP。"),(0,t.kt)("p",null,"更多细节请参见",(0,t.kt)("a",{href:"/guides/package-exports/",parentName:"p"},"package exports"),"。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"major-changes-development-experience",parentName:"h2"}),"重大变更：开发体验",(0,t.kt)("a",{href:"#major-changes-development-experience","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"improved-target",parentName:"h3"}),"经过优化的构建目标(target)",(0,t.kt)("a",{href:"#improved-target","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 5 允许传递一个目标列表，并且支持目标的版本。"),(0,t.kt)("p",null,"例如 ",(0,t.kt)("inlineCode",{parentName:"p"},'target: "node14"``target: ["web", "es2020"]'),"。"),(0,t.kt)("p",null,"这是一个简单的方法，为 webpack 提供它需要确定的所有信息："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"代码块加载机制，以及"),(0,t.kt)("li",{parentName:"ul"},"支持的语法，如箭头函数")),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"stats",parentName:"h3"}),"Stats",(0,t.kt)("a",{href:"#stats","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"改进了统计测试格式的可读性和冗余性。改进了默认值，使其不那么冗长，也适合大型构建。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"现在默认情况下，代码块关系是隐藏的，可以用 ",(0,t.kt)("inlineCode",{parentName:"li"},"stats.chunkRelations")," 来切换。"),(0,t.kt)("li",{parentName:"ul"},"Stats 现在可以区分 ",(0,t.kt)("inlineCode",{parentName:"li"},"files")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"auxiliaryFiles"),"。"),(0,t.kt)("li",{parentName:"ul"},"Stats 现在默认隐藏模块和代码块的 id。这可以通过 ",(0,t.kt)("inlineCode",{parentName:"li"},"stats.ids")," 来切换。"),(0,t.kt)("li",{parentName:"ul"},"现在所有模块的列表是按照到入口点的距离排序的。这可以通过 ",(0,t.kt)("inlineCode",{parentName:"li"},"stats.modulesSort")," 来改变。"),(0,t.kt)("li",{parentName:"ul"},"代码块模块的列表现在按模块名称排序。这可以通过 ",(0,t.kt)("inlineCode",{parentName:"li"},"stats.chunkModulesSort")," 来改变。"),(0,t.kt)("li",{parentName:"ul"},"嵌套模块的列表现在是按拓扑结构排序的。这可以通过 ",(0,t.kt)("inlineCode",{parentName:"li"},"stats.nestedModulesSort")," 来改变。"),(0,t.kt)("li",{parentName:"ul"},"现在，代码块和资源会显示代码块 id 提示。"),(0,t.kt)("li",{parentName:"ul"},"资产和模块将以树状而不是列表/表格的形式显示。"),(0,t.kt)("li",{parentName:"ul"},"一般信息现在会在最后的摘要中显示。它显示了 webpack 版本，配置名称和警告/错误计数。"),(0,t.kt)("li",{parentName:"ul"},"哈希值现在默认是隐藏的。这可以通过 ",(0,t.kt)("inlineCode",{parentName:"li"},"stats.hash")," 来改变。"),(0,t.kt)("li",{parentName:"ul"},"默认情况下不再显示构建的时间戳，这可以通过 ",(0,t.kt)("inlineCode",{parentName:"li"},"stats.builtAt")," 开启。它会在摘要中显示时间戳。"),(0,t.kt)("li",{parentName:"ul"},"默认情况下，不再显示子编译。它们可以用 ",(0,t.kt)("inlineCode",{parentName:"li"},"stats.children")," 来显示。")),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"progress",parentName:"h3"}),"进度",(0,t.kt)("a",{href:"#progress","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"对 ",(0,t.kt)("inlineCode",{parentName:"p"},"ProgressPlugin")," 做了一些改进，它被 CLI 在参数 ",(0,t.kt)("inlineCode",{parentName:"p"},"--progress")," 开启时使用，但也可以作为插件手动使用。"),(0,t.kt)("p",null,'以前它只计算已处理的模块。现在它可以计算 "入口"、"依赖" 和 "模块"。\n现在所有的模块都默认显示了。'),(0,t.kt)("p",null,"以前它只显示当前处理的模块。这造成了很多 stderr 输出，在一些控制台上产生了性能问题。\n现在这个功能被默认关闭（",(0,t.kt)("inlineCode",{parentName:"p"},"activeModules")," 选项）。这也减少了控制台的垃圾信息量。\n现在，在构建模块的过程中，向 stderr 写入的时间被控制在 500ms 以内。"),(0,t.kt)("p",null,"剖析模式也得到了升级，将显示嵌套进度消息的时间。\n这使得它更容易弄清楚哪个插件导致了性能问题。"),(0,t.kt)("p",null,"新增加的 ",(0,t.kt)("inlineCode",{parentName:"p"},"percentBy")," -选项告知 ",(0,t.kt)("inlineCode",{parentName:"p"},"ProgressPlugin")," 如何计算进度百分比。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"new")," ",(0,t.kt)("span",{className:"token class-name",parentName:"code"},"webpack",(0,t.kt)("span",{className:"token punctuation",parentName:"span"},"."),"ProgressPlugin"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," percentBy",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'entries'")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"为了使进度百分比更准确，",(0,t.kt)("inlineCode",{parentName:"p"},"ProgressPlugin")," 会缓存最后已知的总模块数，并在下一次构建时重新使用这个值。第一次构建将预热缓存，但后续构建将使用并更新这个值。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"automatic-unique-naming",parentName:"h3"}),"自动添加唯一命名",(0,t.kt)("a",{href:"#automatic-unique-naming","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"在 webpack 4 中，多个 webpack 运行时可能会在同一个 HTML 页面上发生冲突，因为它们使用同一个全局变量进行代码块加载。为了解决这个问题，需要为 ",(0,t.kt)("inlineCode",{parentName:"p"},"output.jsonpFunction")," 配置提供一个自定义的名称。"),(0,t.kt)("p",null,"Webpack 5 确实会从 ",(0,t.kt)("inlineCode",{parentName:"p"},"package.json")," ",(0,t.kt)("inlineCode",{parentName:"p"},"name")," 中自动推断出一个唯一的构建名称，并将其作为 ",(0,t.kt)("inlineCode",{parentName:"p"},"output.uniqueName")," 的默认值。"),(0,t.kt)("p",null,"这个值用于使所有潜在的冲突的全局变量成为唯一。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),": 由于 ",(0,t.kt)("inlineCode",{parentName:"p"},"package.json")," 中有唯一的名称，可将 ",(0,t.kt)("inlineCode",{parentName:"p"},"output.jsonpFunction")," 删除。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"automatic-public-path",parentName:"h3"}),"自动添加公共路径",(0,t.kt)("a",{href:"#automatic-public-path","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 5 会在可能的情况下自动确定 ",(0,t.kt)("inlineCode",{parentName:"p"},"output.publicPath"),"。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"typescript-typings",parentName:"h3"}),"Typescript 类型",(0,t.kt)("a",{href:"#typescript-typings","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 5 从源码中生成 typescript 类型，并通过 npm 包暴露它们。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：删除",(0,t.kt)("inlineCode",{parentName:"p"},"@types/webpack"),"。当名称不同时更新引用。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"major-changes-optimization",parentName:"h2"}),"重大变更: 构建优化",(0,t.kt)("a",{href:"#major-changes-optimization","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"nested-tree-shaking",parentName:"h3"}),"嵌套的 tree-shaking",(0,t.kt)("a",{href:"#nested-tree-shaking","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 现在能够跟踪对导出的嵌套属性的访问。这可以改善重新导出命名空间对象时的 Tree Shaking（清除未使用的导出和混淆导出）。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,t.kt)("span",{className:"token comment",parentName:"code"},"// inner.js"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," a ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token number",parentName:"code"},"1"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"const")," b ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token number",parentName:"code"},"2"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// module.js"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"*")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"as")," inner ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./inner'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 或 import * as inner from './inner'; export { inner };"),"\n\n",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// user.js"),"\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"*")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"as")," module ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./module'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\nconsole",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"log"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"inner",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"a",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"在这个例子中，可以在生产模式下删除导出的",(0,t.kt)("inlineCode",{parentName:"p"},"b"),"。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"inner-module-tree-shaking",parentName:"h3"}),"内部模块 tree-shaking",(0,t.kt)("a",{href:"#inner-module-tree-shaking","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 4 没有分析模块的导出和引用之间的依赖关系。webpack 5 有一个新的选项 ",(0,t.kt)("inlineCode",{parentName:"p"},"optimization.innerGraph"),"，在生产模式下是默认启用的，它可以对模块中的标志进行分析，找出导出和引用之间的依赖关系。"),(0,t.kt)("p",null,"在这样的模块中："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," something ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"from")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./something'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"usingSomething"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return")," something",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),"\n\n",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"export")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"function")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"test"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"return")," ",(0,t.kt)("span",{className:"token function",parentName:"code"},"usingSomething"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"))),(0,t.kt)("p",null,"内部依赖图算法会找出 ",(0,t.kt)("inlineCode",{parentName:"p"},"something")," 只有在使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"test")," 导出时才会使用。这允许将更多的出口标记为未使用，并从代码包中省略更多的代码。"),(0,t.kt)("p",null,"当设置",(0,t.kt)("inlineCode",{parentName:"p"},'"sideEffects": false'),"时，可以省略更多的模块。在这个例子中，当 ",(0,t.kt)("inlineCode",{parentName:"p"},"test")," 导出未被使用时，",(0,t.kt)("inlineCode",{parentName:"p"},"./something")," 将被省略。"),(0,t.kt)("p",null,"要获得未使用的导出信息，需要使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"optimization.usedExports"),"。要删除无副作用的模块，需要使用",(0,t.kt)("inlineCode",{parentName:"p"},"optimization.sideEffects"),"。"),(0,t.kt)("p",null,"可以分析以下标记。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"函数声明"),(0,t.kt)("li",{parentName:"ul"},"类声明"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"默认导出export default")," 或定义变量以下的：",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"函数表达式"),(0,t.kt)("li",{parentName:"ul"},"类表达式"),(0,t.kt)("li",{parentName:"ul"},"顺序表达式"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"/*#__PURE__*/")," 表达式"),(0,t.kt)("li",{parentName:"ul"},"局部变量"),(0,t.kt)("li",{parentName:"ul"},"引入的捆绑(bindings)")))),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"反馈"),"：如果你发现这个分析中缺少什么，请报告一个问题，我们会考虑增加它。"),(0,t.kt)("p",null,"使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"eval()")," 将为一个模块放弃这个优化，因为经过 eval 的代码可以引用范围内的任何标记。"),(0,t.kt)("p",null,"这种优化也被称为深度范围分析。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"commonjs-tree-shaking",parentName:"h3"}),"CommonJs Tree Shaking",(0,t.kt)("a",{href:"#commonjs-tree-shaking","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 曾经不进行对 CommonJs 导出和 ",(0,t.kt)("inlineCode",{parentName:"p"},"require()")," 调用时的导出使用分析。"),(0,t.kt)("p",null,"Webpack 5 增加了对一些 CommonJs 构造的支持，允许消除未使用的 CommonJs 导出，并从 ",(0,t.kt)("inlineCode",{parentName:"p"},"require()")," 调用中跟踪引用的导出名称。"),(0,t.kt)("p",null,"支持以下构造："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"exports|this|module.exports.xxx = ...")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},'exports|this|module.exports = require("...")')," (reexport)"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},'exports|this|module.exports.xxx = require("...").xxx')," (reexport)"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},'Object.defineProperty(exports|this|module.exports, "xxx", ...)')),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},'require("abc").xxx')),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},'require("abc").xxx()')),(0,t.kt)("li",{parentName:"ul"},"从 ESM 导入"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"require()")," 一个 ESM 模块"),(0,t.kt)("li",{parentName:"ul"},"被标记的导出类型 (对非严格 ESM 导入做特殊处理):",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},'Object.defineProperty(exports|this|module.exports, "__esModule", { value: true|!0 })')),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"exports|this|module.exports.__esModule = true|!0")))),(0,t.kt)("li",{parentName:"ul"},"未来计划支持更多的构造")),(0,t.kt)("p",null,"当检测到不可分析的代码时，webpack 会放弃，并且完全不跟踪这些模块的导出信息（出于性能考虑）。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"side-effect-analysis",parentName:"h3"}),"副作用分析",(0,t.kt)("a",{href:"#side-effect-analysis","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"在 package.json 中的 ",(0,t.kt)("inlineCode",{parentName:"p"},'"sideEffects"')," 标志允许手动将模块标记为无副作用，这就允许在不使用时放弃它们。"),(0,t.kt)("p",null,"Webpack 5 也可以根据对源代码的静态分析，自动将模块标记为无副作用。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"optimization-per-runtime",parentName:"h3"}),"每个运行时的优化",(0,t.kt)("a",{href:"#optimization-per-runtime","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 5 现在能够（默认情况下也是如此）分析和优化每个运行时的模块（一个运行时通常等于一个入口点）。\n这允许只在真正需要的地方导出这些入口点。\n入口点之间不会相互影响 (只要每个入口点使用一个运行时)"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"module-concatenation",parentName:"h3"}),"模块合并",(0,t.kt)("a",{href:"#module-concatenation","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"模块合并也可以在每个运行时工作，允许每个运行时进行不同的合并"),(0,t.kt)("p",null,"模块合并已经成为一等公民，现在任何模块和依赖都可以实现它。\n在初始时 webpack 5 已经添加了对 ExternalModules 和 json 模块的支持，更多的模块可能很快就会发布。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"general-tree-shaking-improvements",parentName:"h3"}),"通用 Tree Shaking 改进",(0,t.kt)("a",{href:"#general-tree-shaking-improvements","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"export *")," 已经得到改进，可以跟踪更多的信息，并且不再将",(0,t.kt)("inlineCode",{parentName:"p"},"默认"),"导出标记为使用。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"export *")," 现在会在 webpack 确定有冲突的导出时显示警告。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"import()")," 允许通过 ",(0,t.kt)("inlineCode",{parentName:"p"},'/* webpackExports: ["abc", "default"] */')," 该魔法注释手动 tree shake 模块。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"development-production-similarity",parentName:"h3"}),"开发与生产的一致性问题",(0,t.kt)("a",{href:"#development-production-similarity","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"我们试图通过改善两种模式的相似性，在开发模式的构建性能和避免仅在生产模式的产生的问题之间找到一个很好的平衡点。"),(0,t.kt)("p",null,'Webpack 5 默认在两种模式下都启用了 "sideEffects "优化。在 webpack 4 中，由于 package.json 中的',(0,t.kt)("inlineCode",{parentName:"p"},'"sideEffects"'),"标记不正确，这种优化导致了一些只在生产模式下出现的错误。在开发过程中启用这个优化可以更快更容易地发现这些问题。"),(0,t.kt)("p",null,"在很多情况下，开发和生产都是在不同的操作系统上进行的，文件系统的大小写敏感度不同，所以 webpack 5 增加了一些奇怪的大小写的警告/错误。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"improved-code-generation",parentName:"h3"}),"改进代码生成",(0,t.kt)("a",{href:"#improved-code-generation","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"当 ASI 发生时，webpack 会检测到，当没有分号插入时，会生成更短的代码。",(0,t.kt)("inlineCode",{parentName:"p"},"Object(...)"),"->",(0,t.kt)("inlineCode",{parentName:"p"},"(0, ...)"),"。"),(0,t.kt)("p",null,"Webpack 将多个导出的 getters 合并为一个运行时函数调用。",(0,t.kt)("inlineCode",{parentName:"p"},'r.d(x, "a", () => a); r.d(x, "b", () => b);')," -> ",(0,t.kt)("inlineCode",{parentName:"p"},"r.d(x, {a: () => a, b: () => b});"),"。"),(0,t.kt)("p",null,"现在在 ",(0,t.kt)("inlineCode",{parentName:"p"},"output.environment")," 中有额外的选项。\n它们允许指定哪些 ECMAScript 特性可以用于 webpack 生成的运行时代码。"),(0,t.kt)("p",null,"通常人们不会直接指定这个选项，而是会使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"target")," 选项。"),(0,t.kt)("p",null,"Webpack 4 之前只生成 ES5 的代码。\nWebpack 5 则现在既可以生成 ES5 又可以生成 ES6/ES2015 代码。"),(0,t.kt)("p",null,"只支持现代浏览器，将使用箭头函数生成更短的代码，使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"const")," 声明与 TDZ 为 ",(0,t.kt)("inlineCode",{parentName:"p"},"export default")," 生成更符合规范的代码。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"improved-target-option",parentName:"h3"}),"改进 ",(0,t.kt)("inlineCode",{parentName:"h3"},"target")," 配置",(0,t.kt)("a",{href:"#improved-target-option","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,'在 webpack 4 中，"target "是在 ',(0,t.kt)("inlineCode",{parentName:"p"},'"web"')," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},'"node"')," 之间的一个粗略的选择（还有一些其他的）。\nWebpack 5 给你更多的选择。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"target"),"选项现在比以前影响了更多关于生成代码的事情。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"代码块加载方法"),(0,t.kt)("li",{parentName:"ul"},"代码块的格式"),(0,t.kt)("li",{parentName:"ul"},"wasm 加载方法"),(0,t.kt)("li",{parentName:"ul"},"代码块与 wasm 在 workers 中加载方法"),(0,t.kt)("li",{parentName:"ul"},"被使用的全局对象"),(0,t.kt)("li",{parentName:"ul"},"publicPath 是否应该被自动确定"),(0,t.kt)("li",{parentName:"ul"},"生成的代码中使用的 ECMAScript 特性/语法"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"externals")," 是否默认被启用"),(0,t.kt)("li",{parentName:"ul"},"一些 Node.js 兼容层的行为(",(0,t.kt)("inlineCode",{parentName:"li"},"global"),", ",(0,t.kt)("inlineCode",{parentName:"li"},"__filename"),", ",(0,t.kt)("inlineCode",{parentName:"li"},"__dirname"),")"),(0,t.kt)("li",{parentName:"ul"},"模块解析(",(0,t.kt)("inlineCode",{parentName:"li"},"browser")," 字段、",(0,t.kt)("inlineCode",{parentName:"li"},"exports")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"imports")," 条件)"),(0,t.kt)("li",{parentName:"ul"},"一些加载器可能会基于此改变行为")),(0,t.kt)("p",null,"对于其中的一些情况，在 ",(0,t.kt)("inlineCode",{parentName:"p"},'"web"')," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},'"node"')," 之间的选择过于粗略，我们需要更多的信息。\n因此，我们允许指定最低版本，例如 ",(0,t.kt)("inlineCode",{parentName:"p"},'"node10.13"'),"，并推断出更多关于目标环境的属性。"),(0,t.kt)("p",null,"现在也允许用一个数组组合多个目标，webpack 将确定所有目标的最小属性。使用数组也很有用，当使用像 ",(0,t.kt)("inlineCode",{parentName:"p"},'"web"')," 或 ",(0,t.kt)("inlineCode",{parentName:"p"},'"node"')," 这样没有提供完整信息的目标时（没有版本号）。例如，",(0,t.kt)("inlineCode",{parentName:"p"},'["web", "es2020"]')," 结合了这两个部分目标。"),(0,t.kt)("p",null,"有一个目标 ",(0,t.kt)("inlineCode",{parentName:"p"},'"browserslist"'),"，它将使用 browserslist 类库的数据来确定环境的属性。\n当项目中存在可用的 browserslist 配置时，这个目标也会被默认使用。当没有可用的配置时，默认使用 ",(0,t.kt)("inlineCode",{parentName:"p"},'"web"')," 目标。"),(0,t.kt)("p",null,"有些组合和功能还没有实现，会导致错误。它们是为未来的功能做准备。例如："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},'["web", "node"]')," 将导致一个通用的代码块加载方法，而这个方法还没有实现。"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},'["web", "node"]')," + ",(0,t.kt)("inlineCode",{parentName:"li"},"output.module: true"),"将导致一个模块代码块加载方法，该方法尚未实现。"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},'"web"'),"会导致",(0,t.kt)("inlineCode",{parentName:"li"},"http(s):"),"的导入被视为",(0,t.kt)("inlineCode",{parentName:"li"},"模块"),"外部资源，而这些外部还没有实现(变通方法：",(0,t.kt)("inlineCode",{parentName:"li"},"externalsPresets.{ web: false, webAsync: true }"),"，将使用",(0,t.kt)("inlineCode",{parentName:"li"},"import()"),"代替)。")),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"splitchunks-and-module-sizes",parentName:"h3"}),"代码块拆分与模块大小",(0,t.kt)("a",{href:"#splitchunks-and-module-sizes","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"现在模块的尺寸比单一的数字更好的表达方式。现在有不同类型的大小。"),(0,t.kt)("p",null,"SplitChunksPlugin 现在知道如何处理这些不同的大小，并将它们用于 ",(0,t.kt)("inlineCode",{parentName:"p"},"minSize")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"maxSize"),"。\n默认情况下，只有 ",(0,t.kt)("inlineCode",{parentName:"p"},"javascript")," 大小被处理，但你现在可以传递多个值来管理它们："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  optimization",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    splitChunks",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      minSize",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        javascript",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token number",parentName:"code"},"30000"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n        webassembly",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token number",parentName:"code"},"50000"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"你仍然可以使用一个数字来表示大小。在这种情况下，webpack 会自动使用默认的大小类型。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"mini-css-extract-plugin")," 使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"css/mini-extra")," 作为大小类型，并将此大小类型自动添加到默认类型中。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"major-changes-performance",parentName:"h2"}),"重大变更：性能优化",(0,t.kt)("a",{href:"#major-changes-performance","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"persistent-caching",parentName:"h3"}),"持久缓存",(0,t.kt)("a",{href:"#persistent-caching","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"现在有一个文件系统缓存。它是可选的，可以通过以下配置启用："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  cache",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 1. 将缓存类型设置为文件系统"),"\n    type",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'filesystem'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n\n    buildDependencies",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 2. 将你的 config 添加为 buildDependency，以便在改变 config 时获得缓存无效"),"\n      config",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"__filename",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n\n      ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 3. 如果你有其他的东西被构建依赖，你可以在这里添加它们"),"\n      ",(0,t.kt)("span",{className:"token comment",parentName:"code"},"// 注意，webpack、加载器和所有从你的配置中引用的模块都会被自动添加"),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"重要说明："),(0,t.kt)("p",null,"默认情况下，webpack 假定 webpack 所在的 ",(0,t.kt)("inlineCode",{parentName:"p"},"node_modules")," 目录",(0,t.kt)("strong",{parentName:"p"},"只会"),"被包管理器修改。对 ",(0,t.kt)("inlineCode",{parentName:"p"},"node_modules")," 来说，哈希值和时间戳会被跳过。\n出于性能考虑，只使用包名和版本。\n只要不指定",(0,t.kt)("inlineCode",{parentName:"p"},"resolve.symlinks: false"),"，Symlinks(即",(0,t.kt)("inlineCode",{parentName:"p"},"npm/yarn link"),")就没有问题(无论如何都要避免)。\n不要直接编辑 ",(0,t.kt)("inlineCode",{parentName:"p"},"node_modules")," 中的文件，除非你用 ",(0,t.kt)("inlineCode",{parentName:"p"},"snapshot.managedPaths: []"),"以剔除该优化。\n当使用 Yarn PnP 时，webpack 假设 yarn 缓存是不可改变的（通常是这样）。\n你可以使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"snapshot.immutablePaths: []")," 来退出这个优化。"),(0,t.kt)("p",null,"缓存将默认存储在 ",(0,t.kt)("inlineCode",{parentName:"p"},"node_modules/.cache/webpack"),"（当使用 node_modules 时）或 ",(0,t.kt)("inlineCode",{parentName:"p"},".yarn/.cache/webpack"),"（当使用 Yarn PnP 时）中。\n当所有的插件都正确处理缓存时，你可能永远都不需要手动删除它。"),(0,t.kt)("p",null,"许多内部插件也会使用持久性缓存。例如 ",(0,t.kt)("inlineCode",{parentName:"p"},"SourceMapDevToolPlugin")," (缓存 SourceMap 的生成)或 ",(0,t.kt)("inlineCode",{parentName:"p"},"ProgressPlugin")," (缓存模块数量)"),(0,t.kt)("p",null,"持久性缓存将根据使用情况自动创建多个缓存文件，以优化对缓存的读写访问。"),(0,t.kt)("p",null,"默认情况下，时间戳将用于开发模式的快照，而文件哈希将用于生产模式。\n文件哈希也允许在 CI 中使用持久性缓存。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"compiler-idle-and-close",parentName:"h3"}),"编译器闲置和关闭",(0,t.kt)("a",{href:"#compiler-idle-and-close","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"编译器现在需要在使用后关闭。编译器现在会进入和离开空闲状态，并且有这些状态的钩子。插件可能会使用这些钩子来做不重要的工作。(即将持久缓存缓慢地将缓存存储到磁盘上)。在编译器关闭时--所有剩余的工作应该尽可能快地完成。一个回调标志着关闭完成。"),(0,t.kt)("p",null,"插件和它们各自的作者应该预料到，有些用户可能会忘记关闭编译器。所以，所有的工作最终也应该在空闲状态下完成。当工作正在进行时，应该防止进程退出。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"webpack()")," 用法在被传递回调时自动调用",(0,t.kt)("inlineCode",{parentName:"p"},"close"),"。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：在使用 Node.js API 时，一定要在完成工作后调用 ",(0,t.kt)("inlineCode",{parentName:"p"},"Compiler.close"),"。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"file-emitting",parentName:"h3"}),"文件生成",(0,t.kt)("a",{href:"#file-emitting","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 过去总是在第一次构建时发出所有的输出文件，但在增量（观察）构建时跳过了写入未更改的文件。\n假设在 webpack 运行时，没有任何其他东西改变输出文件。"),(0,t.kt)("p",null,"增加了持久性缓存后，即使在重启 webpack 进程时，也应该会有类似监听的体验，但如果认为即使在 webpack 不运行时也没有其他东西改变输出目录，那这个假设就太强了。"),(0,t.kt)("p",null,"所以 webpack 现在会检查输出目录中现有的文件，并将其内容与内存中的输出文件进行比较。只有当文件被改变时，它才会写入文件。\n这只在第一次构建时进行。任何增量构建都会在运行中的 webpack 进程中生成新的资产时写入文件。"),(0,t.kt)("p",null,"我们假设 webpack 和插件只有在内容被改变时才会生成新的资产。应该使用缓存来确保在输入相同时不会生成新的资产。\n不遵循这个建议会降低性能。"),(0,t.kt)("p",null,"被标记为 ",(0,t.kt)("inlineCode",{parentName:"p"},"[不可变]")," 的文件（包括内容哈希），当已经存在一个同名文件时，将永远不会被写入。\n我们假设当文件内容发生变化时，内容哈希会发生变化。\n这在一般情况下是正确的，但在 webpack 或插件开发过程中可能并不总是如此。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"major-changes-long-outstanding-problems",parentName:"h2"}),"重大变更：长期未解决的问题",(0,t.kt)("a",{href:"#major-changes-long-outstanding-problems","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"code-splitting-for-single-file-targets",parentName:"h3"}),"单一文件目标的代码分离",(0,t.kt)("a",{href:"#code-splitting-for-single-file-targets","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"只允许启动单个文件的目标（如 node、WebWorker、electron main）现在支持运行时自动加载引导所需的依赖代码片段。"),(0,t.kt)("p",null,"这允许对这些目标使用 ",(0,t.kt)("inlineCode",{parentName:"p"},'chunks: "all"')," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"optimization.runtimeChunk"),"。"),(0,t.kt)("p",null,"请注意，如果目标的代码块加载是异步的，这使得初始评估也是异步的。当使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"output.library")," 时，这可能是一个问题，因为现在导出的值是一个 Promise。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"updated-resolver",parentName:"h3"}),"更新了解析器",(0,t.kt)("a",{href:"#updated-resolver","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"enhanced-resolve")," 更新到了 v5，有以下改进："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"追踪更多的依赖关系，比如丢失的文件。"),(0,t.kt)("li",{parentName:"ul"},"别名可能有多种选择"),(0,t.kt)("li",{parentName:"ul"},"现在可以别名为 ",(0,t.kt)("inlineCode",{parentName:"li"},"false")," 了。"),(0,t.kt)("li",{parentName:"ul"},"支持 ",(0,t.kt)("inlineCode",{parentName:"li"},"exports")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"imports")," 字段等功能。"),(0,t.kt)("li",{parentName:"ul"},"性能提高")),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"chunks-without-js",parentName:"h3"}),"没有 JS 的代码块",(0,t.kt)("a",{href:"#chunks-without-js","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"不包含 JS 代码的块，将不再生成 JS 文件。\n这就允许有只包含 CSS 的代码块。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"major-changes-future",parentName:"h2"}),"重大变更：未来计划",(0,t.kt)("a",{href:"#major-changes-future","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"experiments",parentName:"h3"}),"实验特性",(0,t.kt)("a",{href:"#experiments","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"并不是所有的功能都是一开始就稳定的。在 webpack 4 中，我们添加了实验性功能，并在变更日志中注明它们是实验性的，但从配置中并不总是能清楚地看到这些功能是实验性的。"),(0,t.kt)("p",null,"在 webpack 5 中，有一个新的 ",(0,t.kt)("inlineCode",{parentName:"p"},"experiments")," 配置选项，允许启用实验性功能。这使得哪些功能被启用/使用变得很清楚。"),(0,t.kt)("p",null,"虽然 webpack 遵循语义版本化，但它会对实验性功能进行例外处理。实验性功能可能会在 webpack 的次要版本中包含破坏性的变化。当这种情况发生时，我们会在变更日志中添加一个明确的注释。这将使我们能够更快地迭代实验性功能，同时也使我们能够在主要版本上为稳定的功能停留更长时间。"),(0,t.kt)("p",null,"以下的实验功能将随 webpack 5 一起发布。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"旧的 WebAssembly 支持，就像 webpack 4 一样 (",(0,t.kt)("inlineCode",{parentName:"li"},"experiments.syncWebAssembly"),")"),(0,t.kt)("li",{parentName:"ul"},"根据",(0,t.kt)("a",{href:"https://github.com/WebAssembly/esm-integration",parentName:"li"},"更新的规范"),"(",(0,t.kt)("inlineCode",{parentName:"li"},"experiments.asyncWebAssembly"),")，新增 WebAssembly 支持。",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"这使得一个 WebAssembly 模块成为一个异步模块。"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{href:"https://github.com/tc39/proposal-top-level-await",parentName:"li"},"顶层的 Await"),"第三阶段提案(",(0,t.kt)("inlineCode",{parentName:"li"},"experiments.topLevelAwait"),")",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"在顶层使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"await")," 使该模块成为一个异步模块。"))),(0,t.kt)("li",{parentName:"ul"},"以模块的形式生成代码包 (",(0,t.kt)("inlineCode",{parentName:"li"},"experiments.outputModule"),")",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"这就从代码包中移除了包装器 IIFE，执行严格模式，通过 ",(0,t.kt)("inlineCode",{parentName:"li"},'<script type="module">')," 进行懒惰加载，并在模块模式下最小化压缩。")))),(0,t.kt)("p",null,"请注意，这也意味着 WebAssembly 的支持现在被默认禁用。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"minimum-nodejs-version",parentName:"h3"}),"最小 Node.js 版本",(0,t.kt)("a",{href:"#minimum-nodejs-version","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"最低支持的 Node.js 版本从 6 增加到 10.13.0(LTS)。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：升级到最新的 Node.js 版本。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"changes-to-the-configuration",parentName:"h2"}),"配置变更",(0,t.kt)("a",{href:"#changes-to-the-configuration","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"changes-to-the-structure",parentName:"h3"}),"结构的变化",(0,t.kt)("a",{href:"#changes-to-the-structure","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"entry: {}")," 现在可以赋值一个空对象（允许使用插件来修改入口）。"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"target")," 支持数组，版本及 browserslist"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"cache: Object"),"：不能再设置内存缓存对象"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"cache.type"),"：现在可以在 ",(0,t.kt)("inlineCode",{parentName:"li"},'"memory"')," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},'"filesystem"')," 间进行选择"),(0,t.kt)("li",{parentName:"ul"},"在 ",(0,t.kt)("inlineCode",{parentName:"li"},'cache.type = "filesystem"')," 时，增加了新配置项：",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"cache.cacheDirectory")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"cache.name")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"cache.version")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"cache.store")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"cache.hashAlgorithm")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"cache.idleTimeout")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"cache.idleTimeoutForIntialStore")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"cache.buildDependencies")))),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"snapshot.resolveBuildDependencies")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"snapshot.resolve")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"snapshot.module")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"snapshot.managedPaths")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"snapshot.immutablePaths")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"resolve.cache"),"：此选项可禁用/启用 safe 解析缓存"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"resolve.concord")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"resolve.moduleExtensions")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"resolve.alias")," 值可以为数组或 ",(0,t.kt)("inlineCode",{parentName:"li"},"false")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"resolve.restrictions"),"：允许限制可能存在的结果"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"resolve.fallback"),"：允许为处理不了的别名请求设置降级"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"resolve.preferRelative"),"：允许处理模块请求"),(0,t.kt)("li",{parentName:"ul"},"移除了针对于 Node.js 原生模块的自动 polyfills",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"node.Buffer")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"node.console")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"node.process")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"node.*"),"（Node.js 原生模块）"),(0,t.kt)("li",{parentName:"ul"},"迁移：",(0,t.kt)("inlineCode",{parentName:"li"},"resolve.alias")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"ProvidePlugin"),"。错误会给出提示。（可以参考 ",(0,t.kt)("a",{href:"https://github.com/webpack/node-libs-browser",parentName:"li"},"node-libs-browser"),"，了解 v4 中 polyfill 和 mock 的方式）"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"output.filename")," 可以设置为函数"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"output.assetModuleFilename")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"output.jsonpScriptType")," 更名为 ",(0,t.kt)("inlineCode",{parentName:"li"},"output.scriptType")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"devtool")," 更加严格",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"格式化：",(0,t.kt)("inlineCode",{parentName:"li"},"false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map")))),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},'optimization.chunkIds: "deterministic"')),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},'optimization.moduleIds: "deterministic"')),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},'optimization.moduleIds: "hashed"')," 已弃用"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},'optimization.moduleIds: "total-size"')),(0,t.kt)("li",{parentName:"ul"},"废弃了模块的 flag 并移除了 chunk id",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.hashedModuleIds")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.namedChunks")," (",(0,t.kt)("inlineCode",{parentName:"li"},"NamedChunksPlugin")," too)"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.namedModules")," (",(0,t.kt)("inlineCode",{parentName:"li"},"NamedModulesPlugin")," too)"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.occurrenceOrder")),(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"chunkIds")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"moduleIds")))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks")," ",(0,t.kt)("inlineCode",{parentName:"li"},"test")," 不再匹配 chunk 名",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 test 函数\n",(0,t.kt)("inlineCode",{parentName:"li"},'(module, { chunkGraph }) => chunkGraph.getModuleChunks(module).some(chunk => chunk.name === "name")')))),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks")," ",(0,t.kt)("inlineCode",{parentName:"li"},"minRemainingSize")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks")," 的 ",(0,t.kt)("inlineCode",{parentName:"li"},"filename")," 可以设置为函数"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks")," 的大小现在可以设置为每个源类型大小的对象",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"minSize")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"minRemainingSize")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"maxSize")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"maxAsyncSize")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"maxInitialSize")))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks")," 中的 ",(0,t.kt)("inlineCode",{parentName:"li"},"maxAsyncSize")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"maxInitialSize")," 添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"maxSize"),"：允许为初始和异步 chunk 指定不同的 maxSize"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks")," 的 ",(0,t.kt)("inlineCode",{parentName:"li"},"name: true"),"：不再支持自动命名",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用默认值。",(0,t.kt)("inlineCode",{parentName:"li"},'chunkIds: "named"')," 会为你的文件取一个有用的名字，以便于调试"))),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks.cacheGroups[].idHint"),"：会给出提示，如果选择命名的 chunk id"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks")," 的 ",(0,t.kt)("inlineCode",{parentName:"li"},"automaticNamePrefix"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"idHint")," 代替"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks")," 的 ",(0,t.kt)("inlineCode",{parentName:"li"},"filename")," 不再局限于初始 chunk"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks")," 的 ",(0,t.kt)("inlineCode",{parentName:"li"},"usedExports"),"，以便在比较模块时引入使用过的 export"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks.defaultSizeTypes"),"：当使用数字表示 size 时，可以指定 size 的类型"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.mangleExports")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.minimizer")," ",(0,t.kt)("inlineCode",{parentName:"li"},'"..."')," 可以用于引入默认值"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.usedExports")," ",(0,t.kt)("inlineCode",{parentName:"li"},'"global"')," 增加了一个值，以允许在每个运行时中禁用分析，而在全局范围内进行分享（性能更好）"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.noEmitOnErrors")," 更名为 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.emitOnErrors"),"，逻辑颠倒"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.realContentHash")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"output.devtoolLineToLine"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：没有替代项"))),(0,t.kt)("li",{parentName:"ul"},"现已允许 ",(0,t.kt)("inlineCode",{parentName:"li"},"output.chunkFilename: Function")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"output.hotUpdateChunkFilename: Function")," 已被禁止：反正也没什么用。"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"output.hotUpdateMainFilename: Function")," 已被禁止：反正也没什么用。"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"output.importFunctionName: string")," 指定用于替换 ",(0,t.kt)("inlineCode",{parentName:"li"},"import()")," 的名称，以允许在不支持的环境中进行 polyfilling"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"output.charset"),"：将其设置为 false，会省略 script 标签上的 ",(0,t.kt)("inlineCode",{parentName:"li"},"charset")," 属性"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"output.hotUpdateFunction")," 更名为 ",(0,t.kt)("inlineCode",{parentName:"li"},"output.hotUpdateGlobal")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"output.jsonpFunction")," 更名为 ",(0,t.kt)("inlineCode",{parentName:"li"},"output.chunkLoadingGlobal")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"output.chunkCallbackFunction")," 更名为 ",(0,t.kt)("inlineCode",{parentName:"li"},"output.chunkLoadingGlobal")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"output.chunkLoading")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"output.enabledChunkLoadingTypes")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"output.chunkFormat")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"module.rules")," 中的 ",(0,t.kt)("inlineCode",{parentName:"li"},"resolve")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"parser")," 将以不同的方式进行合并（对象会进行深度合并，数组可能会使用 ",(0,t.kt)("inlineCode",{parentName:"li"},'"..."')," 的形式来引用之前的值）"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"module.rules")," ",(0,t.kt)("inlineCode",{parentName:"li"},"parser.worker"),"：允许为支持的 worker 添加配置"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"module.rules")," 中的 ",(0,t.kt)("inlineCode",{parentName:"li"},"query")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"loaders")," 被移除"),(0,t.kt)("li",{parentName:"ul"},"向 ",(0,t.kt)("inlineCode",{parentName:"li"},"module.rules")," 中的 ",(0,t.kt)("inlineCode",{parentName:"li"},"options")," 传递字符串的形式被废弃",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用传递选项对象的方式代替，当不支持这种方式时，请在对应的 loader 中开启一个 issues"))),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"module.rules")," ",(0,t.kt)("inlineCode",{parentName:"li"},"mimetype"),"：允许匹配 DataURI 的 mimetype"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"module.rules")," ",(0,t.kt)("inlineCode",{parentName:"li"},"descriptionData"),"：允许匹配来自 package.json 中的数据"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"module.defaultRules")," ",(0,t.kt)("inlineCode",{parentName:"li"},'"..."')," 可以用于引用默认值"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"stats.chunkRootModules"),"：用于显示根模块的 chunk"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"stats.orphanModules"),"：用于显示为 emit 的模块"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"stats.runtime"),"：用于显示 runtime 模块"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"stats.chunkRelations"),"：用于显示 parent/children/sibling 的 chunk"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"stats.errorStack"),"：用于显示追踪 webpack 内部的堆栈错误"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"stats.preset"),"：选择 preset"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"stats.relatedAssets"),"：用于显示与其他 asset 相关的 asset（如，SourceMaps）"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"stats.warningsFilter")," 已被弃用，请改用 ",(0,t.kt)("inlineCode",{parentName:"li"},"ignoreWarnings")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"BannerPlugin.banner")," 签名已变更",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"data.basename")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"data.query")),(0,t.kt)("li",{parentName:"ul"},"迁移：从 ",(0,t.kt)("inlineCode",{parentName:"li"},"filename")," 中获取"))),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"SourceMapDevToolPlugin")," 的 ",(0,t.kt)("inlineCode",{parentName:"li"},"lineToLine"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：无可替代项"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"[hash]")," 作为完整的编译 hash 值，现已被弃用",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"[fullhash]")," 代替，或最好选用其他 hash 选项"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"[modulehash]")," 已被弃用",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"[hash]")," 代替"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"[moduleid]")," 已被弃用",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"[id]")," 代替"))),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"[filebase]"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"[base]")," 代替"))),(0,t.kt)("li",{parentName:"ul"},"基于文件模板的新 placeholders（例如 SourceMapDevToolPlugin）",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"[name]")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"[base]")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"[path]")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"[ext]")))),(0,t.kt)("li",{parentName:"ul"},"当给 ",(0,t.kt)("inlineCode",{parentName:"li"},"externals")," 传递一个函数时，现在有一个不同的签名 ",(0,t.kt)("inlineCode",{parentName:"li"},"({ context, request }, callback)"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：改变函数签名"))),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"externalsPresets")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"experiments"),"（见上述实验部分）"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"watchOptions.followSymlinks")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"watchOptions.ignored")," 可以使用正则匹配"),(0,t.kt)("li",{parentName:"ul"},"暴露了 ",(0,t.kt)("inlineCode",{parentName:"li"},"webpack.util.serialization"))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"changes-to-the-defaults",parentName:"h3"}),"默认值变更",(0,t.kt)("a",{href:"#changes-to-the-defaults","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"当 browserslist 配置可用时，",(0,t.kt)("inlineCode",{parentName:"li"},"target")," 默认为 ",(0,t.kt)("inlineCode",{parentName:"li"},'"browserslist"')),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"module.unsafeCache")," 现默认只对 ",(0,t.kt)("inlineCode",{parentName:"li"},"node_modules")," 启用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.moduleIds")," 在生产环境下默认为 ",(0,t.kt)("inlineCode",{parentName:"li"},"deterministic"),"，而不再是 ",(0,t.kt)("inlineCode",{parentName:"li"},"size")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.chunkIds")," 在生产环境下默认为 ",(0,t.kt)("inlineCode",{parentName:"li"},"deterministic"),"，而不再是 ",(0,t.kt)("inlineCode",{parentName:"li"},"total-size")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.nodeEnv")," 在 ",(0,t.kt)("inlineCode",{parentName:"li"},"none")," 模式下，默认为 ",(0,t.kt)("inlineCode",{parentName:"li"},"false")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks.minSize")," 在生产环境下默认为 ",(0,t.kt)("inlineCode",{parentName:"li"},"20k")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks.enforceSizeThreshold")," 在生产环境下默认为 ",(0,t.kt)("inlineCode",{parentName:"li"},"50k")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks")," 中的 ",(0,t.kt)("inlineCode",{parentName:"li"},"minRemainingSize")," 在生产环境下默认为 ",(0,t.kt)("inlineCode",{parentName:"li"},"minSize"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"这将导致在剩余部分过小的情况下，创建更少的 chunk"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks")," 中的 ",(0,t.kt)("inlineCode",{parentName:"li"},"maxAsyncRequests")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"maxInitialRequests")," 默认值增加到了 30"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks.cacheGroups.vendors")," 更名为 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks.cacheGroups.defaultVendors")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.splitChunks.cacheGroups.defaultVendors.reuseExistingChunk")," 默认为 ",(0,t.kt)("inlineCode",{parentName:"li"},"true")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"optimization.minimizer")," 的 target 默认在 terser 选项中使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"compress.passes: 2")),(0,t.kt)("li",{parentName:"ul"},"当使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"cache")," 时， ",(0,t.kt)("inlineCode",{parentName:"li"},"resolve(Loader).cache")," 默认为 ",(0,t.kt)("inlineCode",{parentName:"li"},"true")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"resolve(Loader).cacheWithContext")," 默认为 ",(0,t.kt)("inlineCode",{parentName:"li"},"false")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"resolveLoader.extensions")," 移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},".json")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"node.global")," 中的 ",(0,t.kt)("inlineCode",{parentName:"li"},"node.__filename")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"node.__dirname")," 默认为 ",(0,t.kt)("inlineCode",{parentName:"li"},"false")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"stats.errorStack")," 默认为 ",(0,t.kt)("inlineCode",{parentName:"li"},"false"))),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"loader-related-changes",parentName:"h2"}),"加载器相关变更",(0,t.kt)("a",{href:"#loader-related-changes","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"thisgetoptions",parentName:"h3"}),(0,t.kt)("inlineCode",{parentName:"h3"},"this.getOptions"),(0,t.kt)("a",{href:"#thisgetoptions","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"这个新的 API 应该可以简化加载器中选项的使用。\n它允许传递 JSON 模式进行验证。\n详情请见",(0,t.kt)("a",{href:"https://github.com/webpack/webpack/pull/10017",parentName:"p"},"PR")),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"thisexec",parentName:"h3"}),(0,t.kt)("inlineCode",{parentName:"h3"},"this.exec"),(0,t.kt)("a",{href:"#thisexec","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"这一点已从加载器上下文中删除"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：这可以在加载器本身实现。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"thisgetresolve",parentName:"h3"}),(0,t.kt)("inlineCode",{parentName:"h3"},"this.getResolve"),(0,t.kt)("a",{href:"#thisgetresolve","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"loader API 中的 ",(0,t.kt)("inlineCode",{parentName:"p"},"getResolve(options)")," 将以另一种方式合并选项，参见",(0,t.kt)("inlineCode",{parentName:"p"},"module.rule``resolve"),"。"),(0,t.kt)("p",null,"由于 webpack 5 在不同的发布依赖关系之间存在差异，所以传递一个 ",(0,t.kt)("inlineCode",{parentName:"p"},"dependencyType")," 作为选项可能是有意义的（例如 ",(0,t.kt)("inlineCode",{parentName:"p"},'"esm"'),"，",(0,t.kt)("inlineCode",{parentName:"p"},'"commonjs"'),"，或者其他）。"),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"major-internal-changes",parentName:"h2"}),"重大内部变更",(0,t.kt)("a",{href:"#major-internal-changes","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("aside",{className:"todo"},(0,t.kt)("h6",{className:"todo__prefix",parentName:"aside"},"TODO"),(0,t.kt)("p",{parentName:"aside"},"这一部分可能需要更多的完善。")),(0,t.kt)("p",null,"以下改动只与插件作者有关："),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"new-plugin-order",parentName:"h3"}),"新的插件运行顺序",(0,t.kt)("a",{href:"#new-plugin-order","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"现在 webpack 5 中的插件在应用配置默认值 ",(0,t.kt)("strong",{parentName:"p"},"之前")," 就会被应用。\n这使得插件可以应用自己的默认值，或者作为配置预设。"),(0,t.kt)("p",null,"但这也是一个突破性的变化，因为插件在应用时不能依赖配置值的设置。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：只在插件钩子中访问配置。或者最好完全避免访问配置，并通过构造函数获取选项。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"runtime-modules",parentName:"h3"}),"运行时模块",(0,t.kt)("a",{href:"#runtime-modules","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,'大部分的运行时代码被移到了所谓的"运行时模块"中。这些特殊模块负责添加运行时代码。它们可以被添加到任何块中，但目前总是被添加到运行时块中。"运行时需求"控制哪些运行时模块（或核心运行时部件）被添加到代码包中。这确保了只有使用的运行时代码才会被添加到代码包中。未来，运行时模块也可以添加到按需加载的块中，以便在需要时加载运行时代码。'),(0,t.kt)("p",null,"在大多数情况下，核心运行代码时允许内联入口模块，而不是用 ",(0,t.kt)("inlineCode",{parentName:"p"},"__webpack_require__")," 来调用它。如果代码包中没有其他模块，则根本不需要使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"__webpack_require__"),"。这与模块合并很好地结合在一起，即多个模块被合并成一个模块。"),(0,t.kt)("p",null,"在最好的情况下，根本不需要运行时代码。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：如果你在插件中注入运行时代码到 webpack 运行时，可以考虑使用 RuntimeModules 来代替。instead."),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"serialization",parentName:"h3"}),"序列化",(0,t.kt)("a",{href:"#serialization","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"我们添加了一个序列化机制，以允许在 webpack 中对复杂对象进行序列化。它有一个可选的语义，所以那些应该被序列化的类需要被明确地标记出来（并且实现它们的序列化）。大多数模块、所有的依赖关系和一些错误都已经这样做了。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：当使用自定义模块或依赖关系时，建议将它们实现成可序列化的，以便从持久化缓存中获益。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"plugins-for-caching",parentName:"h3"}),"用于缓存的插件",(0,t.kt)("a",{href:"#plugins-for-caching","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"增加了一个带有插件接口的 ",(0,t.kt)("inlineCode",{parentName:"p"},"Cache")," 类。该类可用于写入和读取缓存。根据配置的不同，不同的插件可以为缓存添加功能。",(0,t.kt)("inlineCode",{parentName:"p"},"MemoryCachePlugin")," 增加了内存缓存功能。",(0,t.kt)("inlineCode",{parentName:"p"},"FileCachePlugin")," 增加了持久性（文件系统）缓存。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"FileCachePlugin")," 使用序列化机制将缓存项目持久化到磁盘上或从磁盘上恢复。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"hook-object-frozen",parentName:"h3"}),"冻结钩子对象",(0,t.kt)("a",{href:"#hook-object-frozen","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"有 ",(0,t.kt)("inlineCode",{parentName:"p"},"hooks")," 的类会冻结其 ",(0,t.kt)("inlineCode",{parentName:"p"},"hooks")," 对象，所以通过这种方式添加自定义钩子已经不可能了。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：推荐的添加自定义钩子的方式是使用 WeakMap 和一个静态的 ",(0,t.kt)("inlineCode",{parentName:"p"},"getXXXHooks(XXX)"),"(即",(0,t.kt)("inlineCode",{parentName:"p"},"getCompilationHook(compilation)"),")方法。内部类使用与自定义钩子相同的机制。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"tapable-upgrade",parentName:"h3"}),"Tapable 插件升级",(0,t.kt)("a",{href:"#tapable-upgrade","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"webpack 3 插件的 compat 层已经被移除。它在 webpack 4 中已经被取消了。"),(0,t.kt)("p",null,"一些较少使用的 tapable API 被删除或废弃。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：使用新的 tapable API。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"staged-hooks",parentName:"h3"}),"Stage 钩子",(0,t.kt)("a",{href:"#staged-hooks","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"在封装代码包过程的几个步骤中，不同阶段有多个钩子，即 ",(0,t.kt)("inlineCode",{parentName:"p"},"optimizeDependenciesBasic"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"optimizeDependencies")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"optimizeDependenciesAdvanced"),"。这些已经被删除，改为一个单一的钩子，它可以与 ",(0,t.kt)("inlineCode",{parentName:"p"},"stage")," 选项一起使用。参见 ",(0,t.kt)("inlineCode",{parentName:"p"},"OptimizationStages"),"了解可能的 ",(0,t.kt)("inlineCode",{parentName:"p"},"stage")," 选项值。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),": 侵入剩余的钩子。你可以添加一个 ",(0,t.kt)("inlineCode",{parentName:"p"},"stage")," 选项。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"mainchunkmoduletemplate-deprecation",parentName:"h3"}),"Main/Chunk/ModuleTemplate 废弃",(0,t.kt)("a",{href:"#mainchunkmoduletemplate-deprecation","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"打包模板已经重构。MainTemplate/ChunkTemplate/ModuleTemplate 被废弃，现在 JavascriptModulesPlugin 负责 JS 模板。"),(0,t.kt)("p",null,"在那次重构之前，JS 输出由 Main/ChunkTemplate 处理，而另一个输出（即 WASM、CSS）则由插件处理。这样看起来 JS 是一等公民，而其它输出是二等。重构改变了这一点，所有的输出都由他们的插件处理。"),(0,t.kt)("p",null,"依然可以侵入部分模板。钩子现在在 JavascriptModulesPlugin 中，而不是 Main/ChunkTemplate 中。(是的，插件也可以有钩子，我称之为附加钩子。)"),(0,t.kt)("p",null,"有一个兼容层，所以 Main/Chunk/ModuleTemplate 仍然存在，但只是将 tap 调用委托给新的钩子位置。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：按照 deprecation 消息中的建议。主要是指向不同位置的钩子。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"entry-point-descriptor",parentName:"h3"}),"入口文件描述符",(0,t.kt)("a",{href:"#entry-point-descriptor","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"如果传递一个对象作为入口文件，其值可能是一个字符串、字符串数组或描述符："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  entry",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    catalog",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./catalog.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"描述符语法可用于向入口文件传递附加选项。"),(0,t.kt)("h4",null,(0,t.kt)("span",{id:"entry-point-output-filename",parentName:"h4"}),"入口文件输出文件名",(0,t.kt)("a",{href:"#entry-point-output-filename","aria-hidden":"true",tabIndex:"-1",parentName:"h4"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"默认情况下，入口文件代码块的输出文件名是从",(0,t.kt)("inlineCode",{parentName:"p"},"output.filename"),"中提取的，\n但你可以为特定入口文件指定一个自定义的输出文件名："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  entry",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    about",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./about.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," filename",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'pages/[name][ext]'")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("h4",null,(0,t.kt)("span",{id:"entry-point-dependency",parentName:"h4"}),"入口文件依赖",(0,t.kt)("a",{href:"#entry-point-dependency","aria-hidden":"true",tabIndex:"-1",parentName:"h4"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"默认情况下，每个入口文件代码块都存储了它所使用的所有模块。使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"dependOn"),"-选项，\n你可以将模块从一个入口文件代码块共享到另一个："),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  entry",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    app",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{")," ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./app.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," dependOn",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'react-vendors'")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'react-vendors'"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),(0,t.kt)("span",{className:"token string",parentName:"code"},"'react'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'react-dom'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'prop-types'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",null,"app 代码块 将不包含 ",(0,t.kt)("inlineCode",{parentName:"p"},"react-vendors")," 所拥有的模块。"),(0,t.kt)("h4",null,(0,t.kt)("span",{id:"entry-point-library",parentName:"h4"}),"入口文件类库",(0,t.kt)("a",{href:"#entry-point-library","aria-hidden":"true",tabIndex:"-1",parentName:"h4"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"入口文件描述符允许为每个入口文件传递不同的 ",(0,t.kt)("inlineCode",{parentName:"p"},"library")," 选项。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  entry",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    commonjs",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./lib.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      library",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        type",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'commonjs-module'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    amd",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./lib.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      library",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n        type",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'amd'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("h4",null,(0,t.kt)("span",{id:"entry-point-runtime",parentName:"h4"}),"入口文件运行时",(0,t.kt)("a",{href:"#entry-point-runtime","aria-hidden":"true",tabIndex:"-1",parentName:"h4"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"入口文件描述符允许为每个入口文件指定一个 ",(0,t.kt)("inlineCode",{parentName:"p"},"运行时代码"),"。\n当指定时，将创建一个以该名称命名的代码块，其中仅包含该条目的运行时代码。\n当多个条目指定相同的",(0,t.kt)("inlineCode",{parentName:"p"},"运行时代码"),"时，该块将包含所有这些入口文件的共同运行时代码。\n这意味着它们可以在同一个 HTML 页面中一起使用。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  entry",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    app",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./app.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      runtime",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'app-runtime'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("h4",null,(0,t.kt)("span",{id:"entry-point-chunk-loading",parentName:"h4"}),"入口文件代码块加载",(0,t.kt)("a",{href:"#entry-point-chunk-loading","aria-hidden":"true",tabIndex:"-1",parentName:"h4"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"入口文件描述符允许为每个入口文件指定一个 ",(0,t.kt)("inlineCode",{parentName:"p"},"chunkLoading"),"。\n这个入口文件的运行时代码将使用这个来加载代码块。"),(0,t.kt)("pre",null,(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  entry",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    app",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./app.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    worker",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      ",(0,t.kt)("span",{className:"token keyword",parentName:"code"},"import"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'./worker.js'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n      chunkLoading",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'importScripts'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"order-and-ids",parentName:"h3"}),"排序与 ID",(0,t.kt)("a",{href:"#order-and-ids","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 曾经在编译阶段以特定的方式对模块和代码块进行排序，以递增的方式分配 ID。现在不再是这样了。顺序将不再用于 ID 的生成，取而代之的是，ID 生成的完全控制在插件中。"),(0,t.kt)("p",null,"优化模块和代码块顺序的钩子已经被移除。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：在编译阶段，你不能再依赖模块和代码块的顺序了。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"arrays-to-sets",parentName:"h3"}),"从数组到集合(Set)",(0,t.kt)("a",{href:"#arrays-to-sets","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Compilation.modules 现在是一个集合"),(0,t.kt)("li",{parentName:"ul"},"Compilation.chunks 现在是一个集合"),(0,t.kt)("li",{parentName:"ul"},"Chunk.files 现在是一个集合")),(0,t.kt)("p",null,"存在一个适配层但会打印废弃的警告。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),": 使用集合方法代替数组方法。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"compilationfilesysteminfo",parentName:"h3"}),"Compilation.fileSystemInfo",(0,t.kt)("a",{href:"#compilationfilesysteminfo","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"这个新 class 可以用来以缓存的方式访问文件系统的信息。目前，它允许访问文件和目录的时间戳。如果可能的话，关于时间戳的信息会从监听那里传输过了，否则将由文件系统访问决定。"),(0,t.kt)("p",null,"后续，会增加访问文件内容 hash 值的功能，模块可以用文件内容代替文件 hash 来检查有效性。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"compilation.fileSystemInfo")," API，替代 ",(0,t.kt)("inlineCode",{parentName:"p"},"file/contextTimestamps"),"。"),(0,t.kt)("p",null,"现在可以对目录进行时间戳管理，允许对 ContextModules 进行序列化。"),(0,t.kt)("p",null,"增加了 ",(0,t.kt)("inlineCode",{parentName:"p"},"Compiler.modifiedFiles"),"（类似于 ",(0,t.kt)("inlineCode",{parentName:"p"},"Compiler.removedFiles"),"），以便更容易引用更改后的文件。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"filesystems",parentName:"h3"}),"Filesystems",(0,t.kt)("a",{href:"#filesystems","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"新增了一个类似于 ",(0,t.kt)("inlineCode",{parentName:"p"},"compiler.inputFileSystem")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"compiler.outputFileSystem")," 的新 API ",(0,t.kt)("inlineCode",{parentName:"p"},"compiler.intermediateFileSystem"),"，用于所有不被认为是输入或输出的 fs 操作，如写入 records，缓存或输出 profiling。"),(0,t.kt)("p",null,"文件系统现在有 ",(0,t.kt)("inlineCode",{parentName:"p"},"fs")," 接口，不再需要 ",(0,t.kt)("inlineCode",{parentName:"p"},"join")," 或 ",(0,t.kt)("inlineCode",{parentName:"p"},"mkdirp")," 等额外方式。但如果它们包含 ",(0,t.kt)("inlineCode",{parentName:"p"},"join")," 或 ",(0,t.kt)("inlineCode",{parentName:"p"},"dirname")," 等类似方法，也会被使用。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"hot-module-replacement",parentName:"h3"}),"模块热替换",(0,t.kt)("a",{href:"#hot-module-replacement","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"HMR 运行时已被重构为运行时模块。",(0,t.kt)("inlineCode",{parentName:"p"},"HotUpdateChunkTemplate")," 已被合并入 ",(0,t.kt)("inlineCode",{parentName:"p"},"ChunkTemplate")," 中。ChunkTemplates 和 plugins 也应处理 ",(0,t.kt)("inlineCode",{parentName:"p"},"HotUpdateChunk")," 了。"),(0,t.kt)("p",null,"HMR 运行时的 javascript 部分已从核心 HMR 运行时钟分离了出来。其他模块类型现在也可以使用它们自己的方式处理 HMR。在未来，这将使得 HMR 处理诸如 mini-css-extract-plugin 或 WASM 模块。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：此为新功能，无需迁移。"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"import.meta.webpackHot")," 公开了与 ",(0,t.kt)("inlineCode",{parentName:"p"},"module.hot"),' 相同的 API。当然可以在 ESM 模块（.mjs，package.json 中的 type: "module"）中使用，这些模块不能访问 ',(0,t.kt)("inlineCode",{parentName:"p"},"module"),"。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"work-queues",parentName:"h3"}),"工作队列",(0,t.kt)("a",{href:"#work-queues","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 曾经通过函数调用函数的形式来进行模块处理，还有一个 ",(0,t.kt)("inlineCode",{parentName:"p"},"semaphore")," 选项限制并行性。",(0,t.kt)("inlineCode",{parentName:"p"},"Compilation.semaphore")," 已被移除，现在可以使用异步队列处理，每个步骤都有独立的队列："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.factorizeQueue"),"：为一组 dependencies 调用模块工厂。"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.addModuleQueue"),"：将模块添加到编译队列中（可以使用缓存恢复模块）"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.buildQueue"),"：必要时构建模块（可将模块存储到缓存中）"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.rebuildQueue"),"：如需手动触发，则会重新构建模块"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.processDependenciesQueue"),"：处理模块的 dependencies。")),(0,t.kt)("p",null,"这些队列会有一些 hook 来监听并拦截工作的进程。"),(0,t.kt)("p",null,"未来，多个编译器会同时工作，可以通过拦截这些队列来进行编译工作的编排。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：此为新功能，无需迁移。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"logging",parentName:"h3"}),"Logging",(0,t.kt)("a",{href:"#logging","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 内部引入了一些日志记录的方法。\n",(0,t.kt)("inlineCode",{parentName:"p"},"stats.logging")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"infrastructureLogging")," 选项可用于启用这些信息。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"module-and-chunk-graph",parentName:"h3"}),"模块和 chunk 图",(0,t.kt)("a",{href:"#module-and-chunk-graph","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 曾经在依赖关系中存储了已解析的模块，并在 chunk 中存储引入的模块。但现已发生变化。所有关于模块在模块图中如何连接的信息，现在都存储在 ModulGraph 的 class 中。所有关于模块与 chunk 如何连接的信息现在都已存储在 ChunkGraph 的 class 中。依赖于 chunk 图的信息也存储在相关的 class 中。"),(0,t.kt)("p",null,"这意味着以下关于模块的信息已被移动："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Module connections -> ModuleGraph"),(0,t.kt)("li",{parentName:"ul"},"Module issuer -> ModuleGraph"),(0,t.kt)("li",{parentName:"ul"},"Module optimization bailout -> ModuleGraph (TODO: check if it should ChunkGraph instead)"),(0,t.kt)("li",{parentName:"ul"},"Module usedExports -> ModuleGraph"),(0,t.kt)("li",{parentName:"ul"},"Module providedExports -> ModuleGraph"),(0,t.kt)("li",{parentName:"ul"},"Module pre order index -> ModuleGraph"),(0,t.kt)("li",{parentName:"ul"},"Module post order index -> ModuleGraph"),(0,t.kt)("li",{parentName:"ul"},"Module depth -> ModuleGraph"),(0,t.kt)("li",{parentName:"ul"},"Module profile -> ModuleGraph"),(0,t.kt)("li",{parentName:"ul"},"Module id -> ChunkGraph"),(0,t.kt)("li",{parentName:"ul"},"Module hash -> ChunkGraph"),(0,t.kt)("li",{parentName:"ul"},"Module runtime requirements -> ChunkGraph"),(0,t.kt)("li",{parentName:"ul"},"Module is in chunk -> ChunkGraph"),(0,t.kt)("li",{parentName:"ul"},"Module is entry in chunk -> ChunkGraph"),(0,t.kt)("li",{parentName:"ul"},"Module is runtime module in chunk -> ChunkGraph"),(0,t.kt)("li",{parentName:"ul"},"Chunk runtime requirements -> ChunkGraph")),(0,t.kt)("p",null,"当从缓存中恢复模块时，webpack 会将模块从图中断开。现在已无需这么做。一个模块不存储图形的任何信息，技术上可以在多个图形中使用。这会使得缓存变得更加容易。"),(0,t.kt)("p",null,"这部分变化中大多数都有一个 compat-layer，当使用时，它会打印一个弃用警告。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：在 ModuleGraph 和 ChunkGraph 上使用新的 API。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"init-fragments",parentName:"h3"}),"Init Fragments",(0,t.kt)("a",{href:"#init-fragments","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"DependenciesBlockVariables")," 已被移除，改为 ",(0,t.kt)("inlineCode",{parentName:"p"},"InitFragments"),"。",(0,t.kt)("inlineCode",{parentName:"p"},"DependencyTemplates")," 现在可以添加 ",(0,t.kt)("inlineCode",{parentName:"p"},"InitFragments"),"，以将代码注入模块源的起始位置。",(0,t.kt)("inlineCode",{parentName:"p"},"InitFragments")," 允许删除重复数据。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"InitFragments")," 代替，而无需在源文件的负索引出插入。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"module-source-types",parentName:"h3"}),"模块 Source Types",(0,t.kt)("a",{href:"#module-source-types","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Modules 现在必须通过 ",(0,t.kt)("inlineCode",{parentName:"p"},"Module.getSourceTypes()")," 来定义它们支持的源码类型。根据这一点，不同的插件会用这些类型调用 ",(0,t.kt)("inlineCode",{parentName:"p"},"source()"),"。对于源类型为 ",(0,t.kt)("inlineCode",{parentName:"p"},"javascript")," 的 ",(0,t.kt)("inlineCode",{parentName:"p"},"JavascriptModulesPlugin")," 会将源代码嵌入到 bundle 中。源类型 ",(0,t.kt)("inlineCode",{parentName:"p"},"webassembly")," 的 ",(0,t.kt)("inlineCode",{parentName:"p"},"WebAssemblyModulesPlugin")," 会 emit 一个 wasm 文件。同时，也支持自定义源类型，例如，mini-css-extract-plugin 会使用源类型为 ",(0,t.kt)("inlineCode",{parentName:"p"},"stylesheet")," 将源码嵌入到 css 文件中。"),(0,t.kt)("p",null,"模块类型与源类型间没有关系。即使模块类型为 ",(0,t.kt)("inlineCode",{parentName:"p"},"json"),"，也可以使用源类型为 ",(0,t.kt)("inlineCode",{parentName:"p"},"javascript")," 和模块类型为 ",(0,t.kt)("inlineCode",{parentName:"p"},"webassembly/experimental")," 的 ",(0,t.kt)("inlineCode",{parentName:"p"},"javascript")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"webassembly"),"。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：自定义模块需要实现这些新的接口方法。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"plugins-for-stats",parentName:"h3"}),"Stats 的插件",(0,t.kt)("a",{href:"#plugins-for-stats","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Stats 的 ",(0,t.kt)("inlineCode",{parentName:"p"},"preset"),"，",(0,t.kt)("inlineCode",{parentName:"p"},"default"),"，",(0,t.kt)("inlineCode",{parentName:"p"},"json")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"toString")," 现已由插件系统内置。将当前的 Stats 转换为插件。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：你现在可以自定义它，而无需替换整个 Stats 功能。额外的信息现在可以添加到 stats json 中，而不是单独编写文件。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"new-watching",parentName:"h3"}),"全新的监听",(0,t.kt)("a",{href:"#new-watching","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"webpack 所使用的监听已重构。它之前使用的是 ",(0,t.kt)("inlineCode",{parentName:"p"},"chokidar")," 和原生依赖 ",(0,t.kt)("inlineCode",{parentName:"p"},"fsevents"),"（仅在 macOS 上）。现在它在只基于原生的 Node.js 中的 ",(0,t.kt)("inlineCode",{parentName:"p"},"fs"),"。这意味着在 webpack 中已经没有原生依赖了。"),(0,t.kt)("p",null,"它还能在监听时捕捉更多关于文件系统的信息。目前，它还可以捕获 mtimes 和监视事件时间，以及丢失文件的信息。为此，",(0,t.kt)("inlineCode",{parentName:"p"},"WatchFileSystem")," API 做了一点小改动。在修改的同时，我们还将 Arrays 转换为 Sets，Objects 转换为 Maps。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"sizeonlysource-after-emit",parentName:"h3"}),"SizeOnlySource after emit",(0,t.kt)("a",{href:"#sizeonlysource-after-emit","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 现在使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"SizeOnlySource")," 替换 ",(0,t.kt)("inlineCode",{parentName:"p"},"Compilation.assets")," 中的 Sources，以减少内存占用。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"emitting-assets-multiple-times",parentName:"h3"}),"Emitting assets multiple times",(0,t.kt)("a",{href:"#emitting-assets-multiple-times","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"原来的 ",(0,t.kt)("inlineCode",{parentName:"p"},"Multiple assets emit different content to the same filename")," 警告，现在成为错误。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"exportsinfo",parentName:"h3"}),"ExportsInfo",(0,t.kt)("a",{href:"#exportsinfo","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"重构了模块导出信息的存储方式。ModuleGraph 现在为每个 ",(0,t.kt)("inlineCode",{parentName:"p"},"Module")," 提供了一个 ",(0,t.kt)("inlineCode",{parentName:"p"},"ExportsInfo"),"，它用于存储每个 export 的信息。如果模块仅以副作用的方式使用，它还存储了关于未知 export 的信息，"),(0,t.kt)("p",null,"对于每个 export，都会存储以下信息："),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"是否使用 export? 是否使用并不确定。（详见 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.usedExports"),"）"),(0,t.kt)("li",{parentName:"ul"},"是否提供 export? 是否提供并不确定。（详见 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.providedExports"),"）"),(0,t.kt)("li",{parentName:"ul"},"能否重命名 export 名? 是否重命名，也不确定"),(0,t.kt)("li",{parentName:"ul"},"如果 export 已重新命名，则为新名称。（详见 ",(0,t.kt)("inlineCode",{parentName:"li"},"optimization.mangleExports"),"）"),(0,t.kt)("li",{parentName:"ul"},"嵌套的 ExportsInfo，如果 export 是一个含有附加信息的对象，那么它本身就是一个对象",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"用于重新导出命名空间对象：",(0,t.kt)("inlineCode",{parentName:"li"},'import * as X from "..."; export { X };')),(0,t.kt)("li",{parentName:"ul"},"用于表示 JSON 模块中的结构")))),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"code-generation-phase",parentName:"h3"}),"代码生成阶段",(0,t.kt)("a",{href:"#code-generation-phase","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"编译的代码生成功能作为单独的编译阶段。它不再隐藏在 ",(0,t.kt)("inlineCode",{parentName:"p"},"Module.source()")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"Module.getRuntimeRequirements()")," 中运行了。"),(0,t.kt)("p",null,"这应该会使得流程更加简洁。它还运行报告该阶段的进度。并使得代码生成在剖析时更加清晰可见。"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"迁移"),"：",(0,t.kt)("inlineCode",{parentName:"p"},"Module.source()")," 和 ",(0,t.kt)("inlineCode",{parentName:"p"},"Module.getRuntimeRequirements()")," 已弃用。使用 ",(0,t.kt)("inlineCode",{parentName:"p"},"Module.codeGeneration()")," 代替。"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"dependencyreference",parentName:"h3"}),"依赖关系参考",(0,t.kt)("a",{href:"#dependencyreference","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"Webpack 曾经有一个单一的方法和类型来表示依赖关系的引用（",(0,t.kt)("inlineCode",{parentName:"p"},"Compilation.getDependencyReference")," 会返回一个 ",(0,t.kt)("inlineCode",{parentName:"p"},"DependencyReference"),"）\n该类型用于引入关于该引用的所有信息，如 被引用的模块，已经引入了哪些 export，如果是弱引用，还需要订阅一些相关信息。"),(0,t.kt)("p",null,"把所有这些信息构建在一起，拿到参考的成本就很高，而且很频繁（每次有人需要一个信息）。"),(0,t.kt)("p",null,"在 webpack5 中，这部分代码库被重构了，方法进行了拆分。"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"引用的模块可以从 ModuleGraphConnection 中读取"),(0,t.kt)("li",{parentName:"ul"},"引入的导出名，可以通过 ",(0,t.kt)("inlineCode",{parentName:"li"},"Dependency.getReferencedExports()")," 获取"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Dependency")," 的 class 上会有一个 ",(0,t.kt)("inlineCode",{parentName:"li"},"weak")," 的 flag"),(0,t.kt)("li",{parentName:"ul"},"排序只与 ",(0,t.kt)("inlineCode",{parentName:"li"},"HarmonyImportDependencies")," 相关，可以通过 ",(0,t.kt)("inlineCode",{parentName:"li"},"sourceOrder")," 属性获取")),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"presentational-dependencies",parentName:"h3"}),"Presentational Dependencies",(0,t.kt)("a",{href:"#presentational-dependencies","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("p",null,"这是 ",(0,t.kt)("inlineCode",{parentName:"p"},"NormalModules")," 的一种新 Dependencies 类型：Presentational Dependencies"),(0,t.kt)("p",null,"这些 dependencies 只在代码生成阶段使用，但在模块图构建过程中未使用。\n所以它们永远不能引用模块或影响导出/导入。"),(0,t.kt)("p",null,"这些依赖关系的处理成本较低，webpack 会尽可能地使用它们"),(0,t.kt)("h3",null,(0,t.kt)("span",{id:"deprecated-loaders",parentName:"h3"}),"弃用 loaders",(0,t.kt)("a",{href:"#deprecated-loaders","aria-hidden":"true",tabIndex:"-1",parentName:"h3"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("a",{href:"https://github.com/webpack-contrib/null-loader",parentName:"p"},(0,t.kt)("inlineCode",{parentName:"a"},"null-loader"))),(0,t.kt)("p",{parentName:"li"},"已被弃用。使用"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  resolve",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    alias",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      xyz$",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token boolean",parentName:"code"},"false"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))),(0,t.kt)("p",{parentName:"li"},"或者使用绝对路径"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{className:"hljs language-js",parentName:"pre"},"module",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),"exports ",(0,t.kt)("span",{className:"token operator",parentName:"code"},"=")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n  resolve",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n    alias",(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"{"),"\n      ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"["),"path",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"."),(0,t.kt)("span",{className:"token function",parentName:"code"},"resolve"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"("),"__dirname",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},",")," ",(0,t.kt)("span",{className:"token string",parentName:"code"},"'....'"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},")"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"]"),(0,t.kt)("span",{className:"token operator",parentName:"code"},":")," ",(0,t.kt)("span",{className:"token boolean",parentName:"code"},"false"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n    ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n  ",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},","),"\n",(0,t.kt)("span",{className:"token punctuation",parentName:"code"},"}"),(0,t.kt)("span",{className:"token punctuation",parentName:"code"},";"))))),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"minor-changes",parentName:"h2"}),"微小改动",(0,t.kt)("a",{href:"#minor-changes","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Compiler.name"),"：当生成带有绝对路径的编译器名称时，请确保名称使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"|")," 或 ",(0,t.kt)("inlineCode",{parentName:"li"},"!")," 分隔。",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"使用空格作为分隔符的做法现已不再适用。（路径可以保护空格）"),(0,t.kt)("li",{parentName:"ul"},"温馨提示：在 Stats 中输出时 ",(0,t.kt)("inlineCode",{parentName:"li"},"|")," 会被替换为空格。"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"SystemPlugin")," 现已被默认禁用。",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：应避免使用它，因为此规范已被删除。你可以使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"Rule.parser.system: true")," 来重新启用它。"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"ModuleConcatenationPlugin"),"：",(0,t.kt)("inlineCode",{parentName:"li"},"DependencyVariables")," 已被移除，将不再阻止连接。",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"这意味着它现在可以在 ",(0,t.kt)("inlineCode",{parentName:"li"},"module"),"，",(0,t.kt)("inlineCode",{parentName:"li"},"global"),"，",(0,t.kt)("inlineCode",{parentName:"li"},"process")," 或 ProvidePlugin 的情况下进行连接。"))),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Stats.presetToOptions"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"compilation.createStatsOptions")," 代替"))),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"SingleEntryPlugin")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"SingleEntryDependency"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"EntryPlugin")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"EntryDependency")," 代替"))),(0,t.kt)("li",{parentName:"ul"},"chunk 现在可以有多个入口"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"ExtendedAPIPlugin"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：不再需要此插件，在必要时，你可以使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"__webpack_hash__")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"__webpack_chunkname__")," 注入运行时代码。"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"ProgressPlugin")," 不再为 ",(0,t.kt)("inlineCode",{parentName:"li"},"reportProgress")," 使用 tapable 上下文。",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"ProgressPlugin.getReporter(compiler)")," 代替"))),(0,t.kt)("li",{parentName:"ul"},"现已对 ",(0,t.kt)("inlineCode",{parentName:"li"},".mjs")," 文件重新启用 ",(0,t.kt)("inlineCode",{parentName:"li"},"ProvidePlugin")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Stats")," json 中的 ",(0,t.kt)("inlineCode",{parentName:"li"},"errors")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"warnings")," 不再是字符串类型，而是包含必要信息的对象，这些信息会被分割为熟悉。",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：查阅具体属性信息，如 ",(0,t.kt)("inlineCode",{parentName:"li"},"message")," 字段"))),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.normalModuleLoader"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"NormalModule.getCompilationHooks(compilation).loader")," 代替"))),(0,t.kt)("li",{parentName:"ul"},"将 ",(0,t.kt)("inlineCode",{parentName:"li"},"NormalModuleFactory")," 中的 hook 从 waterfall 改为 bailing，修改并对 waterfall 函数的 hook 进行了重命名操作。"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"compilationParams.compilationDependencies"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"插件可以在编译中使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"compilation.file/context/missingDependencies")," 添加依赖关系"),(0,t.kt)("li",{parentName:"ul"},"Compat 层将 ",(0,t.kt)("inlineCode",{parentName:"li"},"compilationDependencies.add")," 委托给 ",(0,t.kt)("inlineCode",{parentName:"li"},"fileDependencies.add"),"。"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"stats.assetsByChunkName[x]")," 始终为一个数组"),(0,t.kt)("li",{parentName:"ul"},"增加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"__webpack_get_script_filename__")," 函数用于获取 script 文件的文件名。"),(0,t.kt)("li",{parentName:"ul"},"在 package.json 中 ",(0,t.kt)("inlineCode",{parentName:"li"},'"sideEffects"')," 将使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"glob-to-regex")," 来代替 ",(0,t.kt)("inlineCode",{parentName:"li"},"micromatch")," 处理。",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"这可能会改变边缘案例的语义。"))),(0,t.kt)("li",{parentName:"ul"},"从 ",(0,t.kt)("inlineCode",{parentName:"li"},"IgnorePlugin")," 中移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"checkContext")),(0,t.kt)("li",{parentName:"ul"},"全新的 ",(0,t.kt)("inlineCode",{parentName:"li"},"__webpack_exports_info__")," API 允许导出使用自省。"),(0,t.kt)("li",{parentName:"ul"},"SourceMapDevToolPlugin 现已适用于非 chunk 资源。"),(0,t.kt)("li",{parentName:"ul"},"当引用的 env 变量缺失且没有降级数据时，EnvironmentPlugin 目前会展示一个错。"),(0,t.kt)("li",{parentName:"ul"},"从 schema 中移除 ",(0,t.kt)("inlineCode",{parentName:"li"},"serve")," 熟悉。")),(0,t.kt)("h2",null,(0,t.kt)("span",{id:"other-minor-changes",parentName:"h2"}),"其他微小改动",(0,t.kt)("a",{href:"#other-minor-changes","aria-hidden":"true",tabIndex:"-1",parentName:"h2"},(0,t.kt)("span",{className:"header-link",parentName:"a"}))),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"移除内置目录，用运行时代替内置目录"),(0,t.kt)("li",{parentName:"ul"},"移除不适用的特性",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"BannerPlugin 目前只支持一个参数，这个参数可以是对象，字符串或函数"))),(0,t.kt)("li",{parentName:"ul"},"移除 ",(0,t.kt)("inlineCode",{parentName:"li"},"CachePlugin")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.entryModule")," 已弃用，使用 ChunkGraph 代替"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.hasEntryModule")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.addModule")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.removeModule")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.getNumberOfModules")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.modulesIterable")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.compareTo")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.containsModule")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.getModules")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.remove")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.moveModule")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.integrate")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.canBeIntegrated")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.isEmpty")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.modulesSize")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.size")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.integratedSize")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.getChunkModuleMaps")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.hasModuleInGraph")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.updateHash")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.getChildIdsByOrders")," 签名已变更（TODO: 考虑移至 ",(0,t.kt)("inlineCode",{parentName:"li"},"ChunkGraph"),"）"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.getChildIdsByOrdersMap")," 签名已变更（TODO: 考虑移至 ",(0,t.kt)("inlineCode",{parentName:"li"},"ChunkGraph"),"）"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.getChunkModuleMaps")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Chunk.setModules")),(0,t.kt)("li",{parentName:"ul"},"移除了废弃的 Chunk 方法"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"ChunkGraph")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"ChunkGroup.setParents")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"ChunkGroup.containsModule")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.cache"),"，改用 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.getCache()")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"ChunkGroup.remove")," 不再断开该 Group 与 block 的连接"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"ChunkGroup.compareTo")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"ChunkGroup.getChildrenByOrders")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"ChunkGroup")," 的 index 和 index 改名为 pre/post order index",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"废弃了 old getter"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"ChunkTemplate.hooks.modules")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"ChunkTemplate.hooks.render")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"ChunkTemplate.updateHashForChunk")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.optimizeChunkOrder")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.optimizeModuleOrder")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.advancedOptimizeModuleOrder")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.optimizeDependenciesBasic")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.optimizeDependenciesAdvanced")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.optimizeModulesBasic")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.optimizeModulesAdvanced")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.optimizeChunksBasic")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.optimizeChunksAdvanced")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.optimizeChunkModulesBasic")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.optimizeChunkModulesAdvanced")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.optimizeExtractedChunksBasic")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.optimizeExtractedChunks")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.optimizeExtractedChunksAdvanced")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.afterOptimizeExtractedChunks")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.stillValidModule")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.statsPreset")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.statsNormalize")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.statsFactory")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.statsPrinter")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.fileDependencies"),"，",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.contextDependencies")," 以及 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.missingDependencies")," 现在变为了 LazySets"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.entries"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.entryDependencies")," 代替"))),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation._preparedEntrypoints")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"dependencyTemplates")," 现已改为 ",(0,t.kt)("inlineCode",{parentName:"li"},"DependencyTemplates")," 的 class 类型，而不再是原始的 ",(0,t.kt)("inlineCode",{parentName:"li"},"Map")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.fileTimestamps")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"contextTimestamps"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.fileSystemInfo")," 代替"))),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.waitForBuildingFinished"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用新队列"))),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.addModuleDependencies")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.prefetch")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.hooks.beforeHash")," 会在创建模块 hash 值后被调用。",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compiliation.hooks.beforeModuleHash")," 代替"))),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.applyModuleIds")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.applyChunkIds")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compiler.root"),"，用于指向根编译器",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"可用于缓存 WeakMaps 中的数据，而非静态作用域内的数据"))),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compiler.hooks.afterDone")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Source.emitted")," 不再由编译器设置",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.emittedAssets")," 代替"))),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compiler/Compilation.compilerPath"),"：此为编译器在编译器树中唯一名称。（在根编译器范围内唯一）"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.needRebuild")," 已弃用",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.needBuild")," 代替"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Dependency.getReference")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Dependency.getExports")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Dependency.getWarnings")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Dependency.getErrors")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Dependency.updateHash")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Dependency.module")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"DependencyTemplate")," 的基类"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"MultiEntryDependency")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"EntryDependency")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"EntryModuleNotFoundError")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"SingleEntryPlugin")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"EntryPlugin")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Generator.getTypes")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Generator.getSize")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Generator.generate")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"HotModuleReplacementPlugin.getParserHooks")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Parser")," 被移至 ",(0,t.kt)("inlineCode",{parentName:"li"},"JavascriptParser")," 中"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"ParserHelpers")," 被移至 ",(0,t.kt)("inlineCode",{parentName:"li"},"JavascriptParserHelpers")," 中"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"MainTemplate.hooks.moduleObj")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"MainTemplate.hooks.currentHash")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"MainTemplate.hooks.addModule")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"MainTemplate.hooks.requireEnsure")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"MainTemplate.hooks.globalHashPaths")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"MainTemplate.hooks.globalHash")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"MainTemplate.hooks.hotBootstrap")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"MainTemplate.hooks")," 部分签名已变更"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.hash")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.renderedHash")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.reasons")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.id")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.index")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.index2")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.depth")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.issuer")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.profile")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.prefetched")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.built")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.used"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.getUsedExports")," 代替"))),(0,t.kt)("li",{parentName:"ul"},"Module.usedExports 已弃用",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"MIGRATION: 使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.getUsedExports")," 代替"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.optimizationBailout")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.exportsArgument")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.optional")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.disconnect")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.unseal")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.setChunks")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.addChunk")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.removeChunk")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.isInChunk")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.isEntryModule")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.getChunks")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.getNumberOfChunks")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.chunksIterable")," 已弃用"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.hasEqualsChunks")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.useSourceMap")," 被移至 ",(0,t.kt)("inlineCode",{parentName:"li"},"NormalModule")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.addReason")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.removeReason")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.rewriteChunkInReasons")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.isUsed"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"isModuleUsed"),"，",(0,t.kt)("inlineCode",{parentName:"li"},"isExportUsed")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"getUsedName")," 代替"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.updateHash")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.sortItems")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.unbuild"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"invalidateBuild")," 代替"))),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.getSourceTypes")),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Module.getRuntimeRequirements")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Module.size")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"ModuleFilenameHelpers.createFilename")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"ModuleProfile")," 的 class 添加了许多数据"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"ModuleReason")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"ModuleTemplate.hooks")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"ModuleTemplate.render")," 签名已变更"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compiler.dependencies"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"MultiCompiler.setDependencies")," 代替"))),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"MultiModule")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"MultiModuleFactory")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"NormalModuleFactory.fileDependencies"),"，",(0,t.kt)("inlineCode",{parentName:"li"},"NormalModuleFactory.contextDependencies")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"NormalModuleFactory.missingDependencies")," 现已使用 LazySets"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"RuntimeTemplate")," 方法现已使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"runtimeRequirements")," 的参数"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"serve")," 属性"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Stats.jsonToString")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Stats.filterWarnings")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Stats.getChildOptions")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Stats")," 的 helper 方法"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Stats.toJson")," 签名已变更（参数二被移除）"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"ExternalModule.external")),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"HarmonyInitDependency")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Dependency.getInitFragments")," 已弃用",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"apply")," ",(0,t.kt)("inlineCode",{parentName:"li"},"initFragements")," 代替"))),(0,t.kt)("li",{parentName:"ul"},"DependencyReference 现将函数传递给模块，而非模块。"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"HarmonyImportSpecifierDependency.redirectedId"),(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"迁移：使用 ",(0,t.kt)("inlineCode",{parentName:"li"},"setId")," 代替"))),(0,t.kt)("li",{parentName:"ul"},"acorn 5 -> 8"),(0,t.kt)("li",{parentName:"ul"},"测试",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"HotTestCases 现可为多个目标运行，包括 ",(0,t.kt)("inlineCode",{parentName:"li"},"async-node")," ",(0,t.kt)("inlineCode",{parentName:"li"},"node")," ",(0,t.kt)("inlineCode",{parentName:"li"},"web")," ",(0,t.kt)("inlineCode",{parentName:"li"},"webworker")),(0,t.kt)("li",{parentName:"ul"},"TestCases 现在可以用 ",(0,t.kt)("inlineCode",{parentName:"li"},'store: "instant"')," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},'store: "pack"')," 来运行系统缓存。"),(0,t.kt)("li",{parentName:"ul"},"TestCases 现在也可以为指定的模块 id 运行。"))),(0,t.kt)("li",{parentName:"ul"},"工具添加了 import 的排序功能（在 CI 检查）"),(0,t.kt)("li",{parentName:"ul"},"当 chunk 的名称与 id 等价时，运行时的 chunk 名称映射不再包含入口"),(0,t.kt)("li",{parentName:"ul"},"将 ",(0,t.kt)("inlineCode",{parentName:"li"},"resolvedModuleId")," ",(0,t.kt)("inlineCode",{parentName:"li"},"resolvedModuleIdentifier")," 和 ",(0,t.kt)("inlineCode",{parentName:"li"},"resolvedModule")," 添加到 Stats 的 reason 中，在完成作用域提升等优化之前，这些 reason 指向模块"),(0,t.kt)("li",{parentName:"ul"},"在 Stats toString 的输出中展示 ",(0,t.kt)("inlineCode",{parentName:"li"},"resolvedModule")),(0,t.kt)("li",{parentName:"ul"},"loader-runner 已升级：https://github.com/webpack/loader-runner/releases/tag/v3.0.0"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Compilation")," 中的 ",(0,t.kt)("inlineCode",{parentName:"li"},"file/context/missingDependencies")," 因性能问题不再排序",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"不要依赖排序"))),(0,t.kt)("li",{parentName:"ul"},"webpack-sources 升级至 version 2：https://github.com/webpack/webpack-sources/releases/tag/v2.0.1"),(0,t.kt)("li",{parentName:"ul"},"删除了对 webpack-command 的支持"),(0,t.kt)("li",{parentName:"ul"},"使用 schema-utils@2 进行模式校验"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"Compiler.assetEmitted")," 改进了参数二，增加了更多信息"),(0,t.kt)("li",{parentName:"ul"},"BannerPlugin 省略了尾部的空白字符"),(0,t.kt)("li",{parentName:"ul"},"从 ",(0,t.kt)("inlineCode",{parentName:"li"},"LimitChunkCountPlugin")," 中移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"minChunkSize")," 选项"),(0,t.kt)("li",{parentName:"ul"},"将与 javascript 相关的文件重组到子目录中",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"webpack.JavascriptModulesPlugin")," -> ",(0,t.kt)("inlineCode",{parentName:"li"},"webpack.javascript.JavascriptModulesPlugin")))),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Logger.getChildLogger")),(0,t.kt)("li",{parentName:"ul"},"将 DllPlugin 中 entryOnly 选项的默认值变更为 true"),(0,t.kt)("li",{parentName:"ul"},"移除了特殊请求的简化逻辑，使用单一的相对路径作为可读模块的名称"),(0,t.kt)("li",{parentName:"ul"},"允许 webpack:// 将 SourceMaps 中的 url 改为相对于 webpack 根目录的路径"),(0,t.kt)("li",{parentName:"ul"},"添加了 API 用于生成和处理针对 webpack 配置的 CLI 参数"),(0,t.kt)("li",{parentName:"ul"},"当使用 System.js 作为 libraryTarget 时，在 System 中添加 ",(0,t.kt)("inlineCode",{parentName:"li"},"__system_context__")," 作为上下文"),(0,t.kt)("li",{parentName:"ul"},"为 DefinePlugin 添加 bigint 的支持"),(0,t.kt)("li",{parentName:"ul"},"对基本环节添加 bigint 的支持，例如 maths"),(0,t.kt)("li",{parentName:"ul"},"移除在创建 hash 后修改编译 hash 的功能"),(0,t.kt)("li",{parentName:"ul"},"移除了 ",(0,t.kt)("inlineCode",{parentName:"li"},"HotModuleReplacementPlugin")," 的 multiStep 模式"),(0,t.kt)("li",{parentName:"ul"},"当使用嵌套的对象或数组时，",(0,t.kt)("inlineCode",{parentName:"li"},"emitAsset")," 中的 ",(0,t.kt)("inlineCode",{parentName:"li"},"assetInfo")," 将被合并"),(0,t.kt)("li",{parentName:"ul"},"当基于 ",(0,t.kt)("inlineCode",{parentName:"li"},"filename")," 生成路径时，",(0,t.kt)("inlineCode",{parentName:"li"},"[query]")," 是一个有效占位符，如 asset"),(0,t.kt)("li",{parentName:"ul"},"添加了 ",(0,t.kt)("inlineCode",{parentName:"li"},"Compilation.deleteAsset"),"，用于正确删除 asset 和非公用的相关资源"),(0,t.kt)("li",{parentName:"ul"},"将 ",(0,t.kt)("inlineCode",{parentName:"li"},'require("webpack-sources")')," 暴露为 ",(0,t.kt)("inlineCode",{parentName:"li"},'require("webpack").sources')),(0,t.kt)("li",{parentName:"ul"},"terser 5"),(0,t.kt)("li",{parentName:"ul"},"当 Webpack 作为句首时，Webpack 的 W 应该大写")))}i.isMDXComponent=!0,a.default=i}}]);